{"version":3,"file":"index.js","sources":["../webpack://github-ado-chatops/./lib/azureDevOpsClient.js","../webpack://github-ado-chatops/./lib/azureDevOpsService.js","../webpack://github-ado-chatops/./lib/chatOpService.js","../webpack://github-ado-chatops/./lib/chatOps.js","../webpack://github-ado-chatops/./lib/configService.js","../webpack://github-ado-chatops/./lib/main.js","../webpack://github-ado-chatops/./node_modules/@actions/core/lib/command.js","../webpack://github-ado-chatops/./node_modules/@actions/core/lib/core.js","../webpack://github-ado-chatops/./node_modules/@actions/core/lib/file-command.js","../webpack://github-ado-chatops/./node_modules/@actions/core/lib/utils.js","../webpack://github-ado-chatops/./node_modules/@actions/github/lib/context.js","../webpack://github-ado-chatops/./node_modules/@actions/github/lib/github.js","../webpack://github-ado-chatops/./node_modules/@actions/github/lib/internal/utils.js","../webpack://github-ado-chatops/./node_modules/@actions/github/lib/utils.js","../webpack://github-ado-chatops/./node_modules/@actions/http-client/index.js","../webpack://github-ado-chatops/./node_modules/@actions/http-client/proxy.js","../webpack://github-ado-chatops/./node_modules/@octokit/auth-token/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/core/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/endpoint/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/graphql/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/plugin-paginate-rest/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/request-error/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/@octokit/request/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/BuildApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/ClientApiBases.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/CoreApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/DashboardApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/ExtensionManagementApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/FeatureManagementApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/FileContainerApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/FileContainerApiBase.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/GalleryApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/GalleryCompatHttpClientBase.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/GitApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/LocationsApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/NotificationApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/PolicyApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/ProfileApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/ProjectAnalysisApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/ReleaseApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/SecurityRolesApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/Serialization.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/TaskAgentApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/TaskAgentApiBase.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/TaskApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/TestApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/TfvcApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/VsoClient.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WebApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WikiApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WorkApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WorkItemTrackingApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WorkItemTrackingProcessApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/WorkItemTrackingProcessDefinitionsApi.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/handlers/basiccreds.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/handlers/bearertoken.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/handlers/ntlm.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/handlers/personalaccesstoken.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/BuildInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/CommentsInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/CoreInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/DashboardInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/ExtensionManagementInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/FeatureManagementInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/FileContainerInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/GalleryInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/GitInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/LocationsInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/NotificationInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/PolicyInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/ProfileInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/ProjectAnalysisInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/ReleaseInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/SecurityRolesInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/TaskAgentInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/TestInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/TfvcInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/WikiInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/WorkInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/WorkItemTrackingInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessDefinitionsInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/common/FormInputInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/common/OperationsInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/common/System.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/common/SystemDataInterfaces.js","../webpack://github-ado-chatops/./node_modules/azure-devops-node-api/interfaces/common/VSSInterfaces.js","../webpack://github-ado-chatops/./node_modules/before-after-hook/index.js","../webpack://github-ado-chatops/./node_modules/before-after-hook/lib/add.js","../webpack://github-ado-chatops/./node_modules/before-after-hook/lib/register.js","../webpack://github-ado-chatops/./node_modules/before-after-hook/lib/remove.js","../webpack://github-ado-chatops/./node_modules/call-bind/callBound.js","../webpack://github-ado-chatops/./node_modules/call-bind/index.js","../webpack://github-ado-chatops/./node_modules/deprecation/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/function-bind/implementation.js","../webpack://github-ado-chatops/./node_modules/function-bind/index.js","../webpack://github-ado-chatops/./node_modules/get-intrinsic/index.js","../webpack://github-ado-chatops/./node_modules/has-symbols/index.js","../webpack://github-ado-chatops/./node_modules/has-symbols/shams.js","../webpack://github-ado-chatops/./node_modules/has/src/index.js","../webpack://github-ado-chatops/./node_modules/is-plain-object/dist/is-plain-object.js","../webpack://github-ado-chatops/./node_modules/node-fetch/lib/index.js","../webpack://github-ado-chatops/./node_modules/once/once.js","../webpack://github-ado-chatops/./node_modules/qs/lib/formats.js","../webpack://github-ado-chatops/./node_modules/qs/lib/index.js","../webpack://github-ado-chatops/./node_modules/qs/lib/parse.js","../webpack://github-ado-chatops/./node_modules/qs/lib/stringify.js","../webpack://github-ado-chatops/./node_modules/qs/lib/utils.js","../webpack://github-ado-chatops/./node_modules/side-channel/index.js","../webpack://github-ado-chatops/./node_modules/side-channel/node_modules/object-inspect/index.js","../webpack://github-ado-chatops/./node_modules/side-channel/node_modules/object-inspect/util.inspect.js","../webpack://github-ado-chatops/./node_modules/tunnel/index.js","../webpack://github-ado-chatops/./node_modules/tunnel/lib/tunnel.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/Handlers.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/HttpClient.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/RestClient.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/Util.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/handlers/basiccreds.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/handlers/bearertoken.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/handlers/ntlm.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/handlers/personalaccesstoken.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/opensource/Node-SMB/lib/common.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/opensource/Node-SMB/lib/ntlm.js","../webpack://github-ado-chatops/./node_modules/typed-rest-client/opensource/Node-SMB/lib/smbhash.js","../webpack://github-ado-chatops/./node_modules/universal-user-agent/dist-node/index.js","../webpack://github-ado-chatops/./node_modules/wrappy/wrappy.js","../webpack://github-ado-chatops/./node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://github-ado-chatops/./node_modules/underscore/underscore-node-f.cjs","../webpack://github-ado-chatops/./node_modules/underscore/underscore-node.cjs","../webpack://github-ado-chatops/external \"assert\"","../webpack://github-ado-chatops/external \"crypto\"","../webpack://github-ado-chatops/external \"events\"","../webpack://github-ado-chatops/external \"fs\"","../webpack://github-ado-chatops/external \"http\"","../webpack://github-ado-chatops/external \"https\"","../webpack://github-ado-chatops/external \"net\"","../webpack://github-ado-chatops/external \"os\"","../webpack://github-ado-chatops/external \"path\"","../webpack://github-ado-chatops/external \"stream\"","../webpack://github-ado-chatops/external \"tls\"","../webpack://github-ado-chatops/external \"url\"","../webpack://github-ado-chatops/external \"util\"","../webpack://github-ado-chatops/external \"zlib\"","../webpack://github-ado-chatops/webpack/bootstrap","../webpack://github-ado-chatops/webpack/runtime/compat","../webpack://github-ado-chatops/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AzureDevOpsClient = void 0;\nconst azdev = __importStar(require(\"azure-devops-node-api\"));\nconst core = __importStar(require(\"@actions/core\"));\nconst configService_1 = require(\"./configService\");\nclass AzureDevOpsClient {\n    constructor(appConfig, azDevClient) {\n        this._appConfig = configService_1.ConfigService.defaultAppConfig;\n        this._appConfig = appConfig;\n        this._azDevClient = azDevClient;\n    }\n    static build(configService) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const appConfig = configService.appConfig;\n            const orgUrl = `https://${appConfig.ado_domain}/${appConfig.ado_org}`;\n            const authHandler = azdev.getPersonalAccessTokenHandler(appConfig.ado_pat);\n            const azDevClient = new azdev.WebApi(orgUrl, authHandler);\n            return new AzureDevOpsClient(appConfig, azDevClient);\n        });\n    }\n    createBranch(branchName, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                core.info('Getting the ADO git API...');\n                const gitClient = yield this._azDevClient.getGitApi();\n                core.info('Got it.');\n                core.info('Getting the repo...');\n                const repo = yield this.getRepo(gitClient);\n                core.info('Got it.');\n                let sourceBranch = options.sourceBranch;\n                if (!sourceBranch) {\n                    core.info('Getting the default branch in ADO...');\n                    sourceBranch = this.getDefaultBranch(repo);\n                    core.info('Got it.');\n                }\n                const result = yield this.createBranchInner(branchName, options, gitClient, repo);\n                return result;\n            }\n            catch (error) {\n                core.error(`Failed to create branch: ${branchName}`);\n                throw new Error(`Failed to create branch: ${branchName}`);\n            }\n        });\n    }\n    deleteBranch(refName, refObjectId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const gitClient = yield this._azDevClient.getGitApi();\n            const gitRefUpdates = [\n                {\n                    oldObjectId: refObjectId,\n                    newObjectId: new Array(41).join('0'),\n                    name: refName\n                }\n            ];\n            // create a new branch from the source\n            const updateResults = yield gitClient.updateRefs(gitRefUpdates, this._appConfig.ado_repo, this._appConfig.ado_project);\n            const refDeleteResult = updateResults[0];\n            return refDeleteResult;\n        });\n    }\n    createBranchInner(branchName, options, gitClient, repo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            core.debug(`Creating branch from ${options.sourceBranch}.`);\n            core.debug(`Getting ${options.sourceBranch} refs...`);\n            const gitRefs = yield gitClient.getRefs(repo.id, this._appConfig.ado_project, options.sourceBranch);\n            const sourceRef = gitRefs[0];\n            core.debug(\"Got 'em.\");\n            const gitRefUpdates = [\n                {\n                    oldObjectId: new Array(41).join('0'),\n                    newObjectId: sourceRef.objectId,\n                    name: `refs/heads/${branchName}`\n                }\n            ];\n            // create a new branch from the source\n            core.debug('Creating the new branch...');\n            const updateResults = yield gitClient.updateRefs(gitRefUpdates, this._appConfig.ado_repo, this._appConfig.ado_project);\n            const refCreateResult = updateResults[0];\n            return refCreateResult;\n        });\n    }\n    getDefaultBranch(repo) {\n        var _a;\n        const defaultBranch = (_a = repo.defaultBranch) === null || _a === void 0 ? void 0 : _a.replace('refs/', '');\n        if (!defaultBranch) {\n            core.error(`${defaultBranch} does not exist`);\n            throw new Error(`${defaultBranch} does not exist`);\n        }\n        return defaultBranch;\n    }\n    getRepo(gitClient) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const repo = yield gitClient.getRepository(this._appConfig.ado_repo, this._appConfig.ado_project);\n            if (!repo.id) {\n                core.error(`Repo ${this._appConfig.ado_repo} does not exist in project ${this._appConfig.ado_project}`);\n                throw new Error(`Repo ${this._appConfig.ado_repo} does not exist in project ${this._appConfig.ado_project}`);\n            }\n            return repo;\n        });\n    }\n}\nexports.AzureDevOpsClient = AzureDevOpsClient;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AzureDevOpsService = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst azureDevOpsClient_1 = require(\"./azureDevOpsClient\");\nclass AzureDevOpsService {\n    constructor(appConfig, adoClient) {\n        // Maximum number of bytes in a git branch is 250\n        // Therefore, trim branch name to 62 characters (assuming 32-bit/4-byte Unicode) => 238 bytes\n        // (https://stackoverflow.com/questions/60045157/what-is-the-maximum-length-of-a-github-branch-name)\n        this.maxNumOfChars = 62;\n        this._appConfig = appConfig;\n        this._adoClient = adoClient;\n    }\n    static build(configService) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const appConfig = configService.appConfig;\n            const adoClient = yield azureDevOpsClient_1.AzureDevOpsClient.build(configService);\n            return new AzureDevOpsService(appConfig, adoClient);\n        });\n    }\n    createBranch(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Build the branch name from the issue title\n                core.info('Building branch name...');\n                const branchName = this.buildBranchName(options);\n                core.info(`Branch name: ${branchName}`);\n                this._adoClient.createBranch(branchName, options);\n                // Create a comment with a link to the newly created branch\n                const successMessage = `Branch [${branchName}](${this.getBranchUrl(branchName)}) has been created in Azure DevOps`;\n                return successMessage;\n            }\n            catch (e) {\n                const errorMessage = `Failed creating the branch in ADO: ${e}`;\n                core.error(errorMessage);\n                return errorMessage;\n            }\n        });\n    }\n    getBranchUrl(branchName) {\n        const uriEncodedBranchName = encodeURIComponent(branchName);\n        return `https://${this._appConfig.ado_domain}/${this._appConfig.ado_org}/${this._appConfig.ado_project}/_git/${this._appConfig.ado_repo}?version=GB${uriEncodedBranchName}`;\n    }\n    buildBranchName(options) {\n        const issueInfo = `${options.issueNumber}-${options.issueTitle.toLowerCase()}`;\n        const branchName = `users/${this.makeGitSafe(options.username)}/${this.makeGitSafe(issueInfo)}`;\n        return branchName.substr(0, this.maxNumOfChars);\n    }\n    makeGitSafe(s) {\n        const replacementChar = '-';\n        const regexp = /(?![-/])[\\W]+/g;\n        const result = s.replace(regexp, replacementChar).replace(/[/]+$/, '');\n        return result;\n    }\n}\nexports.AzureDevOpsService = AzureDevOpsService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatOpService = void 0;\nconst chatOps_1 = require(\"./chatOps\");\nclass ChatOpService {\n    static build() {\n        return new ChatOpService();\n    }\n    getChatOpCommand(comment) {\n        const command = this.getCommandString(comment);\n        return chatOps_1.chatOps.find((op) => op === command) || 'None';\n    }\n    getParameterValues(command, comment) {\n        var _a;\n        const possibleParams = ((_a = chatOps_1.chatOpInfo.find((info) => info.commands.includes(command))) === null || _a === void 0 ? void 0 : _a.params) || [];\n        if (possibleParams.length === 0)\n            return {};\n        const paramValueMap = {};\n        for (const pp of possibleParams) {\n            paramValueMap[pp] = this.getParamValue(pp, comment);\n        }\n        return paramValueMap;\n    }\n    getCommandString(comment) {\n        const commentTrim = comment.trim();\n        if (!commentTrim.startsWith('/'))\n            return '';\n        const command = commentTrim.split(' ')[0];\n        return command;\n    }\n    getParamValue(param, comment) {\n        const splitResult = comment.split(param);\n        if (splitResult.length < 2)\n            return '';\n        const theRest = splitResult[1].trim();\n        return theRest.split(' ')[0];\n    }\n}\nexports.ChatOpService = ChatOpService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chatOps = exports.chatOpInfo = void 0;\nconst createBranchChatOpInfo = {\n    commands: ['/cb-ado', '/create-branch-ado'],\n    params: ['-branch', '-username']\n};\nconst chatOpInfo = [createBranchChatOpInfo];\nexports.chatOpInfo = chatOpInfo;\nconst chatOps = createBranchChatOpInfo.commands;\nexports.chatOps = chatOps;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigService = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nclass ConfigService {\n    constructor(appConfig) {\n        this.appConfig = ConfigService.defaultAppConfig;\n        this.appConfig = appConfig;\n    }\n    static build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loadedConfig = this.loadConfig();\n            const config = ConfigService.mergeDefaults(loadedConfig);\n            const errorMessages = ConfigService.validateConfig(config);\n            if (errorMessages.length > 0) {\n                const errorStr = errorMessages.join('\\n');\n                core.error(errorStr);\n                throw new Error(errorStr);\n            }\n            return new ConfigService(config);\n        });\n    }\n    static mergeDefaults(loadedConfig) {\n        return {\n            ado_domain: loadedConfig.ado_domain || ConfigService.defaultAppConfig.ado_domain,\n            ado_org: loadedConfig.ado_org,\n            ado_pat: loadedConfig.ado_pat,\n            ado_project: loadedConfig.ado_project,\n            ado_repo: loadedConfig.ado_repo,\n            github_token: loadedConfig.github_token\n        };\n    }\n    static validateConfig(config) {\n        const errorMessages = [];\n        // There are better ways to do this but I'm being lazy\n        if (!config.ado_domain)\n            errorMessages.push('No ado_org was found. Check your inputs');\n        if (!config.ado_org)\n            errorMessages.push('No ado_org was found. Check your inputs');\n        if (!config.ado_pat)\n            errorMessages.push('No ado_pat was found. Check your inputs');\n        if (!config.ado_project)\n            errorMessages.push('No ado_project was found. Check your inputs');\n        if (!config.ado_repo)\n            errorMessages.push('No ado_repo was found. Check your inputs');\n        if (!config.github_token)\n            errorMessages.push('No github_token was found. Check your inputs');\n        return errorMessages;\n    }\n}\nexports.ConfigService = ConfigService;\nConfigService.defaultAppConfig = {\n    ado_domain: 'dev.azure.com',\n    ado_org: '',\n    ado_pat: '',\n    ado_project: '',\n    ado_repo: '',\n    github_token: ''\n};\nConfigService.loadConfig = () => {\n    const ado_domain = core.getInput('ado_domain');\n    const ado_org = core.getInput('ado_org');\n    const ado_project = core.getInput('ado_project');\n    const ado_repo = core.getInput('ado_repo');\n    const ado_pat = core.getInput('ado_pat');\n    const github_token = core.getInput('github_token');\n    // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true\n    core.info(`ado_domain: ${ado_domain}!`);\n    core.info(`ado_org: ${ado_org}!`);\n    core.info(`ado_project: ${ado_project}!`);\n    core.info(`ado_repo: ${ado_repo}!`);\n    core.info(`ado_pat: ${ado_pat != null ? '*******' : ''}!`);\n    core.info(`github_token: ${github_token != null ? '*******' : ''}!`);\n    return {\n        ado_domain,\n        ado_org,\n        ado_project,\n        ado_repo,\n        ado_pat,\n        github_token\n    };\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst github = __importStar(require(\"@actions/github\"));\nconst azureDevOpsService_1 = require(\"./azureDevOpsService\");\nconst chatOpService_1 = require(\"./chatOpService\");\nconst configService_1 = require(\"./configService\");\nconst utils_1 = require(\"@actions/github/lib/utils\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            core.info('Running GitHub <> ADO ChatOps...');\n            core.info(`Event: ${utils_1.context.eventName}`);\n            core.info(`Action: ${utils_1.context.payload.action || 'Unknown'}`);\n            core.info('Initializaing services...');\n            const configService = yield configService_1.ConfigService.build();\n            const octokit = github.getOctokit(configService.appConfig.github_token);\n            const chatOpService = chatOpService_1.ChatOpService.build();\n            const azureDevOpsService = yield azureDevOpsService_1.AzureDevOpsService.build(configService);\n            core.info('Done.');\n            let resultMessage = '';\n            if (utils_1.context.eventName === 'issue_comment') {\n                const issueCommentPayload = utils_1.context.payload;\n                if (issueCommentPayload.action === 'created') {\n                    const comment = issueCommentPayload.comment.body;\n                    core.info(`Comment: ${comment}`);\n                    const chatOpCommand = getChatOpCommand(chatOpService, comment);\n                    if (chatOpCommand === 'None')\n                        return core.info('Done.');\n                    const params = getParameters(chatOpService, chatOpCommand, comment);\n                    resultMessage = yield azureDevOpsService.createBranch({\n                        issueNumber: issueCommentPayload.issue.number,\n                        issueTitle: issueCommentPayload.issue.title,\n                        username: params['-username'] || issueCommentPayload.sender.login,\n                        sourceBranch: params['-branch']\n                    });\n                    yield octokit.rest.issues.createComment(Object.assign(Object.assign({}, utils_1.context.issue), { issue_number: utils_1.context.issue.number, body: resultMessage || 'There was nothing to do!' }));\n                }\n            }\n            core.info(resultMessage);\n        }\n        catch (error) {\n            let errorMessage = 'An unknown error has occurred';\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            }\n            core.setFailed(errorMessage);\n        }\n    });\n}\nfunction getChatOpCommand(chatOpService, comment) {\n    core.info('Checking for ChatOp command...');\n    const chatOpCommand = chatOpService.getChatOpCommand(comment);\n    core.info(`Found ChatOp: ${chatOpCommand}`);\n    return chatOpCommand;\n}\nfunction getParameters(chatOpService, chatOpCommand, comment) {\n    core.info('Getting parameters...');\n    const paramValues = chatOpService.getParameterValues(chatOpCommand, comment);\n    for (const key of Object.keys(paramValues)) {\n        const value = paramValues[key];\n        core.info(`Found ${key} ${value}`);\n    }\n    return paramValues;\n}\nrun();\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\nclass Context {\n    /**\n     * Hydrate the context from the environment\n     */\n    constructor() {\n        var _a, _b, _c;\n        this.payload = {};\n        if (process.env.GITHUB_EVENT_PATH) {\n            if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {\n                this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: 'utf8' }));\n            }\n            else {\n                const path = process.env.GITHUB_EVENT_PATH;\n                process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);\n            }\n        }\n        this.eventName = process.env.GITHUB_EVENT_NAME;\n        this.sha = process.env.GITHUB_SHA;\n        this.ref = process.env.GITHUB_REF;\n        this.workflow = process.env.GITHUB_WORKFLOW;\n        this.action = process.env.GITHUB_ACTION;\n        this.actor = process.env.GITHUB_ACTOR;\n        this.job = process.env.GITHUB_JOB;\n        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);\n        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);\n        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;\n        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;\n        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;\n    }\n    get issue() {\n        const payload = this.payload;\n        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });\n    }\n    get repo() {\n        if (process.env.GITHUB_REPOSITORY) {\n            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');\n            return { owner, repo };\n        }\n        if (this.payload.repository) {\n            return {\n                owner: this.payload.repository.owner.login,\n                repo: this.payload.repository.name\n            };\n        }\n        throw new Error(\"context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'\");\n    }\n}\nexports.Context = Context;\n//# sourceMappingURL=context.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOctokit = exports.context = void 0;\nconst Context = __importStar(require(\"./context\"));\nconst utils_1 = require(\"./utils\");\nexports.context = new Context.Context();\n/**\n * Returns a hydrated octokit ready to use for GitHub Actions\n *\n * @param     token    the repo PAT or GITHUB_TOKEN\n * @param     options  other options to set\n */\nfunction getOctokit(token, options) {\n    return new utils_1.GitHub(utils_1.getOctokitOptions(token, options));\n}\nexports.getOctokit = getOctokit;\n//# sourceMappingURL=github.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0;\nconst httpClient = __importStar(require(\"@actions/http-client\"));\nfunction getAuthString(token, options) {\n    if (!token && !options.auth) {\n        throw new Error('Parameter token or opts.auth is required');\n    }\n    else if (token && options.auth) {\n        throw new Error('Parameters token and opts.auth may not both be specified');\n    }\n    return typeof options.auth === 'string' ? options.auth : `token ${token}`;\n}\nexports.getAuthString = getAuthString;\nfunction getProxyAgent(destinationUrl) {\n    const hc = new httpClient.HttpClient();\n    return hc.getAgent(destinationUrl);\n}\nexports.getProxyAgent = getProxyAgent;\nfunction getApiBaseUrl() {\n    return process.env['GITHUB_API_URL'] || 'https://api.github.com';\n}\nexports.getApiBaseUrl = getApiBaseUrl;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOctokitOptions = exports.GitHub = exports.context = void 0;\nconst Context = __importStar(require(\"./context\"));\nconst Utils = __importStar(require(\"./internal/utils\"));\n// octokit + plugins\nconst core_1 = require(\"@octokit/core\");\nconst plugin_rest_endpoint_methods_1 = require(\"@octokit/plugin-rest-endpoint-methods\");\nconst plugin_paginate_rest_1 = require(\"@octokit/plugin-paginate-rest\");\nexports.context = new Context.Context();\nconst baseUrl = Utils.getApiBaseUrl();\nconst defaults = {\n    baseUrl,\n    request: {\n        agent: Utils.getProxyAgent(baseUrl)\n    }\n};\nexports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(defaults);\n/**\n * Convience function to correctly format Octokit Options to pass into the constructor.\n *\n * @param     token    the repo PAT or GITHUB_TOKEN\n * @param     options  other options to set\n */\nfunction getOctokitOptions(token, options) {\n    const opts = Object.assign({}, options || {}); // Shallow clone - don't mutate the object provided by the caller\n    // Auth\n    const auth = Utils.getAuthString(token, opts);\n    if (auth) {\n        opts.auth = auth;\n    }\n    return opts;\n}\nexports.getOctokitOptions = getOctokitOptions;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst pm = require(\"./proxy\");\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise(async (resolve, reject) => {\n            let output = Buffer.alloc(0);\n            this.message.on('data', (chunk) => {\n                output = Buffer.concat([output, chunk]);\n            });\n            this.message.on('end', () => {\n                resolve(output.toString());\n            });\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    async getJson(requestUrl, additionalHeaders = {}) {\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        let res = await this.get(requestUrl, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async postJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.post(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async putJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.put(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async patchJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.patch(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    async request(verb, requestUrl, data, headers) {\n        if (this._disposed) {\n            throw new Error('Client has already been disposed.');\n        }\n        let parsedUrl = new URL(requestUrl);\n        let info = this._prepareRequest(verb, parsedUrl, headers);\n        // Only perform retries on reads since writes may not be idempotent.\n        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1\n            ? this._maxRetries + 1\n            : 1;\n        let numTries = 0;\n        let response;\n        while (numTries < maxTries) {\n            response = await this.requestRaw(info, data);\n            // Check if it's an authentication challenge\n            if (response &&\n                response.message &&\n                response.message.statusCode === HttpCodes.Unauthorized) {\n                let authenticationHandler;\n                for (let i = 0; i < this.handlers.length; i++) {\n                    if (this.handlers[i].canHandleAuthentication(response)) {\n                        authenticationHandler = this.handlers[i];\n                        break;\n                    }\n                }\n                if (authenticationHandler) {\n                    return authenticationHandler.handleAuthentication(this, info, data);\n                }\n                else {\n                    // We have received an unauthorized response but have no handlers to handle it.\n                    // Let the response return to the caller.\n                    return response;\n                }\n            }\n            let redirectsRemaining = this._maxRedirects;\n            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&\n                this._allowRedirects &&\n                redirectsRemaining > 0) {\n                const redirectUrl = response.message.headers['location'];\n                if (!redirectUrl) {\n                    // if there's no location to redirect to, we won't\n                    break;\n                }\n                let parsedRedirectUrl = new URL(redirectUrl);\n                if (parsedUrl.protocol == 'https:' &&\n                    parsedUrl.protocol != parsedRedirectUrl.protocol &&\n                    !this._allowRedirectDowngrade) {\n                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                }\n                // we need to finish reading the response before reassigning response\n                // which will leak the open socket.\n                await response.readBody();\n                // strip authorization header if redirected to a different hostname\n                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                    for (let header in headers) {\n                        // header names are case insensitive\n                        if (header.toLowerCase() === 'authorization') {\n                            delete headers[header];\n                        }\n                    }\n                }\n                // let's make the request with the new redirectUrl\n                info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                response = await this.requestRaw(info, data);\n                redirectsRemaining--;\n            }\n            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                // If not a retry code, return immediately instead of retrying\n                return response;\n            }\n            numTries += 1;\n            if (numTries < maxTries) {\n                await response.readBody();\n                await this._performExponentialBackoff(numTries);\n            }\n        }\n        return response;\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof data === 'string') {\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        let parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            this.handlers.forEach(handler => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxyUrl = pm.getProxyUrl(parsedUrl);\n        let useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    ...((proxyUrl.username || proxyUrl.password) && {\n                        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                    }),\n                    host: proxyUrl.hostname,\n                    port: proxyUrl.port\n                }\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    async _processResponse(res, options) {\n        return new Promise(async (resolve, reject) => {\n            const statusCode = res.message.statusCode;\n            const response = {\n                statusCode: statusCode,\n                result: null,\n                headers: {}\n            };\n            // not found leads to null obj returned\n            if (statusCode == HttpCodes.NotFound) {\n                resolve(response);\n            }\n            let obj;\n            let contents;\n            // get the result from the body\n            try {\n                contents = await res.readBody();\n                if (contents && contents.length > 0) {\n                    if (options && options.deserializeDates) {\n                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);\n                    }\n                    else {\n                        obj = JSON.parse(contents);\n                    }\n                    response.result = obj;\n                }\n                response.headers = res.message.headers;\n            }\n            catch (err) {\n                // Invalid resource (contents not json);  leaving result obj null\n            }\n            // note that 3xx redirects are handled by the http layer.\n            if (statusCode > 299) {\n                let msg;\n                // if exception/error in body, attempt to get better error\n                if (obj && obj.message) {\n                    msg = obj.message;\n                }\n                else if (contents && contents.length > 0) {\n                    // it may be the case that the exception is in the body message as string\n                    msg = contents;\n                }\n                else {\n                    msg = 'Failed request: (' + statusCode + ')';\n                }\n                let err = new HttpClientError(msg, statusCode);\n                err.result = response.result;\n                reject(err);\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProxyUrl(reqUrl) {\n    let usingSsl = reqUrl.protocol === 'https:';\n    let proxyUrl;\n    if (checkBypass(reqUrl)) {\n        return proxyUrl;\n    }\n    let proxyVar;\n    if (usingSsl) {\n        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n    }\n    else {\n        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];\n    }\n    if (proxyVar) {\n        proxyUrl = new URL(proxyVar);\n    }\n    return proxyUrl;\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    let upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (let upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nasync function auth(token) {\n  const tokenType = token.split(/\\./).length === 3 ? \"app\" : /^v\\d+\\./.test(token) ? \"installation\" : \"oauth\";\n  return {\n    type: \"token\",\n    token: token,\n    tokenType\n  };\n}\n\n/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nfunction withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n\n  return `token ${token}`;\n}\n\nasync function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(route, parameters);\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n  return request(endpoint);\n}\n\nconst createTokenAuth = function createTokenAuth(token) {\n  if (!token) {\n    throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n  }\n\n  if (typeof token !== \"string\") {\n    throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n  }\n\n  token = token.replace(/^(token|bearer) +/i, \"\");\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token)\n  });\n};\n\nexports.createTokenAuth = createTokenAuth;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar universalUserAgent = require('universal-user-agent');\nvar beforeAfterHook = require('before-after-hook');\nvar request = require('@octokit/request');\nvar graphql = require('@octokit/graphql');\nvar authToken = require('@octokit/auth-token');\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nconst VERSION = \"3.5.1\";\n\nconst _excluded = [\"authStrategy\"];\nclass Octokit {\n  constructor(options = {}) {\n    const hook = new beforeAfterHook.Collection();\n    const requestDefaults = {\n      baseUrl: request.request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    }; // prepend default user agent with `options.userAgent` if set\n\n    requestDefaults.headers[\"user-agent\"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(\" \");\n\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n\n    this.request = request.request.defaults(requestDefaults);\n    this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    this.hook = hook; // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    // TODO: type `options.auth` based on `options.authStrategy`.\n\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        // (2)\n        const auth = authToken.createTokenAuth(options.auth); // @ts-ignore  ¯\\_(ツ)_/¯\n\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const {\n        authStrategy\n      } = options,\n            otherOptions = _objectWithoutProperties(options, _excluded);\n\n      const auth = authStrategy(Object.assign({\n        request: this.request,\n        log: this.log,\n        // we pass the current octokit instance as well as its constructor options\n        // to allow for authentication strategies that return a new octokit instance\n        // that shares the same internal state as the current one. The original\n        // requirement for this was the \"event-octokit\" authentication strategy\n        // of https://github.com/probot/octokit-auth-probot.\n        octokit: this,\n        octokitOptions: otherOptions\n      }, options.auth)); // @ts-ignore  ¯\\_(ツ)_/¯\n\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    } // apply plugins\n    // https://stackoverflow.com/a/16345172\n\n\n    const classConstructor = this.constructor;\n    classConstructor.plugins.forEach(plugin => {\n      Object.assign(this, plugin(this, options));\n    });\n  }\n\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor(...args) {\n        const options = args[0] || {};\n\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n\n        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n          userAgent: `${options.userAgent} ${defaults.userAgent}`\n        } : null));\n      }\n\n    };\n    return OctokitWithDefaults;\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n\n\n  static plugin(...newPlugins) {\n    var _a;\n\n    const currentPlugins = this.plugins;\n    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);\n    return NewOctokit;\n  }\n\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n\nexports.Octokit = Octokit;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isPlainObject = require('is-plain-object');\nvar universalUserAgent = require('universal-user-agent');\n\nfunction lowercaseKeys(object) {\n  if (!object) {\n    return {};\n  }\n\n  return Object.keys(object).reduce((newObj, key) => {\n    newObj[key.toLowerCase()] = object[key];\n    return newObj;\n  }, {});\n}\n\nfunction mergeDeep(defaults, options) {\n  const result = Object.assign({}, defaults);\n  Object.keys(options).forEach(key => {\n    if (isPlainObject.isPlainObject(options[key])) {\n      if (!(key in defaults)) Object.assign(result, {\n        [key]: options[key]\n      });else result[key] = mergeDeep(defaults[key], options[key]);\n    } else {\n      Object.assign(result, {\n        [key]: options[key]\n      });\n    }\n  });\n  return result;\n}\n\nfunction removeUndefinedProperties(obj) {\n  for (const key in obj) {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    }\n  }\n\n  return obj;\n}\n\nfunction merge(defaults, route, options) {\n  if (typeof route === \"string\") {\n    let [method, url] = route.split(\" \");\n    options = Object.assign(url ? {\n      method,\n      url\n    } : {\n      url: method\n    }, options);\n  } else {\n    options = Object.assign({}, route);\n  } // lowercase header names before merging with defaults to avoid duplicates\n\n\n  options.headers = lowercaseKeys(options.headers); // remove properties with undefined values before merging\n\n  removeUndefinedProperties(options);\n  removeUndefinedProperties(options.headers);\n  const mergedOptions = mergeDeep(defaults || {}, options); // mediaType.previews arrays are merged, instead of overwritten\n\n  if (defaults && defaults.mediaType.previews.length) {\n    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(preview => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);\n  }\n\n  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map(preview => preview.replace(/-preview/, \"\"));\n  return mergedOptions;\n}\n\nfunction addQueryParameters(url, parameters) {\n  const separator = /\\?/.test(url) ? \"&\" : \"?\";\n  const names = Object.keys(parameters);\n\n  if (names.length === 0) {\n    return url;\n  }\n\n  return url + separator + names.map(name => {\n    if (name === \"q\") {\n      return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n    }\n\n    return `${name}=${encodeURIComponent(parameters[name])}`;\n  }).join(\"&\");\n}\n\nconst urlVariableRegex = /\\{[^}]+\\}/g;\n\nfunction removeNonChars(variableName) {\n  return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\n\nfunction extractUrlVariableNames(url) {\n  const matches = url.match(urlVariableRegex);\n\n  if (!matches) {\n    return [];\n  }\n\n  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n\nfunction omit(object, keysToOmit) {\n  return Object.keys(object).filter(option => !keysToOmit.includes(option)).reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\n\n// Based on https://github.com/bramstein/url-template, licensed under BSD\n// TODO: create separate package.\n//\n// Copyright (c) 2012-2014, Bram Stein\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  1. Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer in the\n//     documentation and/or other materials provided with the distribution.\n//  3. The name of the author may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR IMPLIED\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* istanbul ignore file */\nfunction encodeReserved(str) {\n  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n    if (!/%[0-9A-Fa-f]/.test(part)) {\n      part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n    }\n\n    return part;\n  }).join(\"\");\n}\n\nfunction encodeUnreserved(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction encodeValue(operator, value, key) {\n  value = operator === \"+\" || operator === \"#\" ? encodeReserved(value) : encodeUnreserved(value);\n\n  if (key) {\n    return encodeUnreserved(key) + \"=\" + value;\n  } else {\n    return value;\n  }\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isKeyOperator(operator) {\n  return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\n\nfunction getValues(context, operator, key, modifier) {\n  var value = context[key],\n      result = [];\n\n  if (isDefined(value) && value !== \"\") {\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n      value = value.toString();\n\n      if (modifier && modifier !== \"*\") {\n        value = value.substring(0, parseInt(modifier, 10));\n      }\n\n      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n    } else {\n      if (modifier === \"*\") {\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              result.push(encodeValue(operator, value[k], k));\n            }\n          });\n        }\n      } else {\n        const tmp = [];\n\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            tmp.push(encodeValue(operator, value));\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              tmp.push(encodeUnreserved(k));\n              tmp.push(encodeValue(operator, value[k].toString()));\n            }\n          });\n        }\n\n        if (isKeyOperator(operator)) {\n          result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n        } else if (tmp.length !== 0) {\n          result.push(tmp.join(\",\"));\n        }\n      }\n    }\n  } else {\n    if (operator === \";\") {\n      if (isDefined(value)) {\n        result.push(encodeUnreserved(key));\n      }\n    } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n      result.push(encodeUnreserved(key) + \"=\");\n    } else if (value === \"\") {\n      result.push(\"\");\n    }\n  }\n\n  return result;\n}\n\nfunction parseUrl(template) {\n  return {\n    expand: expand.bind(null, template)\n  };\n}\n\nfunction expand(template, context) {\n  var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n  return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n    if (expression) {\n      let operator = \"\";\n      const values = [];\n\n      if (operators.indexOf(expression.charAt(0)) !== -1) {\n        operator = expression.charAt(0);\n        expression = expression.substr(1);\n      }\n\n      expression.split(/,/g).forEach(function (variable) {\n        var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n        values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n      });\n\n      if (operator && operator !== \"+\") {\n        var separator = \",\";\n\n        if (operator === \"?\") {\n          separator = \"&\";\n        } else if (operator !== \"#\") {\n          separator = operator;\n        }\n\n        return (values.length !== 0 ? operator : \"\") + values.join(separator);\n      } else {\n        return values.join(\",\");\n      }\n    } else {\n      return encodeReserved(literal);\n    }\n  });\n}\n\nfunction parse(options) {\n  // https://fetch.spec.whatwg.org/#methods\n  let method = options.method.toUpperCase(); // replace :varname with {varname} to make it RFC 6570 compatible\n\n  let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n  let headers = Object.assign({}, options.headers);\n  let body;\n  let parameters = omit(options, [\"method\", \"baseUrl\", \"url\", \"headers\", \"request\", \"mediaType\"]); // extract variable names from URL to calculate remaining variables later\n\n  const urlVariableNames = extractUrlVariableNames(url);\n  url = parseUrl(url).expand(parameters);\n\n  if (!/^http/.test(url)) {\n    url = options.baseUrl + url;\n  }\n\n  const omittedParameters = Object.keys(options).filter(option => urlVariableNames.includes(option)).concat(\"baseUrl\");\n  const remainingParameters = omit(parameters, omittedParameters);\n  const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n\n  if (!isBinaryRequest) {\n    if (options.mediaType.format) {\n      // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw\n      headers.accept = headers.accept.split(/,/).map(preview => preview.replace(/application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(\",\");\n    }\n\n    if (options.mediaType.previews.length) {\n      const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map(preview => {\n        const format = options.mediaType.format ? `.${options.mediaType.format}` : \"+json\";\n        return `application/vnd.github.${preview}-preview${format}`;\n      }).join(\",\");\n    }\n  } // for GET/HEAD requests, set URL query parameters from remaining parameters\n  // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters\n\n\n  if ([\"GET\", \"HEAD\"].includes(method)) {\n    url = addQueryParameters(url, remainingParameters);\n  } else {\n    if (\"data\" in remainingParameters) {\n      body = remainingParameters.data;\n    } else {\n      if (Object.keys(remainingParameters).length) {\n        body = remainingParameters;\n      } else {\n        headers[\"content-length\"] = 0;\n      }\n    }\n  } // default content-type for JSON if body is set\n\n\n  if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n    headers[\"content-type\"] = \"application/json; charset=utf-8\";\n  } // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.\n  // fetch does not allow to set `content-length` header, but we can set body to an empty string\n\n\n  if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n    body = \"\";\n  } // Only return body/request keys if present\n\n\n  return Object.assign({\n    method,\n    url,\n    headers\n  }, typeof body !== \"undefined\" ? {\n    body\n  } : null, options.request ? {\n    request: options.request\n  } : null);\n}\n\nfunction endpointWithDefaults(defaults, route, options) {\n  return parse(merge(defaults, route, options));\n}\n\nfunction withDefaults(oldDefaults, newDefaults) {\n  const DEFAULTS = merge(oldDefaults, newDefaults);\n  const endpoint = endpointWithDefaults.bind(null, DEFAULTS);\n  return Object.assign(endpoint, {\n    DEFAULTS,\n    defaults: withDefaults.bind(null, DEFAULTS),\n    merge: merge.bind(null, DEFAULTS),\n    parse\n  });\n}\n\nconst VERSION = \"6.0.12\";\n\nconst userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`; // DEFAULTS has all properties set that EndpointOptions has, except url.\n// So we use RequestParameters and add method as additional required property.\n\nconst DEFAULTS = {\n  method: \"GET\",\n  baseUrl: \"https://api.github.com\",\n  headers: {\n    accept: \"application/vnd.github.v3+json\",\n    \"user-agent\": userAgent\n  },\n  mediaType: {\n    format: \"\",\n    previews: []\n  }\n};\n\nconst endpoint = withDefaults(null, DEFAULTS);\n\nexports.endpoint = endpoint;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar request = require('@octokit/request');\nvar universalUserAgent = require('universal-user-agent');\n\nconst VERSION = \"4.8.0\";\n\nfunction _buildMessageForResponseErrors(data) {\n  return `Request failed due to following response errors:\\n` + data.errors.map(e => ` - ${e.message}`).join(\"\\n\");\n}\n\nclass GraphqlResponseError extends Error {\n  constructor(request, headers, response) {\n    super(_buildMessageForResponseErrors(response));\n    this.request = request;\n    this.headers = headers;\n    this.response = response;\n    this.name = \"GraphqlResponseError\"; // Expose the errors and response data in their shorthand properties.\n\n    this.errors = response.errors;\n    this.data = response.data; // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n}\n\nconst NON_VARIABLE_OPTIONS = [\"method\", \"baseUrl\", \"url\", \"headers\", \"request\", \"query\", \"mediaType\"];\nconst FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request, query, options) {\n  if (options) {\n    if (typeof query === \"string\" && \"query\" in options) {\n      return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n    }\n\n    for (const key in options) {\n      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;\n      return Promise.reject(new Error(`[@octokit/graphql] \"${key}\" cannot be used as variable name`));\n    }\n  }\n\n  const parsedOptions = typeof query === \"string\" ? Object.assign({\n    query\n  }, options) : query;\n  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n\n    if (!result.variables) {\n      result.variables = {};\n    }\n\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {}); // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n  // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n\n  const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n\n  return request(requestOptions).then(response => {\n    if (response.data.errors) {\n      const headers = {};\n\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n\n      throw new GraphqlResponseError(requestOptions, headers, response.data);\n    }\n\n    return response.data.data;\n  });\n}\n\nfunction withDefaults(request$1, newDefaults) {\n  const newRequest = request$1.defaults(newDefaults);\n\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: request.request.endpoint\n  });\n}\n\nconst graphql$1 = withDefaults(request.request, {\n  headers: {\n    \"user-agent\": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`\n  },\n  method: \"POST\",\n  url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\"\n  });\n}\n\nexports.GraphqlResponseError = GraphqlResponseError;\nexports.graphql = graphql$1;\nexports.withCustomRequest = withCustomRequest;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst VERSION = \"2.16.0\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nfunction normalizePaginatedListResponse(response) {\n  // endpoints can respond with 204 if repository is empty\n  if (!response.data) {\n    return _objectSpread2(_objectSpread2({}, response), {}, {\n      data: []\n    });\n  }\n\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response; // keep the additional properties intact as there is currently no other way\n  // to retrieve the same information.\n\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n\n  response.data.total_count = totalCount;\n  return response;\n}\n\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return {\n          done: true\n        };\n\n        try {\n          const response = await requestMethod({\n            method,\n            url,\n            headers\n          });\n          const normalizedResponse = normalizePaginatedListResponse(response); // `response.headers.link` format:\n          // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n          // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n\n          url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n          return {\n            value: normalizedResponse\n          };\n        } catch (error) {\n          if (error.status !== 409) throw error;\n          url = \"\";\n          return {\n            value: {\n              status: 200,\n              headers: {},\n              data: []\n            }\n          };\n        }\n      }\n\n    })\n  };\n}\n\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = undefined;\n  }\n\n  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\n\nfunction gather(octokit, results, iterator, mapFn) {\n  return iterator.next().then(result => {\n    if (result.done) {\n      return results;\n    }\n\n    let earlyExit = false;\n\n    function done() {\n      earlyExit = true;\n    }\n\n    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n\n    if (earlyExit) {\n      return results;\n    }\n\n    return gather(octokit, results, iterator, mapFn);\n  });\n}\n\nconst composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n\nconst paginatingEndpoints = [\"GET /app/hook/deliveries\", \"GET /app/installations\", \"GET /applications/grants\", \"GET /authorizations\", \"GET /enterprises/{enterprise}/actions/permissions/organizations\", \"GET /enterprises/{enterprise}/actions/runner-groups\", \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\", \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\", \"GET /enterprises/{enterprise}/actions/runners\", \"GET /enterprises/{enterprise}/actions/runners/downloads\", \"GET /events\", \"GET /gists\", \"GET /gists/public\", \"GET /gists/starred\", \"GET /gists/{gist_id}/comments\", \"GET /gists/{gist_id}/commits\", \"GET /gists/{gist_id}/forks\", \"GET /installation/repositories\", \"GET /issues\", \"GET /marketplace_listing/plans\", \"GET /marketplace_listing/plans/{plan_id}/accounts\", \"GET /marketplace_listing/stubbed/plans\", \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\", \"GET /networks/{owner}/{repo}/events\", \"GET /notifications\", \"GET /organizations\", \"GET /orgs/{org}/actions/permissions/repositories\", \"GET /orgs/{org}/actions/runner-groups\", \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\", \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\", \"GET /orgs/{org}/actions/runners\", \"GET /orgs/{org}/actions/runners/downloads\", \"GET /orgs/{org}/actions/secrets\", \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\", \"GET /orgs/{org}/blocks\", \"GET /orgs/{org}/credential-authorizations\", \"GET /orgs/{org}/events\", \"GET /orgs/{org}/failed_invitations\", \"GET /orgs/{org}/hooks\", \"GET /orgs/{org}/hooks/{hook_id}/deliveries\", \"GET /orgs/{org}/installations\", \"GET /orgs/{org}/invitations\", \"GET /orgs/{org}/invitations/{invitation_id}/teams\", \"GET /orgs/{org}/issues\", \"GET /orgs/{org}/members\", \"GET /orgs/{org}/migrations\", \"GET /orgs/{org}/migrations/{migration_id}/repositories\", \"GET /orgs/{org}/outside_collaborators\", \"GET /orgs/{org}/packages\", \"GET /orgs/{org}/projects\", \"GET /orgs/{org}/public_members\", \"GET /orgs/{org}/repos\", \"GET /orgs/{org}/secret-scanning/alerts\", \"GET /orgs/{org}/team-sync/groups\", \"GET /orgs/{org}/teams\", \"GET /orgs/{org}/teams/{team_slug}/discussions\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", \"GET /orgs/{org}/teams/{team_slug}/invitations\", \"GET /orgs/{org}/teams/{team_slug}/members\", \"GET /orgs/{org}/teams/{team_slug}/projects\", \"GET /orgs/{org}/teams/{team_slug}/repos\", \"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\", \"GET /orgs/{org}/teams/{team_slug}/teams\", \"GET /projects/columns/{column_id}/cards\", \"GET /projects/{project_id}/collaborators\", \"GET /projects/{project_id}/columns\", \"GET /repos/{owner}/{repo}/actions/artifacts\", \"GET /repos/{owner}/{repo}/actions/runners\", \"GET /repos/{owner}/{repo}/actions/runners/downloads\", \"GET /repos/{owner}/{repo}/actions/runs\", \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\", \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\", \"GET /repos/{owner}/{repo}/actions/secrets\", \"GET /repos/{owner}/{repo}/actions/workflows\", \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\", \"GET /repos/{owner}/{repo}/assignees\", \"GET /repos/{owner}/{repo}/autolinks\", \"GET /repos/{owner}/{repo}/branches\", \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\", \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\", \"GET /repos/{owner}/{repo}/code-scanning/alerts\", \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\", \"GET /repos/{owner}/{repo}/code-scanning/analyses\", \"GET /repos/{owner}/{repo}/collaborators\", \"GET /repos/{owner}/{repo}/comments\", \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/commits\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\", \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\", \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\", \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\", \"GET /repos/{owner}/{repo}/contributors\", \"GET /repos/{owner}/{repo}/deployments\", \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\", \"GET /repos/{owner}/{repo}/events\", \"GET /repos/{owner}/{repo}/forks\", \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\", \"GET /repos/{owner}/{repo}/hooks\", \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\", \"GET /repos/{owner}/{repo}/invitations\", \"GET /repos/{owner}/{repo}/issues\", \"GET /repos/{owner}/{repo}/issues/comments\", \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/issues/events\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\", \"GET /repos/{owner}/{repo}/keys\", \"GET /repos/{owner}/{repo}/labels\", \"GET /repos/{owner}/{repo}/milestones\", \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\", \"GET /repos/{owner}/{repo}/notifications\", \"GET /repos/{owner}/{repo}/pages/builds\", \"GET /repos/{owner}/{repo}/projects\", \"GET /repos/{owner}/{repo}/pulls\", \"GET /repos/{owner}/{repo}/pulls/comments\", \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\", \"GET /repos/{owner}/{repo}/releases\", \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\", \"GET /repos/{owner}/{repo}/secret-scanning/alerts\", \"GET /repos/{owner}/{repo}/stargazers\", \"GET /repos/{owner}/{repo}/subscribers\", \"GET /repos/{owner}/{repo}/tags\", \"GET /repos/{owner}/{repo}/teams\", \"GET /repositories\", \"GET /repositories/{repository_id}/environments/{environment_name}/secrets\", \"GET /scim/v2/enterprises/{enterprise}/Groups\", \"GET /scim/v2/enterprises/{enterprise}/Users\", \"GET /scim/v2/organizations/{org}/Users\", \"GET /search/code\", \"GET /search/commits\", \"GET /search/issues\", \"GET /search/labels\", \"GET /search/repositories\", \"GET /search/topics\", \"GET /search/users\", \"GET /teams/{team_id}/discussions\", \"GET /teams/{team_id}/discussions/{discussion_number}/comments\", \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\", \"GET /teams/{team_id}/invitations\", \"GET /teams/{team_id}/members\", \"GET /teams/{team_id}/projects\", \"GET /teams/{team_id}/repos\", \"GET /teams/{team_id}/team-sync/group-mappings\", \"GET /teams/{team_id}/teams\", \"GET /user/blocks\", \"GET /user/emails\", \"GET /user/followers\", \"GET /user/following\", \"GET /user/gpg_keys\", \"GET /user/installations\", \"GET /user/installations/{installation_id}/repositories\", \"GET /user/issues\", \"GET /user/keys\", \"GET /user/marketplace_purchases\", \"GET /user/marketplace_purchases/stubbed\", \"GET /user/memberships/orgs\", \"GET /user/migrations\", \"GET /user/migrations/{migration_id}/repositories\", \"GET /user/orgs\", \"GET /user/packages\", \"GET /user/public_emails\", \"GET /user/repos\", \"GET /user/repository_invitations\", \"GET /user/starred\", \"GET /user/subscriptions\", \"GET /user/teams\", \"GET /user/{username}/packages\", \"GET /users\", \"GET /users/{username}/events\", \"GET /users/{username}/events/orgs/{org}\", \"GET /users/{username}/events/public\", \"GET /users/{username}/followers\", \"GET /users/{username}/following\", \"GET /users/{username}/gists\", \"GET /users/{username}/gpg_keys\", \"GET /users/{username}/keys\", \"GET /users/{username}/orgs\", \"GET /users/{username}/projects\", \"GET /users/{username}/received_events\", \"GET /users/{username}/received_events/public\", \"GET /users/{username}/repos\", \"GET /users/{username}/starred\", \"GET /users/{username}/subscriptions\"];\n\nfunction isPaginatingEndpoint(arg) {\n  if (typeof arg === \"string\") {\n    return paginatingEndpoints.includes(arg);\n  } else {\n    return false;\n  }\n}\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\npaginateRest.VERSION = VERSION;\n\nexports.composePaginateRest = composePaginateRest;\nexports.isPaginatingEndpoint = isPaginatingEndpoint;\nexports.paginateRest = paginateRest;\nexports.paginatingEndpoints = paginatingEndpoints;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst Endpoints = {\n  actions: {\n    addSelectedRepoToOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"],\n    approveWorkflowRun: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve\"],\n    cancelWorkflowRun: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"],\n    createOrUpdateEnvironmentSecret: [\"PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"],\n    createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n    createOrUpdateRepoSecret: [\"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    createRegistrationTokenForOrg: [\"POST /orgs/{org}/actions/runners/registration-token\"],\n    createRegistrationTokenForRepo: [\"POST /repos/{owner}/{repo}/actions/runners/registration-token\"],\n    createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n    createRemoveTokenForRepo: [\"POST /repos/{owner}/{repo}/actions/runners/remove-token\"],\n    createWorkflowDispatch: [\"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"],\n    deleteArtifact: [\"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    deleteEnvironmentSecret: [\"DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n    deleteRepoSecret: [\"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    deleteSelfHostedRunnerFromOrg: [\"DELETE /orgs/{org}/actions/runners/{runner_id}\"],\n    deleteSelfHostedRunnerFromRepo: [\"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"],\n    deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    deleteWorkflowRunLogs: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"],\n    disableSelectedRepositoryGithubActionsOrganization: [\"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"],\n    disableWorkflow: [\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"],\n    downloadArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"],\n    downloadJobLogsForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"],\n    downloadWorkflowRunLogs: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"],\n    enableSelectedRepositoryGithubActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"],\n    enableWorkflow: [\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"],\n    getAllowedActionsOrganization: [\"GET /orgs/{org}/actions/permissions/selected-actions\"],\n    getAllowedActionsRepository: [\"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"],\n    getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    getEnvironmentPublicKey: [\"GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key\"],\n    getEnvironmentSecret: [\"GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}\"],\n    getGithubActionsPermissionsOrganization: [\"GET /orgs/{org}/actions/permissions\"],\n    getGithubActionsPermissionsRepository: [\"GET /repos/{owner}/{repo}/actions/permissions\"],\n    getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n    getPendingDeploymentsForRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"],\n    getRepoPermissions: [\"GET /repos/{owner}/{repo}/actions/permissions\", {}, {\n      renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"]\n    }],\n    getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n    getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    getReviewsForRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals\"],\n    getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n    getSelfHostedRunnerForRepo: [\"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"],\n    getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n    getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    getWorkflowRunUsage: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"],\n    getWorkflowUsage: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"],\n    listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n    listEnvironmentSecrets: [\"GET /repositories/{repository_id}/environments/{environment_name}/secrets\"],\n    listJobsForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"],\n    listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n    listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n    listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n    listRunnerApplicationsForRepo: [\"GET /repos/{owner}/{repo}/actions/runners/downloads\"],\n    listSelectedReposForOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"],\n    listSelectedRepositoriesEnabledGithubActionsOrganization: [\"GET /orgs/{org}/actions/permissions/repositories\"],\n    listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n    listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n    listWorkflowRunArtifacts: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"],\n    listWorkflowRuns: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"],\n    listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n    reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n    removeSelectedRepoFromOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"],\n    reviewPendingDeploymentsForRun: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"],\n    setAllowedActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/selected-actions\"],\n    setAllowedActionsRepository: [\"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"],\n    setGithubActionsPermissionsOrganization: [\"PUT /orgs/{org}/actions/permissions\"],\n    setGithubActionsPermissionsRepository: [\"PUT /repos/{owner}/{repo}/actions/permissions\"],\n    setSelectedReposForOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"],\n    setSelectedRepositoriesEnabledGithubActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/repositories\"]\n  },\n  activity: {\n    checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n    deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n    deleteThreadSubscription: [\"DELETE /notifications/threads/{thread_id}/subscription\"],\n    getFeeds: [\"GET /feeds\"],\n    getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n    getThread: [\"GET /notifications/threads/{thread_id}\"],\n    getThreadSubscriptionForAuthenticatedUser: [\"GET /notifications/threads/{thread_id}/subscription\"],\n    listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n    listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n    listOrgEventsForAuthenticatedUser: [\"GET /users/{username}/events/orgs/{org}\"],\n    listPublicEvents: [\"GET /events\"],\n    listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n    listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n    listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n    listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n    listReceivedPublicEventsForUser: [\"GET /users/{username}/received_events/public\"],\n    listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n    listRepoNotificationsForAuthenticatedUser: [\"GET /repos/{owner}/{repo}/notifications\"],\n    listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n    listReposStarredByUser: [\"GET /users/{username}/starred\"],\n    listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n    listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n    listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n    listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n    markNotificationsAsRead: [\"PUT /notifications\"],\n    markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n    markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n    setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n    setThreadSubscription: [\"PUT /notifications/threads/{thread_id}/subscription\"],\n    starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n    unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"]\n  },\n  apps: {\n    addRepoToInstallation: [\"PUT /user/installations/{installation_id}/repositories/{repository_id}\"],\n    checkToken: [\"POST /applications/{client_id}/token\"],\n    createContentAttachment: [\"POST /content_references/{content_reference_id}/attachments\", {\n      mediaType: {\n        previews: [\"corsair\"]\n      }\n    }],\n    createContentAttachmentForRepo: [\"POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments\", {\n      mediaType: {\n        previews: [\"corsair\"]\n      }\n    }],\n    createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n    createInstallationAccessToken: [\"POST /app/installations/{installation_id}/access_tokens\"],\n    deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n    deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n    deleteToken: [\"DELETE /applications/{client_id}/token\"],\n    getAuthenticated: [\"GET /app\"],\n    getBySlug: [\"GET /apps/{app_slug}\"],\n    getInstallation: [\"GET /app/installations/{installation_id}\"],\n    getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n    getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n    getSubscriptionPlanForAccount: [\"GET /marketplace_listing/accounts/{account_id}\"],\n    getSubscriptionPlanForAccountStubbed: [\"GET /marketplace_listing/stubbed/accounts/{account_id}\"],\n    getUserInstallation: [\"GET /users/{username}/installation\"],\n    getWebhookConfigForApp: [\"GET /app/hook/config\"],\n    getWebhookDelivery: [\"GET /app/hook/deliveries/{delivery_id}\"],\n    listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n    listAccountsForPlanStubbed: [\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"],\n    listInstallationReposForAuthenticatedUser: [\"GET /user/installations/{installation_id}/repositories\"],\n    listInstallations: [\"GET /app/installations\"],\n    listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n    listPlans: [\"GET /marketplace_listing/plans\"],\n    listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n    listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n    listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n    listSubscriptionsForAuthenticatedUserStubbed: [\"GET /user/marketplace_purchases/stubbed\"],\n    listWebhookDeliveries: [\"GET /app/hook/deliveries\"],\n    redeliverWebhookDelivery: [\"POST /app/hook/deliveries/{delivery_id}/attempts\"],\n    removeRepoFromInstallation: [\"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"],\n    resetToken: [\"PATCH /applications/{client_id}/token\"],\n    revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n    scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n    suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n    unsuspendInstallation: [\"DELETE /app/installations/{installation_id}/suspended\"],\n    updateWebhookConfigForApp: [\"PATCH /app/hook/config\"]\n  },\n  billing: {\n    getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n    getGithubActionsBillingUser: [\"GET /users/{username}/settings/billing/actions\"],\n    getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n    getGithubPackagesBillingUser: [\"GET /users/{username}/settings/billing/packages\"],\n    getSharedStorageBillingOrg: [\"GET /orgs/{org}/settings/billing/shared-storage\"],\n    getSharedStorageBillingUser: [\"GET /users/{username}/settings/billing/shared-storage\"]\n  },\n  checks: {\n    create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n    createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n    get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n    listAnnotations: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"],\n    listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n    listForSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"],\n    listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n    rerequestSuite: [\"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"],\n    setSuitesPreferences: [\"PATCH /repos/{owner}/{repo}/check-suites/preferences\"],\n    update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"]\n  },\n  codeScanning: {\n    deleteAnalysis: [\"DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}\"],\n    getAlert: [\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\", {}, {\n      renamedParameters: {\n        alert_id: \"alert_number\"\n      }\n    }],\n    getAnalysis: [\"GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}\"],\n    getSarif: [\"GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}\"],\n    listAlertInstances: [\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n    listAlertsInstances: [\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\", {}, {\n      renamed: [\"codeScanning\", \"listAlertInstances\"]\n    }],\n    listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n    updateAlert: [\"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"],\n    uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"]\n  },\n  codesOfConduct: {\n    getAllCodesOfConduct: [\"GET /codes_of_conduct\"],\n    getConductCode: [\"GET /codes_of_conduct/{key}\"],\n    getForRepo: [\"GET /repos/{owner}/{repo}/community/code_of_conduct\", {\n      mediaType: {\n        previews: [\"scarlet-witch\"]\n      }\n    }]\n  },\n  emojis: {\n    get: [\"GET /emojis\"]\n  },\n  enterpriseAdmin: {\n    disableSelectedOrganizationGithubActionsEnterprise: [\"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"],\n    enableSelectedOrganizationGithubActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"],\n    getAllowedActionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions/selected-actions\"],\n    getGithubActionsPermissionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions\"],\n    listSelectedOrganizationsEnabledGithubActionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions/organizations\"],\n    setAllowedActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\"],\n    setGithubActionsPermissionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions\"],\n    setSelectedOrganizationsEnabledGithubActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/organizations\"]\n  },\n  gists: {\n    checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n    create: [\"POST /gists\"],\n    createComment: [\"POST /gists/{gist_id}/comments\"],\n    delete: [\"DELETE /gists/{gist_id}\"],\n    deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n    fork: [\"POST /gists/{gist_id}/forks\"],\n    get: [\"GET /gists/{gist_id}\"],\n    getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n    getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n    list: [\"GET /gists\"],\n    listComments: [\"GET /gists/{gist_id}/comments\"],\n    listCommits: [\"GET /gists/{gist_id}/commits\"],\n    listForUser: [\"GET /users/{username}/gists\"],\n    listForks: [\"GET /gists/{gist_id}/forks\"],\n    listPublic: [\"GET /gists/public\"],\n    listStarred: [\"GET /gists/starred\"],\n    star: [\"PUT /gists/{gist_id}/star\"],\n    unstar: [\"DELETE /gists/{gist_id}/star\"],\n    update: [\"PATCH /gists/{gist_id}\"],\n    updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"]\n  },\n  git: {\n    createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n    createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n    createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n    createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n    createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n    deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n    getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n    getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n    getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n    getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n    listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n    updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"]\n  },\n  gitignore: {\n    getAllTemplates: [\"GET /gitignore/templates\"],\n    getTemplate: [\"GET /gitignore/templates/{name}\"]\n  },\n  interactions: {\n    getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n    getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n    getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n    getRestrictionsForYourPublicRepos: [\"GET /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"]\n    }],\n    removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n    removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n    removeRestrictionsForRepo: [\"DELETE /repos/{owner}/{repo}/interaction-limits\"],\n    removeRestrictionsForYourPublicRepos: [\"DELETE /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"]\n    }],\n    setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n    setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n    setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n    setRestrictionsForYourPublicRepos: [\"PUT /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"]\n    }]\n  },\n  issues: {\n    addAssignees: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"],\n    addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n    create: [\"POST /repos/{owner}/{repo}/issues\"],\n    createComment: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n    createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n    deleteComment: [\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n    deleteMilestone: [\"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n    getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n    getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n    getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    list: [\"GET /issues\"],\n    listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n    listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n    listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n    listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n    listEventsForTimeline: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\", {\n      mediaType: {\n        previews: [\"mockingbird\"]\n      }\n    }],\n    listForAuthenticatedUser: [\"GET /user/issues\"],\n    listForOrg: [\"GET /orgs/{org}/issues\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n    listLabelsForMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"],\n    listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n    listLabelsOnIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n    lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    removeAllLabels: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    removeAssignees: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"],\n    removeLabel: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"],\n    setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n    updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n    updateMilestone: [\"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"]\n  },\n  licenses: {\n    get: [\"GET /licenses/{license}\"],\n    getAllCommonlyUsed: [\"GET /licenses\"],\n    getForRepo: [\"GET /repos/{owner}/{repo}/license\"]\n  },\n  markdown: {\n    render: [\"POST /markdown\"],\n    renderRaw: [\"POST /markdown/raw\", {\n      headers: {\n        \"content-type\": \"text/plain; charset=utf-8\"\n      }\n    }]\n  },\n  meta: {\n    get: [\"GET /meta\"],\n    getOctocat: [\"GET /octocat\"],\n    getZen: [\"GET /zen\"],\n    root: [\"GET /\"]\n  },\n  migrations: {\n    cancelImport: [\"DELETE /repos/{owner}/{repo}/import\"],\n    deleteArchiveForAuthenticatedUser: [\"DELETE /user/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    deleteArchiveForOrg: [\"DELETE /orgs/{org}/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    downloadArchiveForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getArchiveForAuthenticatedUser: [\"GET /user/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getCommitAuthors: [\"GET /repos/{owner}/{repo}/import/authors\"],\n    getImportStatus: [\"GET /repos/{owner}/{repo}/import\"],\n    getLargeFiles: [\"GET /repos/{owner}/{repo}/import/large_files\"],\n    getStatusForAuthenticatedUser: [\"GET /user/migrations/{migration_id}\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getStatusForOrg: [\"GET /orgs/{org}/migrations/{migration_id}\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listForAuthenticatedUser: [\"GET /user/migrations\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listForOrg: [\"GET /orgs/{org}/migrations\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listReposForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/repositories\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listReposForUser: [\"GET /user/migrations/{migration_id}/repositories\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    mapCommitAuthor: [\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"],\n    setLfsPreference: [\"PATCH /repos/{owner}/{repo}/import/lfs\"],\n    startForAuthenticatedUser: [\"POST /user/migrations\"],\n    startForOrg: [\"POST /orgs/{org}/migrations\"],\n    startImport: [\"PUT /repos/{owner}/{repo}/import\"],\n    unlockRepoForAuthenticatedUser: [\"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    unlockRepoForOrg: [\"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    updateImport: [\"PATCH /repos/{owner}/{repo}/import\"]\n  },\n  orgs: {\n    blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n    cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n    checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n    checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n    checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n    convertMemberToOutsideCollaborator: [\"PUT /orgs/{org}/outside_collaborators/{username}\"],\n    createInvitation: [\"POST /orgs/{org}/invitations\"],\n    createWebhook: [\"POST /orgs/{org}/hooks\"],\n    deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n    get: [\"GET /orgs/{org}\"],\n    getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n    getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n    getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n    getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n    getWebhookDelivery: [\"GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}\"],\n    list: [\"GET /organizations\"],\n    listAppInstallations: [\"GET /orgs/{org}/installations\"],\n    listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n    listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n    listForAuthenticatedUser: [\"GET /user/orgs\"],\n    listForUser: [\"GET /users/{username}/orgs\"],\n    listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n    listMembers: [\"GET /orgs/{org}/members\"],\n    listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n    listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n    listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n    listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n    listWebhookDeliveries: [\"GET /orgs/{org}/hooks/{hook_id}/deliveries\"],\n    listWebhooks: [\"GET /orgs/{org}/hooks\"],\n    pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\"POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"],\n    removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n    removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n    removeOutsideCollaborator: [\"DELETE /orgs/{org}/outside_collaborators/{username}\"],\n    removePublicMembershipForAuthenticatedUser: [\"DELETE /orgs/{org}/public_members/{username}\"],\n    setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n    setPublicMembershipForAuthenticatedUser: [\"PUT /orgs/{org}/public_members/{username}\"],\n    unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n    update: [\"PATCH /orgs/{org}\"],\n    updateMembershipForAuthenticatedUser: [\"PATCH /user/memberships/orgs/{org}\"],\n    updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n    updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"]\n  },\n  packages: {\n    deletePackageForAuthenticatedUser: [\"DELETE /user/packages/{package_type}/{package_name}\"],\n    deletePackageForOrg: [\"DELETE /orgs/{org}/packages/{package_type}/{package_name}\"],\n    deletePackageForUser: [\"DELETE /users/{username}/packages/{package_type}/{package_name}\"],\n    deletePackageVersionForAuthenticatedUser: [\"DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    deletePackageVersionForOrg: [\"DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    deletePackageVersionForUser: [\"DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    getAllPackageVersionsForAPackageOwnedByAnOrg: [\"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\", {}, {\n      renamed: [\"packages\", \"getAllPackageVersionsForPackageOwnedByOrg\"]\n    }],\n    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [\"GET /user/packages/{package_type}/{package_name}/versions\", {}, {\n      renamed: [\"packages\", \"getAllPackageVersionsForPackageOwnedByAuthenticatedUser\"]\n    }],\n    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [\"GET /user/packages/{package_type}/{package_name}/versions\"],\n    getAllPackageVersionsForPackageOwnedByOrg: [\"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\"],\n    getAllPackageVersionsForPackageOwnedByUser: [\"GET /users/{username}/packages/{package_type}/{package_name}/versions\"],\n    getPackageForAuthenticatedUser: [\"GET /user/packages/{package_type}/{package_name}\"],\n    getPackageForOrganization: [\"GET /orgs/{org}/packages/{package_type}/{package_name}\"],\n    getPackageForUser: [\"GET /users/{username}/packages/{package_type}/{package_name}\"],\n    getPackageVersionForAuthenticatedUser: [\"GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    getPackageVersionForOrganization: [\"GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    getPackageVersionForUser: [\"GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"],\n    listPackagesForAuthenticatedUser: [\"GET /user/packages\"],\n    listPackagesForOrganization: [\"GET /orgs/{org}/packages\"],\n    listPackagesForUser: [\"GET /user/{username}/packages\"],\n    restorePackageForAuthenticatedUser: [\"POST /user/packages/{package_type}/{package_name}/restore{?token}\"],\n    restorePackageForOrg: [\"POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}\"],\n    restorePackageForUser: [\"POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}\"],\n    restorePackageVersionForAuthenticatedUser: [\"POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"],\n    restorePackageVersionForOrg: [\"POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"],\n    restorePackageVersionForUser: [\"POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"]\n  },\n  projects: {\n    addCollaborator: [\"PUT /projects/{project_id}/collaborators/{username}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createCard: [\"POST /projects/columns/{column_id}/cards\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createColumn: [\"POST /projects/{project_id}/columns\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForAuthenticatedUser: [\"POST /user/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForOrg: [\"POST /orgs/{org}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForRepo: [\"POST /repos/{owner}/{repo}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    delete: [\"DELETE /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    deleteCard: [\"DELETE /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    deleteColumn: [\"DELETE /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    get: [\"GET /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getCard: [\"GET /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getColumn: [\"GET /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getPermissionForUser: [\"GET /projects/{project_id}/collaborators/{username}/permission\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listCards: [\"GET /projects/columns/{column_id}/cards\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listCollaborators: [\"GET /projects/{project_id}/collaborators\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listColumns: [\"GET /projects/{project_id}/columns\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForOrg: [\"GET /orgs/{org}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForRepo: [\"GET /repos/{owner}/{repo}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForUser: [\"GET /users/{username}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    moveCard: [\"POST /projects/columns/cards/{card_id}/moves\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    moveColumn: [\"POST /projects/columns/{column_id}/moves\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    removeCollaborator: [\"DELETE /projects/{project_id}/collaborators/{username}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    update: [\"PATCH /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    updateCard: [\"PATCH /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    updateColumn: [\"PATCH /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }]\n  },\n  pulls: {\n    checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    create: [\"POST /repos/{owner}/{repo}/pulls\"],\n    createReplyForReviewComment: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"],\n    createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    createReviewComment: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"],\n    deletePendingReview: [\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    deleteReviewComment: [\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    dismissReview: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"],\n    get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    getReview: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    list: [\"GET /repos/{owner}/{repo}/pulls\"],\n    listCommentsForReview: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"],\n    listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n    listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n    listRequestedReviewers: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    listReviewComments: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"],\n    listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n    listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    removeRequestedReviewers: [\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    requestReviewers: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    submitReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"],\n    update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    updateBranch: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\", {\n      mediaType: {\n        previews: [\"lydian\"]\n      }\n    }],\n    updateReview: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    updateReviewComment: [\"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"]\n  },\n  rateLimit: {\n    get: [\"GET /rate_limit\"]\n  },\n  reactions: {\n    createForCommitComment: [\"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForIssue: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForIssueComment: [\"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForPullRequestReviewComment: [\"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForRelease: [\"POST /repos/{owner}/{repo}/releases/{release_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForTeamDiscussionCommentInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForTeamDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForIssue: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForIssueComment: [\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForPullRequestComment: [\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForTeamDiscussion: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForTeamDiscussionComment: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteLegacy: [\"DELETE /reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }, {\n      deprecated: \"octokit.rest.reactions.deleteLegacy() is deprecated, see https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy\"\n    }],\n    listForCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForIssueComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForPullRequestReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForTeamDiscussionCommentInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForTeamDiscussionInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }]\n  },\n  repos: {\n    acceptInvitation: [\"PATCH /user/repository_invitations/{invitation_id}\"],\n    addAppAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n    addStatusCheckContexts: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    addTeamAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    addUserAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n    checkVulnerabilityAlerts: [\"GET /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n    compareCommitsWithBasehead: [\"GET /repos/{owner}/{repo}/compare/{basehead}\"],\n    createAutolink: [\"POST /repos/{owner}/{repo}/autolinks\"],\n    createCommitComment: [\"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"],\n    createCommitSignatureProtection: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n    createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n    createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n    createDeploymentStatus: [\"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"],\n    createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n    createForAuthenticatedUser: [\"POST /user/repos\"],\n    createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n    createInOrg: [\"POST /orgs/{org}/repos\"],\n    createOrUpdateEnvironment: [\"PUT /repos/{owner}/{repo}/environments/{environment_name}\"],\n    createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n    createPagesSite: [\"POST /repos/{owner}/{repo}/pages\", {\n      mediaType: {\n        previews: [\"switcheroo\"]\n      }\n    }],\n    createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n    createUsingTemplate: [\"POST /repos/{template_owner}/{template_repo}/generate\", {\n      mediaType: {\n        previews: [\"baptiste\"]\n      }\n    }],\n    createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n    declineInvitation: [\"DELETE /user/repository_invitations/{invitation_id}\"],\n    delete: [\"DELETE /repos/{owner}/{repo}\"],\n    deleteAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"],\n    deleteAdminBranchProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    deleteAnEnvironment: [\"DELETE /repos/{owner}/{repo}/environments/{environment_name}\"],\n    deleteAutolink: [\"DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    deleteBranchProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n    deleteCommitSignatureProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n    deleteDeployment: [\"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n    deleteInvitation: [\"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"],\n    deletePagesSite: [\"DELETE /repos/{owner}/{repo}/pages\", {\n      mediaType: {\n        previews: [\"switcheroo\"]\n      }\n    }],\n    deletePullRequestReviewProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n    deleteReleaseAsset: [\"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    disableAutomatedSecurityFixes: [\"DELETE /repos/{owner}/{repo}/automated-security-fixes\", {\n      mediaType: {\n        previews: [\"london\"]\n      }\n    }],\n    disableVulnerabilityAlerts: [\"DELETE /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    downloadArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\", {}, {\n      renamed: [\"repos\", \"downloadZipballArchive\"]\n    }],\n    downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n    downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n    enableAutomatedSecurityFixes: [\"PUT /repos/{owner}/{repo}/automated-security-fixes\", {\n      mediaType: {\n        previews: [\"london\"]\n      }\n    }],\n    enableVulnerabilityAlerts: [\"PUT /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    get: [\"GET /repos/{owner}/{repo}\"],\n    getAccessRestrictions: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"],\n    getAdminBranchProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    getAllEnvironments: [\"GET /repos/{owner}/{repo}/environments\"],\n    getAllStatusCheckContexts: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"],\n    getAllTopics: [\"GET /repos/{owner}/{repo}/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    getAppsWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"],\n    getAutolink: [\"GET /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n    getBranchProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n    getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n    getCollaboratorPermissionLevel: [\"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"],\n    getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n    getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n    getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n    getCommitSignatureProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n    getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n    getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n    getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n    getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    getDeploymentStatus: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"],\n    getEnvironment: [\"GET /repos/{owner}/{repo}/environments/{environment_name}\"],\n    getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n    getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n    getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n    getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n    getPagesHealthCheck: [\"GET /repos/{owner}/{repo}/pages/health\"],\n    getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n    getPullRequestReviewProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n    getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n    getReadmeInDirectory: [\"GET /repos/{owner}/{repo}/readme/{dir}\"],\n    getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n    getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n    getStatusChecksProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    getTeamsWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"],\n    getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n    getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n    getUsersWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"],\n    getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n    getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    getWebhookConfigForRepo: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"],\n    getWebhookDelivery: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}\"],\n    listAutolinks: [\"GET /repos/{owner}/{repo}/autolinks\"],\n    listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n    listBranchesForHeadCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\", {\n      mediaType: {\n        previews: [\"groot\"]\n      }\n    }],\n    listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n    listCommentsForCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"],\n    listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n    listCommitStatusesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"],\n    listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n    listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n    listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n    listDeploymentStatuses: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"],\n    listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n    listForAuthenticatedUser: [\"GET /user/repos\"],\n    listForOrg: [\"GET /orgs/{org}/repos\"],\n    listForUser: [\"GET /users/{username}/repos\"],\n    listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n    listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n    listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n    listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n    listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n    listPublic: [\"GET /repositories\"],\n    listPullRequestsAssociatedWithCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\", {\n      mediaType: {\n        previews: [\"groot\"]\n      }\n    }],\n    listReleaseAssets: [\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"],\n    listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n    listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n    listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n    listWebhookDeliveries: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\"],\n    listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n    merge: [\"POST /repos/{owner}/{repo}/merges\"],\n    mergeUpstream: [\"POST /repos/{owner}/{repo}/merge-upstream\"],\n    pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"],\n    removeAppAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    removeCollaborator: [\"DELETE /repos/{owner}/{repo}/collaborators/{username}\"],\n    removeStatusCheckContexts: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    removeStatusCheckProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    removeTeamAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    removeUserAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n    replaceAllTopics: [\"PUT /repos/{owner}/{repo}/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n    setAdminBranchProtection: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    setAppAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    setStatusCheckContexts: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    setTeamAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    setUserAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n    transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n    update: [\"PATCH /repos/{owner}/{repo}\"],\n    updateBranchProtection: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n    updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n    updateInvitation: [\"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"],\n    updatePullRequestReviewProtection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n    updateReleaseAsset: [\"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    updateStatusCheckPotection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\", {}, {\n      renamed: [\"repos\", \"updateStatusCheckProtection\"]\n    }],\n    updateStatusCheckProtection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    updateWebhookConfigForRepo: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"],\n    uploadReleaseAsset: [\"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\", {\n      baseUrl: \"https://uploads.github.com\"\n    }]\n  },\n  search: {\n    code: [\"GET /search/code\"],\n    commits: [\"GET /search/commits\", {\n      mediaType: {\n        previews: [\"cloak\"]\n      }\n    }],\n    issuesAndPullRequests: [\"GET /search/issues\"],\n    labels: [\"GET /search/labels\"],\n    repos: [\"GET /search/repositories\"],\n    topics: [\"GET /search/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    users: [\"GET /search/users\"]\n  },\n  secretScanning: {\n    getAlert: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"],\n    listAlertsForOrg: [\"GET /orgs/{org}/secret-scanning/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n    updateAlert: [\"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"]\n  },\n  teams: {\n    addOrUpdateMembershipForUserInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    addOrUpdateProjectPermissionsInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    addOrUpdateRepoPermissionsInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    checkPermissionsForProjectInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    checkPermissionsForRepoInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    create: [\"POST /orgs/{org}/teams\"],\n    createDiscussionCommentInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"],\n    createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n    deleteDiscussionCommentInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    deleteDiscussionInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n    getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n    getDiscussionCommentInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    getDiscussionInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    getMembershipForUserInOrg: [\"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    list: [\"GET /orgs/{org}/teams\"],\n    listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n    listDiscussionCommentsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"],\n    listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n    listForAuthenticatedUser: [\"GET /user/teams\"],\n    listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n    listPendingInvitationsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/invitations\"],\n    listProjectsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n    removeMembershipForUserInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    removeProjectInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"],\n    removeRepoInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    updateDiscussionCommentInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    updateDiscussionInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"]\n  },\n  users: {\n    addEmailForAuthenticated: [\"POST /user/emails\"],\n    block: [\"PUT /user/blocks/{username}\"],\n    checkBlocked: [\"GET /user/blocks/{username}\"],\n    checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n    checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n    createGpgKeyForAuthenticated: [\"POST /user/gpg_keys\"],\n    createPublicSshKeyForAuthenticated: [\"POST /user/keys\"],\n    deleteEmailForAuthenticated: [\"DELETE /user/emails\"],\n    deleteGpgKeyForAuthenticated: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n    deletePublicSshKeyForAuthenticated: [\"DELETE /user/keys/{key_id}\"],\n    follow: [\"PUT /user/following/{username}\"],\n    getAuthenticated: [\"GET /user\"],\n    getByUsername: [\"GET /users/{username}\"],\n    getContextForUser: [\"GET /users/{username}/hovercard\"],\n    getGpgKeyForAuthenticated: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n    getPublicSshKeyForAuthenticated: [\"GET /user/keys/{key_id}\"],\n    list: [\"GET /users\"],\n    listBlockedByAuthenticated: [\"GET /user/blocks\"],\n    listEmailsForAuthenticated: [\"GET /user/emails\"],\n    listFollowedByAuthenticated: [\"GET /user/following\"],\n    listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n    listFollowersForUser: [\"GET /users/{username}/followers\"],\n    listFollowingForUser: [\"GET /users/{username}/following\"],\n    listGpgKeysForAuthenticated: [\"GET /user/gpg_keys\"],\n    listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n    listPublicEmailsForAuthenticated: [\"GET /user/public_emails\"],\n    listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n    listPublicSshKeysForAuthenticated: [\"GET /user/keys\"],\n    setPrimaryEmailVisibilityForAuthenticated: [\"PATCH /user/email/visibility\"],\n    unblock: [\"DELETE /user/blocks/{username}\"],\n    unfollow: [\"DELETE /user/following/{username}\"],\n    updateAuthenticated: [\"PATCH /user\"]\n  }\n};\n\nconst VERSION = \"5.10.0\";\n\nfunction endpointsToMethods(octokit, endpointsMap) {\n  const newMethods = {};\n\n  for (const [scope, endpoints] of Object.entries(endpointsMap)) {\n    for (const [methodName, endpoint] of Object.entries(endpoints)) {\n      const [route, defaults, decorations] = endpoint;\n      const [method, url] = route.split(/ /);\n      const endpointDefaults = Object.assign({\n        method,\n        url\n      }, defaults);\n\n      if (!newMethods[scope]) {\n        newMethods[scope] = {};\n      }\n\n      const scopeMethods = newMethods[scope];\n\n      if (decorations) {\n        scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);\n        continue;\n      }\n\n      scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);\n    }\n  }\n\n  return newMethods;\n}\n\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n  const requestWithDefaults = octokit.request.defaults(defaults);\n  /* istanbul ignore next */\n\n  function withDecorations(...args) {\n    // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n    let options = requestWithDefaults.endpoint.merge(...args); // There are currently no other decorations than `.mapToData`\n\n    if (decorations.mapToData) {\n      options = Object.assign({}, options, {\n        data: options[decorations.mapToData],\n        [decorations.mapToData]: undefined\n      });\n      return requestWithDefaults(options);\n    }\n\n    if (decorations.renamed) {\n      const [newScope, newMethodName] = decorations.renamed;\n      octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);\n    }\n\n    if (decorations.deprecated) {\n      octokit.log.warn(decorations.deprecated);\n    }\n\n    if (decorations.renamedParameters) {\n      // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n      const options = requestWithDefaults.endpoint.merge(...args);\n\n      for (const [name, alias] of Object.entries(decorations.renamedParameters)) {\n        if (name in options) {\n          octokit.log.warn(`\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`);\n\n          if (!(alias in options)) {\n            options[alias] = options[name];\n          }\n\n          delete options[name];\n        }\n      }\n\n      return requestWithDefaults(options);\n    } // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n\n\n    return requestWithDefaults(...args);\n  }\n\n  return Object.assign(withDecorations, requestWithDefaults);\n}\n\nfunction restEndpointMethods(octokit) {\n  const api = endpointsToMethods(octokit, Endpoints);\n  return {\n    rest: api\n  };\n}\nrestEndpointMethods.VERSION = VERSION;\nfunction legacyRestEndpointMethods(octokit) {\n  const api = endpointsToMethods(octokit, Endpoints);\n  return _objectSpread2(_objectSpread2({}, api), {}, {\n    rest: api\n  });\n}\nlegacyRestEndpointMethods.VERSION = VERSION;\n\nexports.legacyRestEndpointMethods = legacyRestEndpointMethods;\nexports.restEndpointMethods = restEndpointMethods;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar deprecation = require('deprecation');\nvar once = _interopDefault(require('once'));\n\nconst logOnceCode = once(deprecation => console.warn(deprecation));\nconst logOnceHeaders = once(deprecation => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\n\nclass RequestError extends Error {\n  constructor(message, statusCode, options) {\n    super(message); // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = \"HttpError\";\n    this.status = statusCode;\n    let headers;\n\n    if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n      headers = options.headers;\n    }\n\n    if (\"response\" in options) {\n      this.response = options.response;\n      headers = options.response.headers;\n    } // redact request credentials without mutating original request options\n\n\n    const requestCopy = Object.assign({}, options.request);\n\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\")\n      });\n    }\n\n    requestCopy.url = requestCopy.url // client_id & client_secret can be passed as URL query parameters to increase rate limit\n    // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n    .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\") // OAuth tokens can be passed as URL query parameters, although it is not recommended\n    // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n    .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy; // deprecations\n\n    Object.defineProperty(this, \"code\", {\n      get() {\n        logOnceCode(new deprecation.Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n        return statusCode;\n      }\n\n    });\n    Object.defineProperty(this, \"headers\", {\n      get() {\n        logOnceHeaders(new deprecation.Deprecation(\"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"));\n        return headers || {};\n      }\n\n    });\n  }\n\n}\n\nexports.RequestError = RequestError;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar endpoint = require('@octokit/endpoint');\nvar universalUserAgent = require('universal-user-agent');\nvar isPlainObject = require('is-plain-object');\nvar nodeFetch = _interopDefault(require('node-fetch'));\nvar requestError = require('@octokit/request-error');\n\nconst VERSION = \"5.6.1\";\n\nfunction getBufferResponse(response) {\n  return response.arrayBuffer();\n}\n\nfunction fetchWrapper(requestOptions) {\n  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;\n\n  if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n\n  let headers = {};\n  let status;\n  let url;\n  const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;\n  return fetch(requestOptions.url, Object.assign({\n    method: requestOptions.method,\n    body: requestOptions.body,\n    headers: requestOptions.headers,\n    redirect: requestOptions.redirect\n  }, // `requestOptions.request.agent` type is incompatible\n  // see https://github.com/octokit/types.ts/pull/264\n  requestOptions.request)).then(async response => {\n    url = response.url;\n    status = response.status;\n\n    for (const keyAndValue of response.headers) {\n      headers[keyAndValue[0]] = keyAndValue[1];\n    }\n\n    if (\"deprecation\" in headers) {\n      const matches = headers.link && headers.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n      const deprecationLink = matches && matches.pop();\n      log.warn(`[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`);\n    }\n\n    if (status === 204 || status === 205) {\n      return;\n    } // GitHub API returns 200 for HEAD requests\n\n\n    if (requestOptions.method === \"HEAD\") {\n      if (status < 400) {\n        return;\n      }\n\n      throw new requestError.RequestError(response.statusText, status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: undefined\n        },\n        request: requestOptions\n      });\n    }\n\n    if (status === 304) {\n      throw new requestError.RequestError(\"Not modified\", status, {\n        response: {\n          url,\n          status,\n          headers,\n          data: await getResponseData(response)\n        },\n        request: requestOptions\n      });\n    }\n\n    if (status >= 400) {\n      const data = await getResponseData(response);\n      const error = new requestError.RequestError(toErrorMessage(data), status, {\n        response: {\n          url,\n          status,\n          headers,\n          data\n        },\n        request: requestOptions\n      });\n      throw error;\n    }\n\n    return getResponseData(response);\n  }).then(data => {\n    return {\n      status,\n      url,\n      headers,\n      data\n    };\n  }).catch(error => {\n    if (error instanceof requestError.RequestError) throw error;\n    throw new requestError.RequestError(error.message, 500, {\n      request: requestOptions\n    });\n  });\n}\n\nasync function getResponseData(response) {\n  const contentType = response.headers.get(\"content-type\");\n\n  if (/application\\/json/.test(contentType)) {\n    return response.json();\n  }\n\n  if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n    return response.text();\n  }\n\n  return getBufferResponse(response);\n}\n\nfunction toErrorMessage(data) {\n  if (typeof data === \"string\") return data; // istanbul ignore else - just in case\n\n  if (\"message\" in data) {\n    if (Array.isArray(data.errors)) {\n      return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}`;\n    }\n\n    return data.message;\n  } // istanbul ignore next - just in case\n\n\n  return `Unknown error: ${JSON.stringify(data)}`;\n}\n\nfunction withDefaults(oldEndpoint, newDefaults) {\n  const endpoint = oldEndpoint.defaults(newDefaults);\n\n  const newApi = function (route, parameters) {\n    const endpointOptions = endpoint.merge(route, parameters);\n\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint.parse(endpointOptions));\n    }\n\n    const request = (route, parameters) => {\n      return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n    };\n\n    Object.assign(request, {\n      endpoint,\n      defaults: withDefaults.bind(null, endpoint)\n    });\n    return endpointOptions.request.hook(request, endpointOptions);\n  };\n\n  return Object.assign(newApi, {\n    endpoint,\n    defaults: withDefaults.bind(null, endpoint)\n  });\n}\n\nconst request = withDefaults(endpoint.endpoint, {\n  headers: {\n    \"user-agent\": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`\n  }\n});\n\nexports.request = request;\n//# sourceMappingURL=index.js.map\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst BuildInterfaces = require(\"./interfaces/BuildInterfaces\");\r\nclass BuildApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Build-api', options);\r\n    }\r\n    /**\r\n     * Associates an artifact with a build.\r\n     *\r\n     * @param {BuildInterfaces.BuildArtifact} artifact - The artifact.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    createArtifact(artifact, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, artifact, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific artifact for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     */\r\n    getArtifact(project, buildId, artifactName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific artifact for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     */\r\n    getArtifactContentZip(project, buildId, artifactName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all artifacts for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getArtifacts(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a file from the build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     * @param {string} fileId - The primary key for the file.\r\n     * @param {string} fileName - The name that the file will be set to.\r\n     */\r\n    getFile(project, buildId, artifactName, fileId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            if (fileId == null) {\r\n                throw new TypeError('fileId can not be null or undefined');\r\n            }\r\n            if (fileName == null) {\r\n                throw new TypeError('fileName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                    fileId: fileId,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the list of attachments of a specific type that are associated with a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type - The type of attachment.\r\n     */\r\n    getAttachments(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"f2192269-89fa-4f94-baf6-8fb128c55159\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} timelineId - The ID of the timeline.\r\n     * @param {string} recordId - The ID of the timeline record.\r\n     * @param {string} type - The type of the attachment.\r\n     * @param {string} name - The name of the attachment.\r\n     */\r\n    getAttachment(project, buildId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"af5122d3-3438-485e-a25a-2dbbfde84ee6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {BuildInterfaces.DefinitionResourceReference[]} resources\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    authorizeProjectResources(resources, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"398c85bc-81aa-4822-947c-a194a05f0fef\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, resources, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type\r\n     * @param {string} id\r\n     */\r\n    getProjectResources(project, type, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    id: id,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"398c85bc-81aa-4822-947c-a194a05f0fef\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for a definition. Note that this API is deprecated. Prefer StatusBadgeController.GetStatusBadge.\r\n     *\r\n     * @param {string} project - The project ID or name.\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} branchName - The name of the branch.\r\n     */\r\n    getBadge(project, definitionId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"de6a4df8-22cd-44ee-af2d-39f6aa7a4261\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of branches for the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} branchName - If supplied, the name of the branch to check for specifically.\r\n     */\r\n    listBranches(project, providerName, serviceEndpointId, repository, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"e05d4403-9b81-4244-8763-20fde28d1976\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repoType - The repository type.\r\n     * @param {string} repoId - The repository ID.\r\n     * @param {string} branchName - The branch name.\r\n     */\r\n    getBuildBadge(project, repoType, repoId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repoType: repoType\r\n                };\r\n                let queryValues = {\r\n                    repoId: repoId,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"21b3b9ce-fad5-4567-9ad0-80679794e003\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repoType - The repository type.\r\n     * @param {string} repoId - The repository ID.\r\n     * @param {string} branchName - The branch name.\r\n     */\r\n    getBuildBadgeData(project, repoType, repoId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repoType: repoType\r\n                };\r\n                let queryValues = {\r\n                    repoId: repoId,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"21b3b9ce-fad5-4567-9ad0-80679794e003\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    deleteBuild(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} propertyFilters\r\n     */\r\n    getBuild(project, buildId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    propertyFilters: propertyFilters,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} definitions - A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.\r\n     * @param {number[]} queues - A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.\r\n     * @param {string} buildNumber - If specified, filters to builds that match this build number. Append * to do a prefix search.\r\n     * @param {Date} minTime - If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.\r\n     * @param {Date} maxTime - If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.\r\n     * @param {string} requestedFor - If specified, filters to builds requested for the specified user.\r\n     * @param {BuildInterfaces.BuildReason} reasonFilter - If specified, filters to builds that match this reason.\r\n     * @param {BuildInterfaces.BuildStatus} statusFilter - If specified, filters to builds that match this status.\r\n     * @param {BuildInterfaces.BuildResult} resultFilter - If specified, filters to builds that match this result.\r\n     * @param {string[]} tagFilters - A comma-delimited list of tags. If specified, filters to builds that have the specified tags.\r\n     * @param {string[]} properties - A comma-delimited list of properties to retrieve.\r\n     * @param {number} top - The maximum number of builds to return.\r\n     * @param {string} continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.\r\n     * @param {number} maxBuildsPerDefinition - The maximum number of builds to return per definition.\r\n     * @param {BuildInterfaces.QueryDeletedOption} deletedFilter - Indicates whether to exclude, include, or only return deleted builds.\r\n     * @param {BuildInterfaces.BuildQueryOrder} queryOrder - The order in which builds should be returned.\r\n     * @param {string} branchName - If specified, filters to builds that built branches that built this branch.\r\n     * @param {number[]} buildIds - A comma-delimited list that specifies the IDs of builds to retrieve.\r\n     * @param {string} repositoryId - If specified, filters to builds that built from this repository.\r\n     * @param {string} repositoryType - If specified, filters to builds that built from repositories of this type.\r\n     */\r\n    getBuilds(project, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitions: definitions && definitions.join(\",\"),\r\n                    queues: queues && queues.join(\",\"),\r\n                    buildNumber: buildNumber,\r\n                    minTime: minTime,\r\n                    maxTime: maxTime,\r\n                    requestedFor: requestedFor,\r\n                    reasonFilter: reasonFilter,\r\n                    statusFilter: statusFilter,\r\n                    resultFilter: resultFilter,\r\n                    tagFilters: tagFilters && tagFilters.join(\",\"),\r\n                    properties: properties && properties.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    maxBuildsPerDefinition: maxBuildsPerDefinition,\r\n                    deletedFilter: deletedFilter,\r\n                    queryOrder: queryOrder,\r\n                    branchName: branchName,\r\n                    buildIds: buildIds && buildIds.join(\",\"),\r\n                    repositoryId: repositoryId,\r\n                    repositoryType: repositoryType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a build\r\n     *\r\n     * @param {BuildInterfaces.Build} build\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} ignoreWarnings\r\n     * @param {string} checkInTicket\r\n     * @param {number} sourceBuildId\r\n     * @param {number} definitionId - Optional definition id to queue a build without a body. Ignored if there's a valid body\r\n     */\r\n    queueBuild(build, project, ignoreWarnings, checkInTicket, sourceBuildId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ignoreWarnings: ignoreWarnings,\r\n                    checkInTicket: checkInTicket,\r\n                    sourceBuildId: sourceBuildId,\r\n                    definitionId: definitionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, build, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a build.\r\n     *\r\n     * @param {BuildInterfaces.Build} build - The build.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {boolean} retry\r\n     */\r\n    updateBuild(build, project, buildId, retry) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    retry: retry,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, build, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates multiple builds.\r\n     *\r\n     * @param {BuildInterfaces.Build[]} builds - The builds to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuilds(builds, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, builds, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the changes associated with a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} continuationToken\r\n     * @param {number} top - The maximum number of changes to return\r\n     * @param {boolean} includeSourceChange\r\n     */\r\n    getBuildChanges(project, buildId, continuationToken, top, includeSourceChange) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    includeSourceChange: includeSourceChange,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"54572c7b-bbd3-45d4-80dc-28be08941620\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the changes made to the repository between two given builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} fromBuildId - The ID of the first build.\r\n     * @param {number} toBuildId - The ID of the last build.\r\n     * @param {number} top - The maximum number of changes to return.\r\n     */\r\n    getChangesBetweenBuilds(project, fromBuildId, toBuildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromBuildId: fromBuildId,\r\n                    toBuildId: toBuildId,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"f10f0ea5-18a1-43ec-a8fb-2042c7be9b43\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a controller\r\n     *\r\n     * @param {number} controllerId\r\n     */\r\n    getBuildController(controllerId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    controllerId: controllerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"fcac1932-2ee1-437f-9b6f-7f696be858f6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets controller, optionally filtered by name\r\n     *\r\n     * @param {string} name\r\n     */\r\n    getBuildControllers(name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    name: name,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"fcac1932-2ee1-437f-9b6f-7f696be858f6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new definition.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinition} definition - The definition.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionToCloneId\r\n     * @param {number} definitionToCloneRevision\r\n     */\r\n    createDefinition(definition, project, definitionToCloneId, definitionToCloneRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionToCloneId: definitionToCloneId,\r\n                    definitionToCloneRevision: definitionToCloneRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition and all associated builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    deleteDefinition(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a definition, optionally at a specific revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The revision number to retrieve. If this is not specified, the latest version will be returned.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of properties to include in the results.\r\n     * @param {boolean} includeLatestBuilds\r\n     */\r\n    getDefinition(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                    minMetricsTime: minMetricsTime,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name - If specified, filters to definitions whose names match this pattern.\r\n     * @param {string} repositoryId - A repository ID. If specified, filters to definitions that use this repository.\r\n     * @param {string} repositoryType - If specified, filters to definitions that have a repository of this type.\r\n     * @param {BuildInterfaces.DefinitionQueryOrder} queryOrder - Indicates the order in which definitions should be returned.\r\n     * @param {number} top - The maximum number of definitions to return.\r\n     * @param {string} continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {number[]} definitionIds - A comma-delimited list that specifies the IDs of definitions to retrieve.\r\n     * @param {string} path - If specified, filters to definitions under this folder.\r\n     * @param {Date} builtAfter - If specified, filters to definitions that have builds after this date.\r\n     * @param {Date} notBuiltAfter - If specified, filters to definitions that do not have builds after this date.\r\n     * @param {boolean} includeAllProperties - Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.\r\n     * @param {boolean} includeLatestBuilds - Indicates whether to return the latest and latest completed builds for this definition.\r\n     * @param {string} taskIdFilter - If specified, filters to definitions that use the specified task.\r\n     * @param {number} processType - If specified, filters to definitions with the given process type.\r\n     * @param {string} yamlFilename - If specified, filters to YAML definitions that match the given filename.\r\n     */\r\n    getDefinitions(project, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    repositoryId: repositoryId,\r\n                    repositoryType: repositoryType,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    minMetricsTime: minMetricsTime,\r\n                    definitionIds: definitionIds && definitionIds.join(\",\"),\r\n                    path: path,\r\n                    builtAfter: builtAfter,\r\n                    notBuiltAfter: notBuiltAfter,\r\n                    includeAllProperties: includeAllProperties,\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                    taskIdFilter: taskIdFilter,\r\n                    processType: processType,\r\n                    yamlFilename: yamlFilename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionReference, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Restores a deleted definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The identifier of the definition to restore.\r\n     * @param {boolean} deleted - When false, restores a deleted definition.\r\n     */\r\n    restoreDefinition(project, definitionId, deleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (deleted == null) {\r\n                throw new TypeError('deleted can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    deleted: deleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing build definition.  In order for this operation to succeed, the value of the \"Revision\" property of the request body must match the existing build definition's. It is recommended that you obtain the existing build definition by using GET, modify the build definition as necessary, and then submit the modified definition with PUT.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinition} definition - The new version of the definition. Its \"Revision\" property must match the existing definition for the update to be accepted.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} secretsSourceDefinitionId\r\n     * @param {number} secretsSourceDefinitionRevision\r\n     */\r\n    updateDefinition(definition, project, definitionId, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    secretsSourceDefinitionId: secretsSourceDefinitionId,\r\n                    secretsSourceDefinitionRevision: secretsSourceDefinitionRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the contents of a file in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n     * @param {string} path - The path to the file to retrieve, relative to the root of the repository.\r\n     */\r\n    getFileContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    commitOrBranch: commitOrBranch,\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"29d12225-b1d9-425f-b668-6c594a981313\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new folder.\r\n     *\r\n     * @param {BuildInterfaces.Folder} folder - The folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path of the folder.\r\n     */\r\n    createFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition folder. Definitions and their corresponding builds will also be deleted.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path to the folder.\r\n     */\r\n    deleteFolder(project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of build definition folders.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The path to start with.\r\n     * @param {BuildInterfaces.FolderQueryOrder} queryOrder - The order in which folders should be returned.\r\n     */\r\n    getFolders(project, path, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing folder at given  existing path\r\n     *\r\n     * @param {BuildInterfaces.Folder} folder - The new version of the folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path to the folder.\r\n     */\r\n    updateFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets pipeline general settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildGeneralSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"c4aefd19-30ff-405b-80ad-aca021e7242a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates pipeline general settings.\r\n     *\r\n     * @param {BuildInterfaces.PipelineGeneralSettings} newSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuildGeneralSettings(newSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"c4aefd19-30ff-405b-80ad-aca021e7242a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the retention history for the project collection. This includes pipelines that have custom retention rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files associated with pipelines owned by the collection with retention type, and the number of files per pipeline.\r\n     *\r\n     * @param {number} daysToLookback\r\n     */\r\n    getRetentionHistory(daysToLookback) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    daysToLookback: daysToLookback,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"1a9c48be-0ef5-4ec2-b94f-f053bdd2d3bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildRetentionHistory, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the latest build for a definition, optionally scoped to a specific branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} definition - definition name with optional leading folder path, or the definition id\r\n     * @param {string} branchName - optional parameter that indicates the specific branch to use. If not specified, the default branch is used.\r\n     */\r\n    getLatestBuild(project, definition, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definition: definition\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"54481611-01f4-47f3-998f-160da0f0c229\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds new leases for pipeline runs.\r\n     *\r\n     * @param {BuildInterfaces.NewRetentionLease[]} newLeases\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addRetentionLeases(newLeases, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, newLeases, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes specific retention leases.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} ids\r\n     */\r\n    deleteRetentionLeasesById(project, ids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the details of the retention lease given a lease id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} leaseId\r\n     */\r\n    getRetentionLease(project, leaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    leaseId: leaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases matching the specified MinimalRetentionLeases\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {BuildInterfaces.MinimalRetentionLease[]} leasesToFetch - List of JSON-serialized MinimalRetentionLeases separated by '|'\r\n     */\r\n    getRetentionLeasesByMinimalRetentionLeases(project, leasesToFetch) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (leasesToFetch == null) {\r\n                throw new TypeError('leasesToFetch can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    leasesToFetch: leasesToFetch && leasesToFetch.join(\"|\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} ownerId\r\n     * @param {number} definitionId - An optional parameter to limit the search to a specific pipeline definition.\r\n     * @param {number} runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.\r\n     */\r\n    getRetentionLeasesByOwnerId(project, ownerId, definitionId, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ownerId: ownerId,\r\n                    definitionId: definitionId,\r\n                    runId: runId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} userOwnerId - The user id to search for.\r\n     * @param {number} definitionId - An optional parameter to limit the search to a specific pipeline definition.\r\n     * @param {number} runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.\r\n     */\r\n    getRetentionLeasesByUserId(project, userOwnerId, definitionId, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (userOwnerId == null) {\r\n                throw new TypeError('userOwnerId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    userOwnerId: userOwnerId,\r\n                    definitionId: definitionId,\r\n                    runId: runId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLog(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLogLines(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the logs for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildLogs(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the logs for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildLogsZip(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLogZip(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets build metrics for a project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} metricAggregationType - The aggregation type to use (hourly, daily).\r\n     * @param {Date} minMetricsTime - The date from which to calculate metrics.\r\n     */\r\n    getProjectMetrics(project, metricAggregationType, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    metricAggregationType: metricAggregationType\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"7433fae7-a6bc-41dc-a6e2-eef9005ce41a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets build metrics for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {Date} minMetricsTime - The date from which to calculate metrics.\r\n     */\r\n    getDefinitionMetrics(project, definitionId, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"d973b939-0ce0-4fec-91d8-da3940fa1827\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all build definition options supported by the system.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildOptionDefinitions(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"591cb5a4-2d46-4f3a-a697-5cd42b6bd332\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildOptionDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the contents of a directory in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n     * @param {string} path - The path contents to list, relative to the root of the repository.\r\n     */\r\n    getPathContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    commitOrBranch: commitOrBranch,\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"7944d6fb-df01-4709-920a-7a189aa34037\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets properties for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string[]} filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n     */\r\n    getBuildProperties(project, buildId, filter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter && filter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"0a6312e9-0627-49b7-8083-7d74a64849c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates properties for a build.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - A json-patch document describing the properties to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    updateBuildProperties(customHeaders, document, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"0a6312e9-0627-49b7-8083-7d74a64849c9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets properties for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string[]} filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n     */\r\n    getDefinitionProperties(project, definitionId, filter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter && filter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"d9826ad7-2a68-46a9-a6e9-677698777895\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates properties for a definition.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - A json-patch document describing the properties to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    updateDefinitionProperties(customHeaders, document, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"d9826ad7-2a68-46a9-a6e9-677698777895\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a pull request object from source provider.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} pullRequestId - Vendor-specific id of the pull request.\r\n     * @param {string} repositoryId - Vendor-specific identifier or the name of the repository that contains the pull request.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     */\r\n    getPullRequest(project, providerName, pullRequestId, repositoryId, serviceEndpointId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    repositoryId: repositoryId,\r\n                    serviceEndpointId: serviceEndpointId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"d8763ec7-9ff0-4fb4-b2b2-9d757906ff14\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build report.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type\r\n     */\r\n    getBuildReport(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"45bcaa88-67e1-4042-a035-56d3b4a7d44c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build report.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type\r\n     */\r\n    getBuildReportHtmlContent(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"45bcaa88-67e1-4042-a035-56d3b4a7d44c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/html\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of source code repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of a single repository to get.\r\n     * @param {BuildInterfaces.ResultSet} resultSet - 'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.\r\n     * @param {boolean} pageResults - If set to true, this will limit the set of results and will return a continuation token to continue the query.\r\n     * @param {string} continuationToken - When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.\r\n     */\r\n    listRepositories(project, providerName, serviceEndpointId, repository, resultSet, pageResults, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    resultSet: resultSet,\r\n                    pageResults: pageResults,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"d44d1680-f978-4834-9b93-8c6e132329c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {BuildInterfaces.DefinitionResourceReference[]} resources\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    authorizeDefinitionResources(resources, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"ea623316-1967-45eb-89ab-e9e6110cf2d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, resources, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    getDefinitionResources(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"ea623316-1967-45eb-89ab-e9e6110cf2d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets information about build resources in the system.\r\n     *\r\n     */\r\n    getResourceUsage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"3813d06c-9e36-4ea1-aac3-61a485d60e3d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the project's retention settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRetentionSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"dadb46e7-5851-4c72-820e-ae8abb82f59f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the project's retention settings.\r\n     *\r\n     * @param {BuildInterfaces.UpdateProjectRetentionSettingModel} updateModel\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRetentionSettings(updateModel, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"dadb46e7-5851-4c72-820e-ae8abb82f59f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all revisions of a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    getDefinitionRevisions(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"7c116775-52e5-453e-8c5d-914d9762d8c4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the build settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the build settings.\r\n     *\r\n     * @param {BuildInterfaces.BuildSettings} settings - The new settings.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuildSettings(settings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, settings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of source providers and their capabilities.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    listSourceProviders(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"3ce81729-954f-423d-a581-9fea01d25186\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.SourceProviderAttributes, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a build stage\r\n     *\r\n     * @param {BuildInterfaces.UpdateStageParameters} updateParameters\r\n     * @param {number} buildId\r\n     * @param {string} stageRefName\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateStage(updateParameters, buildId, stageRefName, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    stageRefName: stageRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"b8aac6c9-744b-46e1-88fc-3550969f9313\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * <p>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.</p> <p>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.</p>\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} definition - Either the definition name with optional leading folder path, or the definition id.\r\n     * @param {string} branchName - Only consider the most recent build for this branch. If not specified, the default branch is used.\r\n     * @param {string} stageName - Use this stage within the pipeline to render the status.\r\n     * @param {string} jobName - Use this job within a stage of the pipeline to render the status.\r\n     * @param {string} configuration - Use this job configuration to render the status\r\n     * @param {string} label - Replaces the default text on the left side of the badge.\r\n     */\r\n    getStatusBadge(project, definition, branchName, stageName, jobName, configuration, label) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definition: definition\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                    stageName: stageName,\r\n                    jobName: jobName,\r\n                    configuration: configuration,\r\n                    label: label,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"07acfdce-4757-4439-b422-ddd13a2fcc10\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} tag - The tag to add.\r\n     */\r\n    addBuildTag(project, buildId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds tags to a build.\r\n     *\r\n     * @param {string[]} tags - The tags to add.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    addBuildTags(tags, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from a build. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteBuildTag(project, buildId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildTags(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds/Removes tags from a build.\r\n     *\r\n     * @param {BuildInterfaces.UpdateTagParameters} updateParameters - The tags to add/remove.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    updateBuildTags(updateParameters, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} tag - The tag to add.\r\n     */\r\n    addDefinitionTag(project, definitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds multiple tags to a definition.\r\n     *\r\n     * @param {string[]} tags - The tags to add.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    addDefinitionTags(tags, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from a definition. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteDefinitionTag(project, definitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The definition revision number. If not specified, uses the latest revision of the definition.\r\n     */\r\n    getDefinitionTags(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds/Removes tags from a definition.\r\n     *\r\n     * @param {BuildInterfaces.UpdateTagParameters} updateParameters - The tags to add/remove.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    updateDefinitionTags(updateParameters, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from builds, definitions, and from the tag store\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteTag(project, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"d84ac5c6-edc7-43d5-adc9-1b34be5dea09\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of all build tags in the project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTags(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"d84ac5c6-edc7-43d5-adc9-1b34be5dea09\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a build definition template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the template.\r\n     */\r\n    deleteTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific build definition template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the requested template.\r\n     */\r\n    getTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all definition templates.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTemplates(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing build definition template.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinitionTemplate} template - The new version of the template.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the template.\r\n     */\r\n    saveTemplate(template, project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, template, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets details for a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} timelineId\r\n     * @param {number} changeId\r\n     * @param {string} planId\r\n     */\r\n    getBuildTimeline(project, buildId, timelineId, changeId, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    timelineId: timelineId\r\n                };\r\n                let queryValues = {\r\n                    changeId: changeId,\r\n                    planId: planId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"8baac422-4c6e-4de5-8532-db96d92acffa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Timeline, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Recreates the webhooks for the specified triggers in the given source code repository.\r\n     *\r\n     * @param {BuildInterfaces.DefinitionTriggerType[]} triggerTypes - The types of triggers to restore webhooks for.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n     */\r\n    restoreWebhooks(triggerTypes, project, providerName, serviceEndpointId, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"793bceb8-9736-4030-bd2f-fb3ce6d6b478\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, triggerTypes, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of webhooks installed in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n     */\r\n    listWebhooks(project, providerName, serviceEndpointId, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"8f20ff82-9498-4812-9f6e-9c01bdc50e99\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RepositoryWebhook, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work items associated with a build. Only work items in the same project are returned.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} top - The maximum number of work items to return.\r\n     */\r\n    getBuildWorkItemsRefs(project, buildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"5a21f5d2-5642-47e4-a0bd-1356e6731bee\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work items associated with a build, filtered to specific commits.\r\n     *\r\n     * @param {string[]} commitIds - A comma-delimited list of commit IDs.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} top - The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.\r\n     */\r\n    getBuildWorkItemsRefsFromCommits(commitIds, project, buildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"5a21f5d2-5642-47e4-a0bd-1356e6731bee\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, commitIds, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all the work items between two builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} fromBuildId - The ID of the first build.\r\n     * @param {number} toBuildId - The ID of the last build.\r\n     * @param {number} top - The maximum number of work items to return.\r\n     */\r\n    getWorkItemsBetweenBuilds(project, fromBuildId, toBuildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromBuildId == null) {\r\n                throw new TypeError('fromBuildId can not be null or undefined');\r\n            }\r\n            if (toBuildId == null) {\r\n                throw new TypeError('toBuildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromBuildId: fromBuildId,\r\n                    toBuildId: toBuildId,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"build\", \"52ba8915-5518-42e3-a4bb-b0182d159e2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Converts a definition to YAML, optionally at a specific revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The revision number to retrieve. If this is not specified, the latest version will be returned.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of properties to include in the results.\r\n     * @param {boolean} includeLatestBuilds\r\n     */\r\n    getDefinitionYaml(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                    minMetricsTime: minMetricsTime,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"build\", \"7c3df3a1-7e51-4150-8cf7-540347f8697f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nBuildApi.RESOURCE_AREA_ID = \"965220d5-5bb9-42cf-8d67-9b146df2a5a4\";\r\nexports.BuildApi = BuildApi;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vsom = require(\"./VsoClient\");\r\nconst serm = require(\"./Serialization\");\r\nconst rm = require(\"typed-rest-client/RestClient\");\r\nconst hm = require(\"typed-rest-client/HttpClient\");\r\nclass ClientApiBase {\r\n    constructor(baseUrl, handlers, userAgent, options) {\r\n        this.baseUrl = baseUrl;\r\n        this.http = new hm.HttpClient(userAgent, handlers, options);\r\n        this.rest = new rm.RestClient(userAgent, null, handlers, options);\r\n        this.vsoClient = new vsom.VsoClient(baseUrl, this.rest);\r\n        this.userAgent = userAgent;\r\n    }\r\n    createAcceptHeader(type, apiVersion) {\r\n        return type + (apiVersion ? (';api-version=' + apiVersion) : '');\r\n    }\r\n    createRequestOptions(type, apiVersion) {\r\n        let options = {};\r\n        options.acceptHeader = this.createAcceptHeader(type, apiVersion);\r\n        return options;\r\n    }\r\n    formatResponse(data, responseTypeMetadata, isCollection) {\r\n        let serializationData = {\r\n            responseTypeMetadata: responseTypeMetadata,\r\n            responseIsCollection: isCollection\r\n        };\r\n        let deserializedResult = serm.ContractSerializer.deserialize(data, serializationData.responseTypeMetadata, false, serializationData.responseIsCollection);\r\n        return deserializedResult;\r\n    }\r\n}\r\nexports.ClientApiBase = ClientApiBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst CoreInterfaces = require(\"./interfaces/CoreInterfaces\");\r\nconst OperationsInterfaces = require(\"./interfaces/common/OperationsInterfaces\");\r\nclass CoreApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Core-api', options);\r\n    }\r\n    /**\r\n     * Removes the avatar for the project.\r\n     *\r\n     * @param {string} projectId - The ID or name of the project.\r\n     */\r\n    removeProjectAvatar(projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"54b2a2a0-859b-4d05-827c-ec4c862f641a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Sets the avatar for the project.\r\n     *\r\n     * @param {CoreInterfaces.ProjectAvatar} avatarBlob - The avatar blob data object to upload.\r\n     * @param {string} projectId - The ID or name of the project.\r\n     */\r\n    setProjectAvatar(avatarBlob, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"54b2a2a0-859b-4d05-827c-ec4c862f641a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, avatarBlob, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.WebApiConnectedServiceDetails} connectedServiceCreationData\r\n     * @param {string} projectId\r\n     */\r\n    createConnectedService(connectedServiceCreationData, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, connectedServiceCreationData, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} projectId\r\n     * @param {string} name\r\n     */\r\n    getConnectedServiceDetails(projectId, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedServiceDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} projectId\r\n     * @param {CoreInterfaces.ConnectedServiceKind} kind\r\n     */\r\n    getConnectedServices(projectId, kind) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    kind: kind,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    createIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mruData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    deleteIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} mruName\r\n     */\r\n    getIdentityMru(mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    updateIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, mruData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of members for a specific team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project the team belongs to.\r\n     * @param {string} teamId - The name or ID (GUID) of the team .\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     */\r\n    getTeamMembersWithExtendedProperties(projectId, teamId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"294c494c-2600-4d7e-b76c-3dd50c3c95be\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a process by ID.\r\n     *\r\n     * @param {string} processId - ID for a process.\r\n     */\r\n    getProcessById(processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"93878975-88c5-4e6a-8abb-7ddd77a8a7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of processes.\r\n     *\r\n     */\r\n    getProcesses() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"93878975-88c5-4e6a-8abb-7ddd77a8a7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project collection with the specified id or name.\r\n     *\r\n     * @param {string} collectionId\r\n     */\r\n    getProjectCollection(collectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    collectionId: collectionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"8031090f-ef1d-4af6-85fc-698cd75d42bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectCollection, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project collection references for this application.\r\n     *\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     */\r\n    getProjectCollections(top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"8031090f-ef1d-4af6-85fc-698cd75d42bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the history of changes to the project.\r\n     *\r\n     * @param {number} minRevision - The minimum revision number to return in the history.\r\n     */\r\n    getProjectHistoryEntries(minRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    minRevision: minRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"6488a877-4749-4954-82ea-7340d36be9f2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.ProjectInfo, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project with the specified id or name, optionally including capabilities.\r\n     *\r\n     * @param {string} projectId\r\n     * @param {boolean} includeCapabilities - Include capabilities (such as source control) in the team project result (default: false).\r\n     * @param {boolean} includeHistory - Search within renamed projects (that had such name in the past).\r\n     */\r\n    getProject(projectId, includeCapabilities, includeHistory) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeHistory: includeHistory,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProject, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all projects in the organization that the authenticated user has access to.\r\n     *\r\n     * @param {any} stateFilter - Filter on team projects in a specific team project state (default: WellFormed).\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     * @param {string} continuationToken\r\n     * @param {boolean} getDefaultTeamImageUrl\r\n     */\r\n    getProjects(stateFilter, top, skip, continuationToken, getDefaultTeamImageUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    stateFilter: stateFilter,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    continuationToken: continuationToken,\r\n                    getDefaultTeamImageUrl: getDefaultTeamImageUrl,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectReference, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a project to be created. Use the [GetOperation](../../operations/operations/get) to periodically check for create project status.\r\n     *\r\n     * @param {CoreInterfaces.TeamProject} projectToCreate - The project to create.\r\n     */\r\n    queueCreateProject(projectToCreate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, projectToCreate, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to periodically check for delete project status.\r\n     *\r\n     * @param {string} projectId - The project id of the project to delete.\r\n     */\r\n    queueDeleteProject(projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an existing project's name, abbreviation, description, or restore a project.\r\n     *\r\n     * @param {CoreInterfaces.TeamProject} projectUpdate - The updates for the project. The state must be set to wellFormed to restore the project.\r\n     * @param {string} projectId - The project id of the project to update.\r\n     */\r\n    updateProject(projectUpdate, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, projectUpdate, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of team project properties for multiple projects.\r\n     *\r\n     * @param {string[]} projectIds - A comma-delimited string of team project IDs\r\n     * @param {string[]} properties\r\n     */\r\n    getProjectsProperties(projectIds, properties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (projectIds == null) {\r\n                throw new TypeError('projectIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    projectIds: projectIds && projectIds.join(\",\"),\r\n                    properties: properties && properties.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"0a3ffdfc-fe94-47a6-bb27-79bf3f762eac\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of team project properties.\r\n     *\r\n     * @param {string} projectId - The team project ID.\r\n     * @param {string[]} keys - A comma-delimited string of team project property names. Wildcard characters (\"?\" and \"*\") are supported. If no key is specified, all properties will be returned.\r\n     */\r\n    getProjectProperties(projectId, keys) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    keys: keys && keys.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"4976a71a-4487-49aa-8aab-a1eda469037a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create, update, and delete team project properties.\r\n     *\r\n     * @param {string} projectId - The team project ID.\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - A JSON Patch document that represents an array of property operations. See RFC 6902 for more details on JSON Patch. The accepted operation verbs are Add and Remove, where Add is used for both creating and updating properties. The path consists of a forward slash and a property name.\r\n     */\r\n    setProjectProperties(customHeaders, projectId, patchDocument) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"core\", \"4976a71a-4487-49aa-8aab-a1eda469037a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.Proxy} proxy\r\n     */\r\n    createOrUpdateProxy(proxy) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, proxy, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} proxyUrl\r\n     * @param {string} site\r\n     */\r\n    deleteProxy(proxyUrl, site) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (proxyUrl == null) {\r\n                throw new TypeError('proxyUrl can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    proxyUrl: proxyUrl,\r\n                    site: site,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} proxyUrl\r\n     */\r\n    getProxies(proxyUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    proxyUrl: proxyUrl,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all teams.\r\n     *\r\n     * @param {boolean} mine - If true, then return all teams requesting user is member. Otherwise return all teams user has read access.\r\n     * @param {number} top - Maximum number of teams to return.\r\n     * @param {number} skip - Number of teams to skip.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getAllTeams(mine, top, skip, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$mine': mine,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"7a4d9ee9-3433-4347-b47a-7a80f1cf307e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a team in a team project.\r\n     *\r\n     * @param {CoreInterfaces.WebApiTeam} team - The team data used to create the team.\r\n     * @param {string} projectId - The name or ID (GUID) of the team project in which to create the team.\r\n     */\r\n    createTeam(team, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, team, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team to delete.\r\n     * @param {string} teamId - The name or ID of the team to delete.\r\n     */\r\n    deleteTeam(projectId, teamId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team.\r\n     * @param {string} teamId - The name or ID (GUID) of the team.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getTeam(projectId, teamId, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                let queryValues = {\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of teams.\r\n     *\r\n     * @param {string} projectId\r\n     * @param {boolean} mine - If true return all the teams requesting user is member, otherwise return all the teams user has read access.\r\n     * @param {number} top - Maximum number of teams to return.\r\n     * @param {number} skip - Number of teams to skip.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getTeams(projectId, mine, top, skip, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    '$mine': mine,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a team's name and/or description.\r\n     *\r\n     * @param {CoreInterfaces.WebApiTeam} teamData\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team to update.\r\n     * @param {string} teamId - The name of ID of the team to update.\r\n     */\r\n    updateTeam(teamData, projectId, teamId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, teamData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nCoreApi.RESOURCE_AREA_ID = \"79134c72-4a58-4b42-976c-04e7115f32bf\";\r\nexports.CoreApi = CoreApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst DashboardInterfaces = require(\"./interfaces/DashboardInterfaces\");\r\nclass DashboardApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Dashboard-api', options);\r\n    }\r\n    /**\r\n     * Create the supplied dashboard.\r\n     *\r\n     * @param {DashboardInterfaces.Dashboard} dashboard - The initial state of the dashboard\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    createDashboard(dashboard, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, dashboard, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a dashboard given its ID. This also deletes the widgets associated with this dashboard.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard to delete.\r\n     */\r\n    deleteDashboard(teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a dashboard by its ID.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId\r\n     */\r\n    getDashboard(teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of dashboards under a project.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getDashboardsByProject(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace configuration for the specified dashboard. Replaces Widget list on Dashboard, only if property is supplied.\r\n     *\r\n     * @param {DashboardInterfaces.Dashboard} dashboard - The Configuration of the dashboard to replace.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard to replace.\r\n     */\r\n    replaceDashboard(dashboard, teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, dashboard, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the name and position of dashboards in the supplied group, and remove omitted dashboards. Does not modify dashboard content.\r\n     *\r\n     * @param {DashboardInterfaces.DashboardGroup} group\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    replaceDashboards(group, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.DashboardGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a widget on the specified dashboard.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - State of the widget to add\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of dashboard the widget will be added to.\r\n     */\r\n    createWidget(widget, teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete the specified widget.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    deleteWidget(teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the current state of the specified widget.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to read.\r\n     */\r\n    getWidget(teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Override the  state of the specified widget.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - State to be written for the widget.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    replaceWidget(widget, teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Perform a partial update of the specified widget.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - Description of the widget changes to apply. All non-null fields will be replaced.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    updateWidget(widget, teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the widget metadata satisfying the specified contribution ID.\r\n     *\r\n     * @param {string} contributionId - The ID of Contribution for the Widget\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWidgetMetadata(contributionId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    contributionId: contributionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Dashboard\", \"6b3628d3-e96f-4fc7-b176-50240b03b515\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetMetadataResponse, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all available widget metadata in alphabetical order, including widgets marked with isVisibleFromCatalog == false.\r\n     *\r\n     * @param {DashboardInterfaces.WidgetScope} scope\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWidgetTypes(scope, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (scope == null) {\r\n                throw new TypeError('scope can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$scope': scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Dashboard\", \"6b3628d3-e96f-4fc7-b176-50240b03b515\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetTypesResponse, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nDashboardApi.RESOURCE_AREA_ID = \"31c84e0a-3ece-48fd-a29d-100849af99ba\";\r\nexports.DashboardApi = DashboardApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ExtensionManagementInterfaces = require(\"./interfaces/ExtensionManagementInterfaces\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass ExtensionManagementApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-ExtensionManagement-api', options);\r\n    }\r\n    /**\r\n     * @param {string} itemId\r\n     * @param {boolean} testCommerce\r\n     * @param {boolean} isFreeOrTrialInstall\r\n     * @param {boolean} isAccountOwner\r\n     * @param {boolean} isLinked\r\n     * @param {boolean} isConnectedServer\r\n     * @param {boolean} isBuyOperationValid\r\n     */\r\n    getAcquisitionOptions(itemId, testCommerce, isFreeOrTrialInstall, isAccountOwner, isLinked, isConnectedServer, isBuyOperationValid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (itemId == null) {\r\n                throw new TypeError('itemId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    itemId: itemId,\r\n                    testCommerce: testCommerce,\r\n                    isFreeOrTrialInstall: isFreeOrTrialInstall,\r\n                    isAccountOwner: isAccountOwner,\r\n                    isLinked: isLinked,\r\n                    isConnectedServer: isConnectedServer,\r\n                    isBuyOperationValid: isBuyOperationValid,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"288dff58-d13b-468e-9671-0fb754e9398c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.AcquisitionOptions, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ExtensionManagementInterfaces.ExtensionAcquisitionRequest} acquisitionRequest\r\n     */\r\n    requestAcquisition(acquisitionRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"da616457-eed3-4672-92d7-18d21f5c1658\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, acquisitionRequest, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    getAuditLog(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"23a312e0-562d-42fb-a505-5a046b5635db\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAuditLog, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} registrationId\r\n     */\r\n    registerAuthorization(publisherName, extensionName, registrationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    registrationId: registrationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"f21cfc80-d2d2-4248-98bb-7820c74c4606\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    createDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     * @param {string} documentId\r\n     */\r\n    deleteDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName,\r\n                    documentId: documentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     * @param {string} documentId\r\n     */\r\n    getDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName,\r\n                    documentId: documentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    getDocumentsByName(publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    setDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    updateDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query for one or more data collections for the specified extension.  Note: the token used for authorization must have been issued on behalf of the specified extension.\r\n     *\r\n     * @param {ExtensionManagementInterfaces.ExtensionDataCollectionQuery} collectionQuery\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     */\r\n    queryCollectionsByName(collectionQuery, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"56c331f1-ce53-4318-adfd-4db5c52a7a2e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, collectionQuery, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List state and version information for all installed extensions.\r\n     *\r\n     * @param {boolean} includeDisabled - If true (the default), include disabled extensions in the results.\r\n     * @param {boolean} includeErrors - If true, include installed extensions in an error state in the results.\r\n     * @param {boolean} includeInstallationIssues\r\n     * @param {boolean} forceRefresh\r\n     */\r\n    getStates(includeDisabled, includeErrors, includeInstallationIssues, forceRefresh) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeDisabled: includeDisabled,\r\n                    includeErrors: includeErrors,\r\n                    includeInstallationIssues: includeInstallationIssues,\r\n                    forceRefresh: forceRefresh,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"92755d3d-9a8a-42b3-8a4d-87359fe5aa93\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionState, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ExtensionManagementInterfaces.InstalledExtensionQuery} query\r\n     */\r\n    queryExtensions(query) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"046c980f-1345-4ce2-bf85-b46d10ff4cfd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List the installed extensions in the account / project collection.\r\n     *\r\n     * @param {boolean} includeDisabledExtensions - If true (the default), include disabled extensions in the results.\r\n     * @param {boolean} includeErrors - If true, include installed extensions with errors.\r\n     * @param {string[]} assetTypes\r\n     * @param {boolean} includeInstallationIssues\r\n     */\r\n    getInstalledExtensions(includeDisabledExtensions, includeErrors, assetTypes, includeInstallationIssues) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeDisabledExtensions: includeDisabledExtensions,\r\n                    includeErrors: includeErrors,\r\n                    assetTypes: assetTypes && assetTypes.join(\":\"),\r\n                    includeInstallationIssues: includeInstallationIssues,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"275424d0-c844-4fe2-bda6-04933a1357d8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an installed extension. Typically this API is used to enable or disable an extension.\r\n     *\r\n     * @param {ExtensionManagementInterfaces.InstalledExtension} extension\r\n     */\r\n    updateInstalledExtension(extension) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"275424d0-c844-4fe2-bda6-04933a1357d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, extension, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an installed extension by its publisher and extension name.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string[]} assetTypes\r\n     */\r\n    getInstalledExtensionByName(publisherName, extensionName, assetTypes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    assetTypes: assetTypes && assetTypes.join(\":\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Install the specified extension into the account / project collection.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string} version\r\n     */\r\n    installExtensionByName(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Uninstall the specified extension from the account / project collection.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string} reason\r\n     * @param {string} reasonCode\r\n     */\r\n    uninstallExtensionByName(publisherName, extensionName, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} userId\r\n     */\r\n    getPolicies(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userId: userId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"e5cc8c09-407b-4867-8319-2ae3338cbf6f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.UserExtensionPolicy, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} rejectMessage\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} requesterId\r\n     * @param {ExtensionManagementInterfaces.ExtensionRequestState} state\r\n     */\r\n    resolveRequest(rejectMessage, publisherName, extensionName, requesterId, state) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (state == null) {\r\n                throw new TypeError('state can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    requesterId: requesterId\r\n                };\r\n                let queryValues = {\r\n                    state: state,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"aa93e1f3-511c-4364-8b9c-eb98818f2e0b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, rejectMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getRequests() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"216b978f-b164-424e-ada2-b77561e842b7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} rejectMessage\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {ExtensionManagementInterfaces.ExtensionRequestState} state\r\n     */\r\n    resolveAllRequests(rejectMessage, publisherName, extensionName, state) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (state == null) {\r\n                throw new TypeError('state can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    state: state,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"ba93e1f3-511c-4364-8b9c-eb98818f2e0b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, rejectMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    deleteRequest(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"f5afca1e-a728-4294-aa2d-4af0173431b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} requestMessage\r\n     */\r\n    requestExtension(publisherName, extensionName, requestMessage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"f5afca1e-a728-4294-aa2d-4af0173431b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, requestMessage, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"ExtensionManagement\", \"3a2e24ed-1d6f-4cb2-9f3b-45a96bbfaf50\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nExtensionManagementApi.RESOURCE_AREA_ID = \"6c2b0933-3600-42ae-bf8b-93d4f7e83594\";\r\nexports.ExtensionManagementApi = ExtensionManagementApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst FeatureManagementInterfaces = require(\"./interfaces/FeatureManagementInterfaces\");\r\nclass FeatureManagementApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-FeatureManagement-api', options);\r\n    }\r\n    /**\r\n     * Get a specific feature by its id\r\n     *\r\n     * @param {string} featureId - The contribution id of the feature\r\n     */\r\n    getFeature(featureId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"c4209f25-7a27-41dd-9f04-06080c7b6afd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all defined features\r\n     *\r\n     * @param {string} targetContributionId - Optional target contribution. If null/empty, return all features. If specified include the features that target the specified contribution.\r\n     */\r\n    getFeatures(targetContributionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    targetContributionId: targetContributionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"c4209f25-7a27-41dd-9f04-06080c7b6afd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the state of the specified feature for the given user/all-users scope\r\n     *\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     */\r\n    getFeatureState(featureId, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"98911314-3f9b-4eaf-80e8-83900d8e85d9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set the state of a feature\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to set the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} reason - Reason for changing the state\r\n     * @param {string} reasonCode - Short reason code\r\n     */\r\n    setFeatureState(feature, featureId, userScope, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"98911314-3f9b-4eaf-80e8-83900d8e85d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, feature, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the state of the specified feature for the given named scope\r\n     *\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} scopeName - Scope at which to get the feature setting for (e.g. \"project\" or \"team\")\r\n     * @param {string} scopeValue - Value of the scope (e.g. the project or team id)\r\n     */\r\n    getFeatureStateForScope(featureId, userScope, scopeName, scopeValue) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"dd291e43-aa9f-4cee-8465-a93c78e414a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set the state of a feature at a specific scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to set the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} scopeName - Scope at which to get the feature setting for (e.g. \"project\" or \"team\")\r\n     * @param {string} scopeValue - Value of the scope (e.g. the project or team id)\r\n     * @param {string} reason - Reason for changing the state\r\n     * @param {string} reasonCode - Short reason code\r\n     */\r\n    setFeatureStateForScope(feature, featureId, userScope, scopeName, scopeValue, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"dd291e43-aa9f-4cee-8465-a93c78e414a4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, feature, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the effective state for a list of feature ids\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Features to query along with current scope values\r\n     */\r\n    queryFeatureStates(query) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"2b4486ad-122b-400c-ae65-17b6672c1f9d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the states of the specified features for the default scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Query describing the features to query.\r\n     * @param {string} userScope\r\n     */\r\n    queryFeatureStatesForDefaultScope(query, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"3f810f28-03e2-4239-b0bc-788add3005e5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the states of the specified features for the specific named scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Query describing the features to query.\r\n     * @param {string} userScope\r\n     * @param {string} scopeName\r\n     * @param {string} scopeValue\r\n     */\r\n    queryFeatureStatesForNamedScope(query, userScope, scopeName, scopeValue) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"FeatureManagement\", \"f29e997b-c2da-4d15-8380-765788a1a74c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.FeatureManagementApi = FeatureManagementApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Licensed under the MIT license.  See LICENSE file in the project root for full license information.\r\nconst stream = require(\"stream\");\r\nconst zlib = require(\"zlib\");\r\nconst httpm = require(\"typed-rest-client/HttpClient\");\r\nconst FileContainerApiBase = require(\"./FileContainerApiBase\");\r\nconst FileContainerInterfaces = require(\"./interfaces/FileContainerInterfaces\");\r\nclass FileContainerApi extends FileContainerApiBase.FileContainerApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, options);\r\n    }\r\n    /**\r\n     * @param {number} containerId\r\n     * @param {string} scope\r\n     * @param {string} itemPath\r\n     * @param {string} downloadFileName\r\n     */\r\n    getItem(containerId, scope, itemPath, downloadFileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    itemPath: itemPath,\r\n                    '$format': \"OctetStream\",\r\n                    downloadFileName: downloadFileName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"4.0-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/octet-stream', verData.apiVersion);\r\n                    let res = yield this.http.get(url);\r\n                    let rres = {};\r\n                    let statusCode = res.message.statusCode;\r\n                    rres.statusCode = statusCode;\r\n                    // not found leads to null obj returned\r\n                    if (statusCode == httpm.HttpCodes.NotFound) {\r\n                        resolve(rres);\r\n                    }\r\n                    if (statusCode > 299) {\r\n                        let msg;\r\n                        // if exception/error in body, attempt to get better error\r\n                        let contents = yield res.readBody();\r\n                        let obj;\r\n                        if (contents && contents.length > 0) {\r\n                            obj = JSON.parse(contents);\r\n                            if (options && options.responseProcessor) {\r\n                                rres.result = options.responseProcessor(obj);\r\n                            }\r\n                            else {\r\n                                rres.result = obj;\r\n                            }\r\n                        }\r\n                        if (obj && obj.message) {\r\n                            msg = obj.message;\r\n                        }\r\n                        else {\r\n                            msg = \"Failed request: (\" + statusCode + \") \" + res.message.url;\r\n                        }\r\n                        reject(new Error(msg));\r\n                    }\r\n                    else {\r\n                        // if the response is gzipped, unzip it\r\n                        if (res.message.headers[\"content-encoding\"] === \"gzip\") {\r\n                            let unzipStream = zlib.createGunzip();\r\n                            res.message.pipe(unzipStream);\r\n                            rres.result = unzipStream;\r\n                        }\r\n                        else {\r\n                            rres.result = res.message;\r\n                        }\r\n                        resolve(rres);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    createItem(contentStream, uncompressedLength, containerId, itemPath, scope, options) {\r\n        return new Promise((resolve, reject) => {\r\n            let chunkStream = new ChunkStream(this, uncompressedLength, containerId, itemPath, scope, options);\r\n            chunkStream.on('finish', () => {\r\n                resolve(chunkStream.getItem());\r\n            });\r\n            contentStream.pipe(chunkStream);\r\n        });\r\n    }\r\n    // used by ChunkStream\r\n    _createItem(customHeaders, contentStream, containerId, itemPath, scope, onResult) {\r\n        var routeValues = {\r\n            containerId: containerId\r\n        };\r\n        var queryValues = {\r\n            itemPath: itemPath,\r\n            scope: scope,\r\n        };\r\n        customHeaders = customHeaders || {};\r\n        customHeaders[\"Content-Type\"] = \"\";\r\n        this.vsoClient.getVersioningData(\"4.0-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues)\r\n            .then((versioningData) => {\r\n            var url = versioningData.requestUrl;\r\n            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: false };\r\n            let options = this.createRequestOptions('application/octet-stream', versioningData.apiVersion);\r\n            options.additionalHeaders = customHeaders;\r\n            this.rest.uploadStream('PUT', url, contentStream, options)\r\n                .then((res) => {\r\n                let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, false);\r\n                onResult(null, res.statusCode, ret);\r\n            })\r\n                .catch((err) => {\r\n                onResult(err, err.statusCode, null);\r\n            });\r\n        }, (error) => {\r\n            onResult(error, error.statusCode, null);\r\n        });\r\n    }\r\n}\r\nexports.FileContainerApi = FileContainerApi;\r\nclass ChunkStream extends stream.Writable {\r\n    constructor(api, uncompressedLength, containerId, itemPath, scope, options) {\r\n        super();\r\n        this._buffer = new Buffer(ChunkStream.ChunkSize);\r\n        this._length = 0;\r\n        this._startRange = 0;\r\n        this._bytesToSend = 0;\r\n        this._totalReceived = 0;\r\n        this._api = api;\r\n        this._options = options || {};\r\n        this._uncompressedLength = uncompressedLength;\r\n        this._containerId = containerId;\r\n        this._itemPath = itemPath;\r\n        this._scope = scope;\r\n        this._bytesToSend = this._options.isGzipped ? this._options.compressedLength : uncompressedLength;\r\n    }\r\n    _write(data, encoding, callback) {\r\n        let chunk = data;\r\n        if (!chunk) {\r\n            if (this._length == 0) {\r\n                callback();\r\n            }\r\n            else {\r\n                // last chunk\r\n                this._sendChunk(callback);\r\n            }\r\n            return;\r\n        }\r\n        let newBuffer = null;\r\n        if (this._length + chunk.length > ChunkStream.ChunkSize) {\r\n            // overflow\r\n            let overflowPosition = chunk.length - (ChunkStream.ChunkSize - this._length);\r\n            chunk.copy(this._buffer, this._length, 0, overflowPosition);\r\n            this._length += overflowPosition;\r\n            newBuffer = chunk.slice(overflowPosition);\r\n        }\r\n        else {\r\n            chunk.copy(this._buffer, this._length, 0, chunk.length);\r\n            this._length += chunk.length;\r\n        }\r\n        this._totalReceived += chunk.length;\r\n        if (this._length >= ChunkStream.ChunkSize || this._totalReceived >= this._bytesToSend) {\r\n            this._sendChunk(callback, newBuffer);\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    }\r\n    _sendChunk(callback, newBuffer) {\r\n        let endRange = this._startRange + this._length;\r\n        let headers = {\r\n            \"Content-Range\": \"bytes \" + this._startRange + \"-\" + (endRange - 1) + \"/\" + this._bytesToSend,\r\n            \"Content-Length\": this._length\r\n        };\r\n        if (this._options.isGzipped) {\r\n            headers[\"Accept-Encoding\"] = \"gzip\";\r\n            headers[\"Content-Encoding\"] = \"gzip\";\r\n            headers[\"x-tfs-filelength\"] = this._uncompressedLength;\r\n        }\r\n        this._startRange = endRange;\r\n        this._api._createItem(headers, new BufferStream(this._buffer, this._length), this._containerId, this._itemPath, this._scope, (err, statusCode, item) => {\r\n            if (newBuffer) {\r\n                this._length = newBuffer.length;\r\n                newBuffer.copy(this._buffer);\r\n            }\r\n            else {\r\n                this._length = 0;\r\n            }\r\n            this._item = item;\r\n            callback(err);\r\n        });\r\n    }\r\n    getItem() {\r\n        return this._item;\r\n    }\r\n}\r\nChunkStream.ChunkSize = (16 * 1024 * 1024);\r\nclass BufferStream extends stream.Readable {\r\n    constructor(buffer, length) {\r\n        super();\r\n        this._position = 0;\r\n        this._length = 0;\r\n        this._buffer = buffer;\r\n        this._length = length;\r\n    }\r\n    _read(size) {\r\n        if (this._position >= this._length) {\r\n            this.push(null);\r\n            return;\r\n        }\r\n        let end = Math.min(this._position + size, this._length);\r\n        this.push(this._buffer.slice(this._position, end));\r\n        this._position = end;\r\n    }\r\n}\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst FileContainerInterfaces = require(\"./interfaces/FileContainerInterfaces\");\r\nclass FileContainerApiBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-FileContainer-api', options);\r\n    }\r\n    /**\r\n     * Creates the specified items in in the referenced container.\r\n     *\r\n     * @param {VSSInterfaces.VssJsonCollectionWrapperV<FileContainerInterfaces.FileContainerItem[]>} items\r\n     * @param {number} containerId\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     */\r\n    createItems(items, containerId, scope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, items, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the specified items in a container.\r\n     *\r\n     * @param {number} containerId - Container Id.\r\n     * @param {string} itemPath - Path to delete.\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     */\r\n    deleteItem(containerId, itemPath, scope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (itemPath == null) {\r\n                throw new TypeError('itemPath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    itemPath: itemPath,\r\n                    scope: scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets containers filtered by a comma separated list of artifact uris within the same scope, if not specified returns all containers\r\n     *\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     * @param {string} artifactUris\r\n     */\r\n    getContainers(scope, artifactUris) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    artifactUris: artifactUris,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainer, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} containerId\r\n     * @param {string} scope\r\n     * @param {string} itemPath\r\n     * @param {boolean} metadata\r\n     * @param {string} format\r\n     * @param {string} downloadFileName\r\n     * @param {boolean} includeDownloadTickets\r\n     * @param {boolean} isShallow\r\n     * @param {boolean} ignoreRequestedMediaType\r\n     * @param {boolean} includeBlobMetadata\r\n     * @param {boolean} saveAbsolutePath\r\n     */\r\n    getItems(containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow, ignoreRequestedMediaType, includeBlobMetadata, saveAbsolutePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    itemPath: itemPath,\r\n                    metadata: metadata,\r\n                    '$format': format,\r\n                    downloadFileName: downloadFileName,\r\n                    includeDownloadTickets: includeDownloadTickets,\r\n                    isShallow: isShallow,\r\n                    ignoreRequestedMediaType: ignoreRequestedMediaType,\r\n                    includeBlobMetadata: includeBlobMetadata,\r\n                    saveAbsolutePath: saveAbsolutePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.FileContainerApiBase = FileContainerApiBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst compatBase = require(\"././GalleryCompatHttpClientBase\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass GalleryApi extends compatBase.GalleryCompatHttpClientBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Gallery-api', options);\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} accountName\r\n     */\r\n    shareExtensionById(extensionId, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"1f19631b-a0b4-4a03-89c2-d79785d24360\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} accountName\r\n     */\r\n    unshareExtensionById(extensionId, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"1f19631b-a0b4-4a03-89c2-d79785d24360\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} accountName\r\n     */\r\n    shareExtension(publisherName, extensionName, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"a1e66d8f-f5de-4d16-8309-91a4e015ee46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} accountName\r\n     */\r\n    unshareExtension(publisherName, extensionName, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"a1e66d8f-f5de-4d16-8309-91a4e015ee46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} itemId\r\n     * @param {string} installationTarget\r\n     * @param {boolean} testCommerce\r\n     * @param {boolean} isFreeOrTrialInstall\r\n     */\r\n    getAcquisitionOptions(itemId, installationTarget, testCommerce, isFreeOrTrialInstall) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (installationTarget == null) {\r\n                throw new TypeError('installationTarget can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    itemId: itemId\r\n                };\r\n                let queryValues = {\r\n                    installationTarget: installationTarget,\r\n                    testCommerce: testCommerce,\r\n                    isFreeOrTrialInstall: isFreeOrTrialInstall,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"9d0a0105-075e-4760-aa15-8bcf54d1bd7d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.AcquisitionOptions, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionAcquisitionRequest} acquisitionRequest\r\n     */\r\n    requestAcquisition(acquisitionRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"3adb1f2d-e328-446e-be73-9f6d98071c45\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, acquisitionRequest, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetByName(customHeaders, publisherName, extensionName, version, assetType, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"7529171f-a002-4180-93ba-685f358a0482\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAsset(customHeaders, extensionId, version, assetType, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"5d545f3d-ef47-488b-8be3-f5ee1517856c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetAuthenticated(customHeaders, publisherName, extensionName, version, assetType, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"506aff36-2622-4f70-8063-77cce6366d20\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} azurePublisherId\r\n     */\r\n    associateAzurePublisher(publisherName, azurePublisherId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (azurePublisherId == null) {\r\n                throw new TypeError('azurePublisherId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    azurePublisherId: azurePublisherId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    queryAssociatedAzurePublisher(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} languages\r\n     */\r\n    getCategories(languages) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    languages: languages,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"e0a5a71e-3ac3-43a0-ae7d-0bb5c3046a2a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} categoryName\r\n     * @param {string} languages\r\n     * @param {string} product\r\n     */\r\n    getCategoryDetails(categoryName, languages, product) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    categoryName: categoryName\r\n                };\r\n                let queryValues = {\r\n                    languages: languages,\r\n                    product: product,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"75d3c04d-84d2-4973-acd2-22627587dabc\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} product\r\n     * @param {string} categoryId\r\n     * @param {number} lcid\r\n     * @param {string} source\r\n     * @param {string} productVersion\r\n     * @param {string} skus\r\n     * @param {string} subSkus\r\n     */\r\n    getCategoryTree(product, categoryId, lcid, source, productVersion, skus, subSkus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    product: product,\r\n                    categoryId: categoryId\r\n                };\r\n                let queryValues = {\r\n                    lcid: lcid,\r\n                    source: source,\r\n                    productVersion: productVersion,\r\n                    skus: skus,\r\n                    subSkus: subSkus,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"1102bb42-82b0-4955-8d8a-435d6b4cedd3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} product\r\n     * @param {number} lcid\r\n     * @param {string} source\r\n     * @param {string} productVersion\r\n     * @param {string} skus\r\n     * @param {string} subSkus\r\n     */\r\n    getRootCategories(product, lcid, source, productVersion, skus, subSkus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    product: product\r\n                };\r\n                let queryValues = {\r\n                    lcid: lcid,\r\n                    source: source,\r\n                    productVersion: productVersion,\r\n                    skus: skus,\r\n                    subSkus: subSkus,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"31fba831-35b2-46f6-a641-d05de5a877d8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     */\r\n    getCertificate(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"e905ad6a-3f1f-4d08-9f6d-7d357ff8b7d0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    getContentVerificationLog(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"c0f1c7c4-3557-4ffb-b774-1e48c4865e99\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.CustomerSupportRequest} customerSupportRequest\r\n     */\r\n    createSupportRequest(customerSupportRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"8eded385-026a-4c15-b810-b8eb402771f1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, customerSupportRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    createDraftForEditExtension(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionDraftPatch} draftPatch\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     */\r\n    performEditExtensionDraftOperation(draftPatch, publisherName, extensionName, draftId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, draftPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePayloadInDraftForEditExtension(customHeaders, contentStream, publisherName, extensionName, draftId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    addAssetForEditExtensionDraft(customHeaders, contentStream, publisherName, extensionName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"f1db9c47-6619-4998-a7e5-d7f9f41a4617\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {String} product - Header to pass the product type of the payload file\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    createDraftForNewExtension(customHeaders, contentStream, publisherName, product, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileProduct\"] = \"product\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionDraftPatch} draftPatch\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     */\r\n    performNewExtensionDraftOperation(draftPatch, publisherName, draftId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, draftPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePayloadInDraftForNewExtension(customHeaders, contentStream, publisherName, draftId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    addAssetForNewExtensionDraft(customHeaders, contentStream, publisherName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     * @param {string} extensionName\r\n     */\r\n    getAssetFromEditExtensionDraft(publisherName, draftId, assetType, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (extensionName == null) {\r\n                throw new TypeError('extensionName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    extensionName: extensionName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    getAssetFromNewExtensionDraft(publisherName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get install/uninstall events of an extension. If both count and afterDate parameters are specified, count takes precedence.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} count - Count of events to fetch, applies to each event type.\r\n     * @param {Date} afterDate - Fetch events that occurred on or after this date\r\n     * @param {string} include - Filter options. Supported values: install, uninstall, review, acquisition, sales. Default is to fetch all types of events\r\n     * @param {string} includeProperty - Event properties to include. Currently only 'lastContactDetails' is supported for uninstall events\r\n     */\r\n    getExtensionEvents(publisherName, extensionName, count, afterDate, include, includeProperty) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    afterDate: afterDate,\r\n                    include: include,\r\n                    includeProperty: includeProperty,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"3d13c499-2168-4d06-bef4-14aba185dcd5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionEvents, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * API endpoint to publish extension install/uninstall events. This is meant to be invoked by EMS only for sending us data related to install/uninstall of an extension.\r\n     *\r\n     * @param {GalleryInterfaces.ExtensionEvents[]} extensionEvents\r\n     */\r\n    publishExtensionEvents(extensionEvents) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"0bf2bd3a-70e0-4d5d-8bf7-bd4a9c2ab6e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, extensionEvents, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionQuery} extensionQuery\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    queryExtensions(customHeaders, extensionQuery, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"eb9d5ee1-6d43-456b-b80e-8a96fbc014b6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.create(url, extensionQuery, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    createExtension(customHeaders, contentStream, extensionType, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     */\r\n    deleteExtensionById(extensionId, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     * @param {GalleryInterfaces.ExtensionQueryFlags} flags\r\n     */\r\n    getExtensionById(extensionId, version, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    updateExtensionById(extensionId, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    createExtensionWithPublisher(customHeaders, contentStream, publisherName, extensionType, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     */\r\n    deleteExtension(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {GalleryInterfaces.ExtensionQueryFlags} flags\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getExtension(customHeaders, publisherName, extensionName, version, flags, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                    flags: flags,\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * REST endpoint to update an extension.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     * @param {boolean} bypassScopeCheck - This parameter decides if the scope change check needs to be invoked or not\r\n     */\r\n    updateExtension(customHeaders, contentStream, publisherName, extensionName, extensionType, reCaptchaToken, bypassScopeCheck) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                    bypassScopeCheck: bypassScopeCheck,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {GalleryInterfaces.PublishedExtensionFlags} flags\r\n     */\r\n    updateExtensionProperties(publisherName, extensionName, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} hostType\r\n     * @param {string} hostName\r\n     */\r\n    shareExtensionWithHost(publisherName, extensionName, hostType, hostName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    hostType: hostType,\r\n                    hostName: hostName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"328a3af8-d124-46e9-9483-01690cd415b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} hostType\r\n     * @param {string} hostName\r\n     */\r\n    unshareExtensionWithHost(publisherName, extensionName, hostType, hostName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    hostType: hostType,\r\n                    hostName: hostName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"328a3af8-d124-46e9-9483-01690cd415b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.AzureRestApiRequestModel} azureRestApiRequestModel\r\n     */\r\n    extensionValidator(azureRestApiRequestModel) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"05e8a5e1-8c59-4c2c-8856-0ff087d1a844\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, azureRestApiRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Send Notification\r\n     *\r\n     * @param {GalleryInterfaces.NotificationsData} notificationData - Denoting the data needed to send notification\r\n     */\r\n    sendNotifications(notificationData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"eab39817-413c-4602-a49f-07ad00844980\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, notificationData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This endpoint gets hit when you download a VSTS extension from the Web UI\r\n     *\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getPackage(customHeaders, publisherName, extensionName, version, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"7cb576f8-1cae-4c4b-b7b1-e4af5759e965\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} assetToken\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetWithToken(customHeaders, publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType,\r\n                    assetToken: assetToken\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"364415a1-0077-4a41-a7a0-06edd4497492\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete publisher asset like logo\r\n     *\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     */\r\n    deletePublisherAsset(publisherName, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get publisher asset like logo as a stream\r\n     *\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     */\r\n    getPublisherAsset(publisherName, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update publisher asset like logo. It accepts asset file as an octet stream and file name is passed in header values.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePublisherAsset(customHeaders, contentStream, publisherName, assetType, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.PublisherQuery} publisherQuery\r\n     */\r\n    queryPublishers(publisherQuery) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"2ad6ee0a-b53f-4034-9d1d-d009fda1212e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, publisherQuery, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.Publisher} publisher\r\n     */\r\n    createPublisher(publisher) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, publisher, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    deletePublisher(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {number} flags\r\n     */\r\n    getPublisher(publisherName, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.Publisher} publisher\r\n     * @param {string} publisherName\r\n     */\r\n    updatePublisher(publisher, publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, publisher, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Endpoint to add/modify publisher membership. Currently Supports only addition/modification of 1 user at a time Works only for adding members of same tenant.\r\n     *\r\n     * @param {GalleryInterfaces.PublisherUserRoleAssignmentRef[]} roleAssignments - List of user identifiers(email address) and role to be added. Currently only one entry is supported.\r\n     * @param {string} publisherName - The name/id of publisher to which users have to be added\r\n     * @param {boolean} limitToCallerIdentityDomain - Should cross tenant addtions be allowed or not.\r\n     */\r\n    updatePublisherMembers(roleAssignments, publisherName, limitToCallerIdentityDomain) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    limitToCallerIdentityDomain: limitToCallerIdentityDomain,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, roleAssignments, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherRoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of questions with their responses associated with an extension.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} count - Number of questions to retrieve (defaults to 10).\r\n     * @param {number} page - Page number from which set of questions are to be retrieved.\r\n     * @param {Date} afterDate - If provided, results questions are returned which were posted after this date\r\n     */\r\n    getQuestions(publisherName, extensionName, count, page, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    page: page,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"c010d03d-812c-4ade-ae07-c1862475eda5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.QuestionsResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Flags a concern with an existing question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Concern} concern - User reported concern with a question for the extension.\r\n     * @param {string} pubName - Name of the publisher who published the extension.\r\n     * @param {string} extName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be updated for the extension.\r\n     */\r\n    reportQuestion(concern, pubName, extName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"784910cd-254a-494d-898b-0728549b2f10\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, concern, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Concern, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Question} question - Question to be created for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     */\r\n    createQuestion(question, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, question, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes an existing question and all its associated responses for an extension. (soft delete)\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be deleted for the extension.\r\n     */\r\n    deleteQuestion(publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Question} question - Updated question to be set for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be updated for the extension.\r\n     */\r\n    updateQuestion(question, publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, question, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new response for a given question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Response} response - Response to be created for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question for which response is to be created for the extension.\r\n     */\r\n    createResponse(response, publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, response, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a response for an extension. (soft delete)\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifies the question whose response is to be deleted.\r\n     * @param {number} responseId - Identifies the response to be deleted.\r\n     */\r\n    deleteResponse(publisherName, extensionName, questionId, responseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId,\r\n                    responseId: responseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing response for a given question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Response} response - Updated response to be set for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question for which response is to be updated for the extension.\r\n     * @param {number} responseId - Identifier of the response which has to be updated.\r\n     */\r\n    updateResponse(response, publisherName, extensionName, questionId, responseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId,\r\n                    responseId: responseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, response, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns extension reports\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} days - Last n days report. If afterDate and days are specified, days will take priority\r\n     * @param {number} count - Number of events to be returned\r\n     * @param {Date} afterDate - Use if you want to fetch events newer than the specified date\r\n     */\r\n    getExtensionReports(publisherName, extensionName, days, count, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    days: days,\r\n                    count: count,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"79e0c74f-157f-437e-845f-74fbb4121d4c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of reviews associated with an extension\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} count - Number of reviews to retrieve (defaults to 5)\r\n     * @param {GalleryInterfaces.ReviewFilterOptions} filterOptions - FilterOptions to filter out empty reviews etcetera, defaults to none\r\n     * @param {Date} beforeDate - Use if you want to fetch reviews older than the specified date, defaults to null\r\n     * @param {Date} afterDate - Use if you want to fetch reviews newer than the specified date, defaults to null\r\n     */\r\n    getReviews(publisherName, extensionName, count, filterOptions, beforeDate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    filterOptions: filterOptions,\r\n                    beforeDate: beforeDate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"5b3f819f-f247-42ad-8c00-dd9ab9ab246d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewsResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a summary of the reviews\r\n     *\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {Date} beforeDate - Use if you want to fetch summary of reviews older than the specified date, defaults to null\r\n     * @param {Date} afterDate - Use if you want to fetch summary of reviews newer than the specified date, defaults to null\r\n     */\r\n    getReviewsSummary(pubName, extName, beforeDate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName\r\n                };\r\n                let queryValues = {\r\n                    beforeDate: beforeDate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"b7b44e21-209e-48f0-ae78-04727fc37d77\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new review for an extension\r\n     *\r\n     * @param {GalleryInterfaces.Review} review - Review to be created for the extension\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     */\r\n    createReview(review, pubName, extName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, review, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Review, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a review\r\n     *\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {number} reviewId - Id of the review which needs to be updated\r\n     */\r\n    deleteReview(pubName, extName, reviewId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    reviewId: reviewId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates or Flags a review\r\n     *\r\n     * @param {GalleryInterfaces.ReviewPatch} reviewPatch - ReviewPatch object which contains the changes to be applied to the review\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {number} reviewId - Id of the review which needs to be updated\r\n     */\r\n    updateReview(reviewPatch, pubName, extName, reviewId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    reviewId: reviewId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, reviewPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewPatch, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionCategory} category\r\n     */\r\n    createCategory(category) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"476531a3-7024-4516-a76a-ed64d3008ad6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, category, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all setting entries for the given user/all-users scope\r\n     *\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} key - Optional key under which to filter all the entries\r\n     */\r\n    getGalleryUserSettings(userScope, key) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope,\r\n                    key: key\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"9b75ece3-7960-401c-848b-148ac01ca350\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set all setting entries for the given user/all-users scope\r\n     *\r\n     * @param {{ [key: string] : any; }} entries - A key-value pair of all settings that need to be set\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     */\r\n    setGalleryUserSettings(entries, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"9b75ece3-7960-401c-848b-148ac01ca350\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, entries, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} keyType\r\n     * @param {number} expireCurrentSeconds\r\n     */\r\n    generateKey(keyType, expireCurrentSeconds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    keyType: keyType\r\n                };\r\n                let queryValues = {\r\n                    expireCurrentSeconds: expireCurrentSeconds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"92ed5cf4-c38b-465a-9059-2f2fb7c624b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} keyType\r\n     */\r\n    getSigningKey(keyType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    keyType: keyType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"92ed5cf4-c38b-465a-9059-2f2fb7c624b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionStatisticUpdate} extensionStatisticsUpdate\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    updateExtensionStatistics(extensionStatisticsUpdate, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"a0ea3204-11e9-422d-a9ca-45851cc41400\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, extensionStatisticsUpdate, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {number} days\r\n     * @param {GalleryInterfaces.ExtensionStatsAggregateType} aggregate\r\n     * @param {Date} afterDate\r\n     */\r\n    getExtensionDailyStats(publisherName, extensionName, days, aggregate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    days: days,\r\n                    aggregate: aggregate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"ae06047e-51c5-4fb4-ab65-7be488544416\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This route/location id only supports HTTP POST anonymously, so that the page view daily stat can be incremented from Marketplace client. Trying to call GET on this route should result in an exception. Without this explicit implementation, calling GET on this public route invokes the above GET implementation GetExtensionDailyStats.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} version - Version of the extension\r\n     */\r\n    getExtensionDailyStatsAnonymous(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4fa7adb6-ca65-4075-a232-5f28323288ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Increments a daily statistic associated with the extension\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} version - Version of the extension\r\n     * @param {string} statType - Type of stat to increment\r\n     */\r\n    incrementExtensionDailyStat(publisherName, extensionName, version, statType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (statType == null) {\r\n                throw new TypeError('statType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                let queryValues = {\r\n                    statType: statType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"4fa7adb6-ca65-4075-a232-5f28323288ea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     */\r\n    getVerificationLog(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"gallery\", \"c5523abe-b843-437f-875b-5833064efe4d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nGalleryApi.RESOURCE_AREA_ID = \"69d21c00-f135-441b-b5ce-3626378e0819\";\r\nexports.GalleryApi = GalleryApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass GalleryCompatHttpClientBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, userAgent, options) {\r\n        super(baseUrl, handlers, userAgent, options);\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    */\r\n    createExtensionJson(extensionPackage) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {};\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.create(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} extensionId\r\n    */\r\n    updateExtensionByIdJson(extensionPackage, extensionId) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                extensionId: extensionId\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.replace(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} publisherName\r\n    */\r\n    createExtensionWithPublisherJson(extensionPackage, publisherName) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                publisherName: publisherName\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.create(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} publisherName\r\n    * @param {string} extensionName\r\n    */\r\n    updateExtensionJson(extensionPackage, publisherName, extensionName) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                publisherName: publisherName,\r\n                extensionName: extensionName\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.replace(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n}\r\nexports.GalleryCompatHttpClientBase = GalleryCompatHttpClientBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst GitInterfaces = require(\"./interfaces/GitInterfaces\");\r\nclass GitApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Git-api', options);\r\n    }\r\n    /**\r\n     * Create an annotated tag.\r\n     *\r\n     * @param {GitInterfaces.GitAnnotatedTag} tagObject - Object containing details of tag to be created.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     */\r\n    createAnnotatedTag(tagObject, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5e8a8081-3851-4626-b677-9891cc04102e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tagObject, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an annotated tag.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {string} objectId - ObjectId (Sha1Id) of tag to get.\r\n     */\r\n    getAnnotatedTag(project, repositoryId, objectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    objectId: objectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5e8a8081-3851-4626-b677-9891cc04102e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlob(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlobContent(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets one or more blobs in a zip file download.\r\n     *\r\n     * @param {string[]} blobIds - Blob IDs (SHA1 hashes) to be returned in the zip file.\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} filename\r\n     */\r\n    getBlobsZip(blobIds, repositoryId, project, filename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filename: filename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlobZip(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve statistics about a single branch.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} name - Name of the branch.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.\r\n     */\r\n    getBranch(repositoryId, name, project, baseVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (name == null) {\r\n                throw new TypeError('name can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    baseVersionDescriptor: baseVersionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve statistics about all branches within a repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.\r\n     */\r\n    getBranches(repositoryId, project, baseVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    baseVersionDescriptor: baseVersionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GitInterfaces.GitQueryBranchStatsCriteria} searchCriteria\r\n     * @param {string} repositoryId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBranchStatsBatch(searchCriteria, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, searchCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve changes for a particular commit.\r\n     *\r\n     * @param {string} commitId - The id of the commit.\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - The maximum number of changes to return.\r\n     * @param {number} skip - The number of changes to skip.\r\n     */\r\n    getChanges(commitId, repositoryId, project, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5bf884f5-3e07-42e9-afb8-1b872267bf16\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitChanges, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a cherry pick by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getCherryPickConflict(repositoryId, cherryPickId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a cherry pick\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     * @param {boolean} excludeResolved\r\n     * @param {boolean} onlyResolved\r\n     * @param {boolean} includeObsolete\r\n     */\r\n    getCherryPickConflicts(repositoryId, cherryPickId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                    includeObsolete: includeObsolete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateCherryPickConflict(conflict, repositoryId, cherryPickId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateCherryPickConflicts(conflictUpdates, repositoryId, cherryPickId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Given a commitId, returns a list of commits that are in the same cherry-pick family.\r\n     *\r\n     * @param {string} repositoryNameOrId\r\n     * @param {string} commitId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks\r\n     */\r\n    getCherryPickRelationships(repositoryNameOrId, commitId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    commitId: commitId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"8af142a4-27c2-4168-9e82-46b8629aaa0d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Cherry pick a specific commit or commits that are associated to a pull request into a new branch.\r\n     *\r\n     * @param {GitInterfaces.GitAsyncRefOperationParameters} cherryPickToCreate\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    createCherryPick(cherryPickToCreate, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, cherryPickToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a cherry pick operation by cherry pick Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} cherryPickId - ID of the cherry pick.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    getCherryPick(project, cherryPickId, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    cherryPickId: cherryPickId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a cherry pick operation for a specific branch. This operation is expensive due to the underlying object structure, so this API only looks at the 1000 most recent cherry pick operations.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.\r\n     */\r\n    getCherryPickForRefName(project, repositoryId, refName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (refName == null) {\r\n                throw new TypeError('refName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    refName: refName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} diffCommonCommit - If true, diff between common and target commits. If false, diff between base and target commits.\r\n     * @param {number} top - Maximum number of changes to return. Defaults to 100.\r\n     * @param {number} skip - Number of changes to skip\r\n     * @param {GitInterfaces.GitBaseVersionDescriptor} baseVersionDescriptor - Descriptor for base commit.\r\n     * @param {GitInterfaces.GitTargetVersionDescriptor} targetVersionDescriptor - Descriptor for target commit.\r\n     */\r\n    getCommitDiffs(repositoryId, project, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    diffCommonCommit: diffCommonCommit,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                if (baseVersionDescriptor) {\r\n                    queryValues.baseVersionType = baseVersionDescriptor.versionType;\r\n                    queryValues.baseVersion = baseVersionDescriptor.version;\r\n                    queryValues.baseVersionOptions = baseVersionDescriptor.versionOptions;\r\n                }\r\n                if (targetVersionDescriptor) {\r\n                    queryValues.targetVersionType = targetVersionDescriptor.versionType;\r\n                    queryValues.targetVersion = targetVersionDescriptor.version;\r\n                    queryValues.targetVersionOptions = targetVersionDescriptor.versionOptions;\r\n                }\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"615588d5-c0c7-4b88-88f8-e625306446e8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitDiffs, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a particular commit.\r\n     *\r\n     * @param {string} commitId - The id of the commit.\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} changeCount - The number of changes to include in the result.\r\n     */\r\n    getCommit(commitId, repositoryId, project, changeCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    changeCount: changeCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommit, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git commits for a project\r\n     *\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip\r\n     * @param {number} top\r\n     */\r\n    getCommits(repositoryId, searchCriteria, project, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a list of commits associated with a particular push.\r\n     *\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {number} pushId - The id of the push.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - The maximum number of commits to return (\"get the top x commits\").\r\n     * @param {number} skip - The number of commits to skip.\r\n     * @param {boolean} includeLinks - Set to false to avoid including REST Url links for resources. Defaults to true.\r\n     */\r\n    getPushCommits(repositoryId, pushId, project, top, skip, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pushId == null) {\r\n                throw new TypeError('pushId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    pushId: pushId,\r\n                    top: top,\r\n                    skip: skip,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git commits for a project matching the search criteria\r\n     *\r\n     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria - Search options\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Number of commits to skip.\r\n     * @param {number} top - Maximum number of commits to return.\r\n     * @param {boolean} includeStatuses - True to include additional commit status information.\r\n     */\r\n    getCommitsBatch(searchCriteria, repositoryId, project, skip, top, includeStatuses) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeStatuses: includeStatuses,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"6400dfb2-0bcb-462b-b992-5a57f8f1416c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, searchCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve deleted git repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeletedRepositories(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"2b6869c4-cb25-42b5-b7a3-0d3e6be0a11a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file diffs for each of the specified files\r\n     *\r\n     * @param {GitInterfaces.FileDiffsCriteria} fileDiffsCriteria - List of file parameters objects\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository\r\n     */\r\n    getFileDiffs(fileDiffsCriteria, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"c4c5a7e6-e9f3-4730-a92b-84baacff694b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, fileDiffsCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.FileDiff, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all forks of a repository in the collection.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} collectionId - Team project collection ID.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForks(repositoryNameOrId, collectionId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    collectionId: collectionId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"158c0340-bf6f-489c-9625-d572a1480d57\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepositoryRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Request that another repository's refs be fetched into this one. It syncs two existing forks. To create a fork, please see the <a href=\"https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1\"> repositories endpoint</a>\r\n     *\r\n     * @param {GitInterfaces.GitForkSyncRequestParameters} syncParams - Source repository and ref mapping.\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    createForkSyncRequest(syncParams, repositoryNameOrId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, syncParams, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific fork sync operation's details.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {number} forkSyncOperationId - OperationId of the sync request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForkSyncRequest(repositoryNameOrId, forkSyncOperationId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    forkSyncOperationId: forkSyncOperationId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all requested fork sync operations on this repository.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeAbandoned - True to include abandoned requests.\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForkSyncRequests(repositoryNameOrId, project, includeAbandoned, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeAbandoned: includeAbandoned,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create an import request.\r\n     *\r\n     * @param {GitInterfaces.GitImportRequest} importRequest - The import request to create.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     */\r\n    createImportRequest(importRequest, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, importRequest, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a particular import request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} importRequestId - The unique identifier for the import request.\r\n     */\r\n    getImportRequest(project, repositoryId, importRequestId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    importRequestId: importRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve import requests for a repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {boolean} includeAbandoned - True to include abandoned import requests in the results.\r\n     */\r\n    queryImportRequests(project, repositoryId, includeAbandoned) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    includeAbandoned: includeAbandoned,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retry or abandon a failed import request.\r\n     *\r\n     * @param {GitInterfaces.GitImportRequest} importRequestToUpdate - The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} importRequestId - The unique identifier for the import request to update.\r\n     */\r\n    updateImportRequest(importRequestToUpdate, project, repositoryId, importRequestId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    importRequestId: importRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, importRequestToUpdate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItem(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemContent(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {boolean} includeLinks - Set to true to include links to items.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     */\r\n    getItems(repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    includeLinks: includeLinks,\r\n                    versionDescriptor: versionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemText(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemZip(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path\r\n     *\r\n     * @param {GitInterfaces.GitItemRequestData} requestData - Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.\r\n     * @param {string} repositoryId - The name or ID of the repository\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getItemsBatch(requestData, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"630fd2e4-fb88-4f85-ad21-13f3fd1fbca9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, requestData, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Find the merge bases of two commits, optionally across forks. If otherRepositoryId is not specified, the merge bases will only be calculated within the context of the local repositoryNameOrId.\r\n     *\r\n     * @param {string} repositoryNameOrId - ID or name of the local repository.\r\n     * @param {string} commitId - First commit, usually the tip of the target branch of the potential merge.\r\n     * @param {string} otherCommitId - Other commit, usually the tip of the source branch of the potential merge.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} otherCollectionId - The collection ID where otherCommitId lives.\r\n     * @param {string} otherRepositoryId - The repository ID where otherCommitId lives.\r\n     */\r\n    getMergeBases(repositoryNameOrId, commitId, otherCommitId, project, otherCollectionId, otherRepositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (otherCommitId == null) {\r\n                throw new TypeError('otherCommitId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    commitId: commitId\r\n                };\r\n                let queryValues = {\r\n                    otherCommitId: otherCommitId,\r\n                    otherCollectionId: otherCollectionId,\r\n                    otherRepositoryId: otherRepositoryId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"7cf2abb6-c964-4f7e-9872-f78c66e72e9c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Request a git merge operation. Currently we support merging only 2 commits.\r\n     *\r\n     * @param {GitInterfaces.GitMergeParameters} mergeParameters - Parents commitIds and merge commit messsage.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    createMergeRequest(mergeParameters, project, repositoryNameOrId, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"985f7ae9-844f-4906-9897-7ef41516c0e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mergeParameters, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific merge operation's details.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {number} mergeOperationId - OperationId of the merge request.\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    getMergeRequest(project, repositoryNameOrId, mergeOperationId, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    mergeOperationId: mergeOperationId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"985f7ae9-844f-4906-9897-7ef41516c0e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Attach a new file to a pull request.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} fileName - The name of the file.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createAttachment(customHeaders, contentStream, fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment to delete.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteAttachment(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file content of a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachmentContent(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of files attached to a given pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachments(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file content of a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachmentZip(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a like on a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createLike(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a like on a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteLike(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get likes for a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getLikes(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the commits for the specified iteration of a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the iteration from which to get the commits.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Maximum number of commits to return. The maximum number of commits that can be returned per batch is 500.\r\n     * @param {number} skip - Number of commits to skip.\r\n     */\r\n    getPullRequestIterationCommits(repositoryId, pullRequestId, iterationId, project, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"e7ea0883-095f-4926-b5fb-f24691c26fb9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the commits for the specified pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestCommits(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"52823034-34a8-4576-922c-8d8b77e9e4c4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a pull request by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestConflict(repositoryId, pullRequestId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository of the Pull Request.\r\n     * @param {number} pullRequestId - The pull request ID.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Conflicts to skip.\r\n     * @param {number} top - Conflicts to return after skip.\r\n     * @param {boolean} includeObsolete - Includes obsolete conflicts.\r\n     * @param {boolean} excludeResolved - Excludes conflicts already resolved.\r\n     * @param {boolean} onlyResolved - Returns only the conflicts that are resolved.\r\n     */\r\n    getPullRequestConflicts(repositoryId, pullRequestId, project, skip, top, includeObsolete, excludeResolved, onlyResolved) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeObsolete: includeObsolete,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestConflict(conflict, repositoryId, pullRequestId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestConflicts(conflictUpdates, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve the changes made in a pull request between two iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration. <br /> Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch. Allowed values are between 1 and the maximum iteration on this pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.\r\n     * @param {number} skip - Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.\r\n     * @param {number} compareTo - ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches\r\n     */\r\n    getPullRequestIterationChanges(repositoryId, pullRequestId, iterationId, project, top, skip, compareTo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$compareTo': compareTo,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4216bdcf-b6b1-4d59-8b82-c34cc183fc8b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIterationChanges, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specified iteration for a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration to return.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIteration(repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d43911ee-6958-46b0-a42b-8445b8a0d004\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the list of iterations for the specified pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeCommits - If true, include the commits associated with each iteration in the response.\r\n     */\r\n    getPullRequestIterations(repositoryId, pullRequestId, project, includeCommits) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    includeCommits: includeCommits,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"d43911ee-6958-46b0-a42b-8445b8a0d004\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestIterationStatus(status, repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, status, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete pull request iteration status.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the statuses associated with a pull request iteration.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIterationStatuses(repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update pull request iteration statuses collection. The only supported operation type is `remove`.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestIterationStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a label for a specified pull request. The only required field is the name of the new label.\r\n     *\r\n     * @param {TfsCoreInterfaces.WebApiCreateTagRequestData} label - Label to assign to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    createPullRequestLabel(label, repositoryId, pullRequestId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, label, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a label from the set of those assigned to the pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} labelIdOrName - The name or ID of the label requested.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    deletePullRequestLabels(repositoryId, pullRequestId, labelIdOrName, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    labelIdOrName: labelIdOrName\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a single label that has been assigned to a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} labelIdOrName - The name or ID of the label requested.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    getPullRequestLabel(repositoryId, pullRequestId, labelIdOrName, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    labelIdOrName: labelIdOrName\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the labels assigned to a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    getPullRequestLabels(repositoryId, pullRequestId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get external properties of the pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestProperties(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"48a52185-5b9e-4736-9dc1-bb1e2feac80b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Properties to add, replace or remove in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestProperties(customHeaders, patchDocument, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"48a52185-5b9e-4736-9dc1-bb1e2feac80b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -> pull requests.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestQuery} queries - The list of queries to perform.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestQuery(queries, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b3a6eebe-9cf0-49ea-b6cb-1a4c5f5007b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queries, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a reviewer to a pull request or cast a vote.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add reviewers to a pull request.\r\n     *\r\n     * @param {VSSInterfaces.IdentityRef[]} reviewers - Reviewers to add to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestReviewers(reviewers, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, reviewers, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add an unmaterialized identity to the reviewers of a pull request.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer to add to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createUnmaterializedPullRequestReviewer(reviewer, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Remove a reviewer from a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer to remove.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a particular reviewer on a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve the reviewers for a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestReviewers(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Edit a reviewer entry. These fields are patchable: isFlagged, hasDeclined\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer data.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote[]} patchVotes - IDs of the reviewers whose votes will be reset to zero\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestReviewers(patchVotes, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchVotes, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request.\r\n     *\r\n     * @param {number} pullRequestId - The ID of the pull request to retrieve.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestById(pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"01a46dea-7d46-4d40-bc84-319e7c260d99\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all pull requests matching a specified criteria.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {number} top - The number of pull requests to retrieve.\r\n     */\r\n    getPullRequestsByProject(project, searchCriteria, maxCommentLength, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"a5d28130-9cd2-40fa-9f08-902e7daa9efb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequest} gitPullRequestToCreate - The pull request to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} supportsIterations - If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.\r\n     */\r\n    createPullRequest(gitPullRequestToCreate, repositoryId, project, supportsIterations) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    supportsIterations: supportsIterations,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitPullRequestToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - The ID of the pull request to retrieve.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - Not used.\r\n     * @param {number} top - Not used.\r\n     * @param {boolean} includeCommits - If true, the pull request will be returned with the associated commits.\r\n     * @param {boolean} includeWorkItemRefs - If true, the pull request will be returned with the associated work item references.\r\n     */\r\n    getPullRequest(repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeCommits: includeCommits,\r\n                    includeWorkItemRefs: includeWorkItemRefs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all pull requests matching a specified criteria.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {number} top - The number of pull requests to retrieve.\r\n     */\r\n    getPullRequests(repositoryId, searchCriteria, project, maxCommentLength, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a pull request\r\n     *\r\n     * @param {GitInterfaces.GitPullRequest} gitPullRequestToUpdate - The pull request content that should be updated.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequest(gitPullRequestToUpdate, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, gitPullRequestToUpdate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Sends an e-mail notification about a specific pull request to a set of recipients\r\n     *\r\n     * @param {GitInterfaces.ShareNotificationContext} userMessage\r\n     * @param {string} repositoryId - ID of the git repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    sharePullRequest(userMessage, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"696f3a82-47c9-487f-9117-b9d00972ca84\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, userMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request status.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestStatus(status, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, status, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete pull request status.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestStatus(repositoryId, pullRequestId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestStatus(repositoryId, pullRequestId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the statuses associated with a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestStatuses(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update pull request statuses collection. The only supported operation type is `remove`.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a comment on a specific thread in a pull request (up to 500 comments can be created per thread).\r\n     *\r\n     * @param {GitInterfaces.Comment} comment - The comment to create. Comments can be up to 150,000 characters.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createComment(comment, repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, comment, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteComment(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getComment(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all comments associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getComments(repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.Comment} comment - The comment content that should be updated. Comments can be up to 150,000 characters.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateComment(comment, repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, comment, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread to create. Thread must contain at least one comment.\r\n     * @param {string} repositoryId - Repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createThread(commentThread, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, commentThread, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} iteration - If specified, thread position will be tracked using this iteration as the right side of the diff.\r\n     * @param {number} baseIteration - If specified, thread position will be tracked using this iteration as the left side of the diff.\r\n     */\r\n    getPullRequestThread(repositoryId, pullRequestId, threadId, project, iteration, baseIteration) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                let queryValues = {\r\n                    '$iteration': iteration,\r\n                    '$baseIteration': baseIteration,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all threads in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} iteration - If specified, thread positions will be tracked using this iteration as the right side of the diff.\r\n     * @param {number} baseIteration - If specified, thread positions will be tracked using this iteration as the left side of the diff.\r\n     */\r\n    getThreads(repositoryId, pullRequestId, project, iteration, baseIteration) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    '$iteration': iteration,\r\n                    '$baseIteration': baseIteration,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread content that should be updated.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateThread(commentThread, repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, commentThread, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a list of work items associated with a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestWorkItemRefs(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"0a637fcc-5370-4ce8-b0e8-98091f5f9482\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Push changes to the repository.\r\n     *\r\n     * @param {GitInterfaces.GitPush} push\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPush(push, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, push, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a particular push.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} pushId - ID of the push.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} includeCommits - The number of commits to include in the result.\r\n     * @param {boolean} includeRefUpdates - If true, include the list of refs that were updated by the push.\r\n     */\r\n    getPush(repositoryId, pushId, project, includeCommits, includeRefUpdates) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pushId: pushId\r\n                };\r\n                let queryValues = {\r\n                    includeCommits: includeCommits,\r\n                    includeRefUpdates: includeRefUpdates,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves pushes associated with the specified repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Number of pushes to skip.\r\n     * @param {number} top - Number of pushes to return.\r\n     * @param {GitInterfaces.GitPushSearchCriteria} searchCriteria - Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.\r\n     */\r\n    getPushes(repositoryId, project, skip, top, searchCriteria) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    searchCriteria: searchCriteria,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Destroy (hard delete) a soft-deleted Git repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     */\r\n    deleteRepositoryFromRecycleBin(project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve soft-deleted git repositories from the recycle bin.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRecycleBinRepositories(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.\r\n     *\r\n     * @param {GitInterfaces.GitRecycleBinRepositoryDetails} repositoryDetails\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     */\r\n    restoreRepositoryFromRecycleBin(repositoryDetails, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, repositoryDetails, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queries the provided repository for its refs and returns them.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} filter - [optional] A filter to apply to the refs (starts with).\r\n     * @param {boolean} includeLinks - [optional] Specifies if referenceLinks should be included in the result. default is false.\r\n     * @param {boolean} includeStatuses - [optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.\r\n     * @param {boolean} includeMyBranches - [optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.\r\n     * @param {boolean} latestStatusesOnly - [optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.\r\n     * @param {boolean} peelTags - [optional] Annotated tags will populate the PeeledObjectId property. default is false.\r\n     * @param {string} filterContains - [optional] A filter to apply to the refs (contains).\r\n     */\r\n    getRefs(repositoryId, project, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter,\r\n                    includeLinks: includeLinks,\r\n                    includeStatuses: includeStatuses,\r\n                    includeMyBranches: includeMyBranches,\r\n                    latestStatusesOnly: latestStatusesOnly,\r\n                    peelTags: peelTags,\r\n                    filterContains: filterContains,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Lock or Unlock a branch.\r\n     *\r\n     * @param {GitInterfaces.GitRefUpdate} newRefInfo - The ref update action (lock/unlock) to perform\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} filter - The name of the branch to lock/unlock\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.\r\n     */\r\n    updateRef(newRefInfo, repositoryId, filter, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filter == null) {\r\n                throw new TypeError('filter can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter,\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newRefInfo, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creating, updating, or deleting refs(branches).\r\n     *\r\n     * @param {GitInterfaces.GitRefUpdate[]} refUpdates - List of ref updates to attempt to perform\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.\r\n     */\r\n    updateRefs(refUpdates, repositoryId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, refUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a ref favorite\r\n     *\r\n     * @param {GitInterfaces.GitRefFavorite} favorite - The ref favorite to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createFavorite(favorite, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, favorite, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the refs favorite specified\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} favoriteId - The Id of the ref favorite to delete.\r\n     */\r\n    deleteRefFavorite(project, favoriteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    favoriteId: favoriteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the refs favorite for a favorite Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} favoriteId - The Id of the requested ref favorite.\r\n     */\r\n    getRefFavorite(project, favoriteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    favoriteId: favoriteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the refs favorites for a repo and an identity.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The id of the repository.\r\n     * @param {string} identityId - The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.\r\n     */\r\n    getRefFavorites(project, repositoryId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    repositoryId: repositoryId,\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a git repository in a team project.\r\n     *\r\n     * @param {GitInterfaces.GitRepositoryCreateOptions} gitRepositoryToCreate - Specify the repo name, team project and/or parent repository. Team project information can be omitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} sourceRef - [optional] Specify the source refs to use while creating a fork repo\r\n     */\r\n    createRepository(gitRepositoryToCreate, project, sourceRef) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    sourceRef: sourceRef,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitRepositoryToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a git repository\r\n     *\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteRepository(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - [optional] True to include reference links. The default value is false.\r\n     * @param {boolean} includeAllUrls - [optional] True to include all remote URLs. The default value is false.\r\n     * @param {boolean} includeHidden - [optional] True to include hidden repositories. The default value is false.\r\n     */\r\n    getRepositories(project, includeLinks, includeAllUrls, includeHidden) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                    includeAllUrls: includeAllUrls,\r\n                    includeHidden: includeHidden,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a git repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRepository(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a git repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {boolean} includeParent - True to include parent repository. Only available in authenticated calls.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRepositoryWithParent(repositoryId, includeParent, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (includeParent == null) {\r\n                throw new TypeError('includeParent can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    includeParent: includeParent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the Git repository with either a new repo name or a new default branch.\r\n     *\r\n     * @param {GitInterfaces.GitRepository} newRepositoryInfo - Specify a new repo name or a new default branch of the repository\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRepository(newRepositoryInfo, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newRepositoryInfo, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a revert by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRevertConflict(repositoryId, revertId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a revert\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     * @param {boolean} excludeResolved\r\n     * @param {boolean} onlyResolved\r\n     * @param {boolean} includeObsolete\r\n     */\r\n    getRevertConflicts(repositoryId, revertId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                    includeObsolete: includeObsolete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRevertConflict(conflict, repositoryId, revertId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRevertConflicts(conflictUpdates, repositoryId, revertId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitAsyncRefOperationParameters} revertToCreate\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    createRevert(revertToCreate, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, revertToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a revert operation by revert Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} revertId - ID of the revert operation.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    getRevert(project, revertId, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    revertId: revertId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a revert operation for a specific branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the revert operation.\r\n     */\r\n    getRevertForRefName(project, repositoryId, refName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (refName == null) {\r\n                throw new TypeError('refName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    refName: refName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create Git commit status.\r\n     *\r\n     * @param {GitInterfaces.GitStatus} gitCommitStatusToCreate - Git commit status object to create.\r\n     * @param {string} commitId - ID of the Git commit.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createCommitStatus(gitCommitStatusToCreate, commitId, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"428dd4fb-fda5-4722-af02-9313b80305da\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitCommitStatusToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get statuses associated with the Git commit.\r\n     *\r\n     * @param {string} commitId - ID of the Git commit.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Optional. The number of statuses to retrieve. Default is 1000.\r\n     * @param {number} skip - Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {boolean} latestOnly - The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.\r\n     */\r\n    getStatuses(commitId, repositoryId, project, top, skip, latestOnly) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                    latestOnly: latestOnly,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"428dd4fb-fda5-4722-af02-9313b80305da\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request suggestion for a particular repository or team project.\r\n     *\r\n     * @param {string} repositoryId - ID of the git repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getSuggestions(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"9393b4fb-4445-4919-972b-9ad16f442d83\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.\r\n     *\r\n     * @param {string} repositoryId - Repository Id.\r\n     * @param {string} sha1 - SHA1 hash of the tree object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project Id.\r\n     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.\r\n     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.\r\n     */\r\n    getTree(repositoryId, sha1, project, projectId, recursive, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                    recursive: recursive,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"729f6437-6f92-44ec-8bee-273a7111063c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitTreeRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.\r\n     *\r\n     * @param {string} repositoryId - Repository Id.\r\n     * @param {string} sha1 - SHA1 hash of the tree object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project Id.\r\n     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.\r\n     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.\r\n     */\r\n    getTreeZip(repositoryId, sha1, project, projectId, recursive, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                    recursive: recursive,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"git\", \"729f6437-6f92-44ec-8bee-273a7111063c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nGitApi.RESOURCE_AREA_ID = \"4e080c62-fa21-4fbc-8fef-2a10a2b38049\";\r\nexports.GitApi = GitApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst LocationsInterfaces = require(\"./interfaces/LocationsInterfaces\");\r\nclass LocationsApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Locations-api', options);\r\n    }\r\n    /**\r\n     * This was copied and adapted from TeamFoundationConnectionService.Connect()\r\n     *\r\n     * @param {VSSInterfaces.ConnectOptions} connectOptions\r\n     * @param {number} lastChangeId - Obsolete 32-bit LastChangeId\r\n     * @param {number} lastChangeId64 - Non-truncated 64-bit LastChangeId\r\n     */\r\n    getConnectionData(connectOptions, lastChangeId, lastChangeId64) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    connectOptions: connectOptions,\r\n                    lastChangeId: lastChangeId,\r\n                    lastChangeId64: lastChangeId64,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"00d9565f-ed9c-4a06-9a50-00e7896ccab4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ConnectionData, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} areaId\r\n     * @param {string} enterpriseName\r\n     * @param {string} organizationName\r\n     */\r\n    getResourceArea(areaId, enterpriseName, organizationName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    areaId: areaId\r\n                };\r\n                let queryValues = {\r\n                    enterpriseName: enterpriseName,\r\n                    organizationName: organizationName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} areaId\r\n     * @param {string} hostId\r\n     */\r\n    getResourceAreaByHost(areaId, hostId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (hostId == null) {\r\n                throw new TypeError('hostId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    areaId: areaId\r\n                };\r\n                let queryValues = {\r\n                    hostId: hostId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} enterpriseName\r\n     * @param {string} organizationName\r\n     */\r\n    getResourceAreas(enterpriseName, organizationName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    enterpriseName: enterpriseName,\r\n                    organizationName: organizationName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} hostId\r\n     */\r\n    getResourceAreasByHost(hostId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (hostId == null) {\r\n                throw new TypeError('hostId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    hostId: hostId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} serviceType\r\n     * @param {string} identifier\r\n     */\r\n    deleteServiceDefinition(serviceType, identifier) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType,\r\n                    identifier: identifier\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Finds a given service definition.\r\n     *\r\n     * @param {string} serviceType\r\n     * @param {string} identifier\r\n     * @param {boolean} allowFaultIn - If true, we will attempt to fault in a host instance mapping if in SPS.\r\n     * @param {boolean} previewFaultIn - If true, we will calculate and return a host instance mapping, but not persist it.\r\n     */\r\n    getServiceDefinition(serviceType, identifier, allowFaultIn, previewFaultIn) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType,\r\n                    identifier: identifier\r\n                };\r\n                let queryValues = {\r\n                    allowFaultIn: allowFaultIn,\r\n                    previewFaultIn: previewFaultIn,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} serviceType\r\n     */\r\n    getServiceDefinitions(serviceType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {VSSInterfaces.VssJsonCollectionWrapperV<LocationsInterfaces.ServiceDefinition[]>} serviceDefinitions\r\n     */\r\n    updateServiceDefinitions(serviceDefinitions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, serviceDefinitions, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.LocationsApi = LocationsApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst NotificationInterfaces = require(\"./interfaces/NotificationInterfaces\");\r\nconst VSSInterfaces = require(\"./interfaces/common/VSSInterfaces\");\r\nclass NotificationApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Notification-api', options);\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.BatchNotificationOperation} operation\r\n     */\r\n    performBatchNotificationOperations(operation) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"8f3c6ab2-5bae-4537-b16e-f84e0955599e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, operation, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of diagnostic logs for this service.\r\n     *\r\n     * @param {string} source - ID specifying which type of logs to check diagnostics for.\r\n     * @param {string} entryId - The ID of the specific log to query for.\r\n     * @param {Date} startTime - Start time for the time range to query in.\r\n     * @param {Date} endTime - End time for the time range to query in.\r\n     */\r\n    listLogs(source, entryId, startTime, endTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    source: source,\r\n                    entryId: entryId\r\n                };\r\n                let queryValues = {\r\n                    startTime: startTime,\r\n                    endTime: endTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"991842f3-eb16-4aea-ac81-81353ef2b75c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.INotificationDiagnosticLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the diagnostics settings for a subscription.\r\n     *\r\n     * @param {string} subscriptionId - The id of the notifications subscription.\r\n     */\r\n    getSubscriptionDiagnostics(subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"20f1929d-4be7-4c2e-a74e-d47640ff3418\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the diagnostics settings for a subscription.\r\n     *\r\n     * @param {NotificationInterfaces.UpdateSubscripitonDiagnosticsParameters} updateParameters\r\n     * @param {string} subscriptionId - The id of the notifications subscription.\r\n     */\r\n    updateSubscriptionDiagnostics(updateParameters, subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"20f1929d-4be7-4c2e-a74e-d47640ff3418\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Publish an event. This request must be directed to the service \"extmgmt\".\r\n     *\r\n     * @param {VSSInterfaces.VssNotificationEvent} notificationEvent\r\n     */\r\n    publishEvent(notificationEvent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"14c57b7a-c0e6-4555-9f51-e067188fdd8e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, notificationEvent, options);\r\n                    let ret = this.formatResponse(res.result, VSSInterfaces.TypeInfo.VssNotificationEvent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Tranform a notification event.\r\n     *\r\n     * @param {NotificationInterfaces.EventTransformRequest} transformRequest - Object to be transformed.\r\n     */\r\n    transformEvent(transformRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"9463a800-1b44-450e-9083-f948ea174b45\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, transformRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.FieldValuesQuery} inputValuesQuery\r\n     * @param {string} eventType\r\n     */\r\n    queryEventTypes(inputValuesQuery, eventType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    eventType: eventType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"b5bbdd21-c178-4398-b6db-0166d910028a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, inputValuesQuery, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventField, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific event type.\r\n     *\r\n     * @param {string} eventType - The ID of the event type.\r\n     */\r\n    getEventType(eventType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    eventType: eventType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List available event types for this service. Optionally filter by only event types for the specified publisher.\r\n     *\r\n     * @param {string} publisherId - Limit to event types for this publisher\r\n     */\r\n    listEventTypes(publisherId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    publisherId: publisherId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} notificationId\r\n     */\r\n    getNotificationReasons(notificationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    notificationId: notificationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"19824fa9-1c76-40e6-9cce-cf0b9ca1cb60\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} notificationIds\r\n     */\r\n    listNotificationReasons(notificationIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    notificationIds: notificationIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"19824fa9-1c76-40e6-9cce-cf0b9ca1cb60\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getSettings() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"cbe076d8-2803-45ff-8d8d-44653686ea2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.NotificationAdminSettingsUpdateParameters} updateParameters\r\n     */\r\n    updateSettings(updateParameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"cbe076d8-2803-45ff-8d8d-44653686ea2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get delivery preferences of a notifications subscriber.\r\n     *\r\n     * @param {string} subscriberId - ID of the user or group.\r\n     */\r\n    getSubscriber(subscriberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriberId: subscriberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"4d5caff1-25ba-430b-b808-7a1f352cc197\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update delivery preferences of a notifications subscriber.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriberUpdateParameters} updateParameters\r\n     * @param {string} subscriberId - ID of the user or group.\r\n     */\r\n    updateSubscriber(updateParameters, subscriberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriberId: subscriberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"4d5caff1-25ba-430b-b808-7a1f352cc197\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query for subscriptions. A subscription is returned if it matches one or more of the specified conditions.\r\n     *\r\n     * @param {NotificationInterfaces.SubscriptionQuery} subscriptionQuery\r\n     */\r\n    querySubscriptions(subscriptionQuery) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"6864db85-08c0-4006-8e8e-cc1bebe31675\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, subscriptionQuery, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new subscription.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriptionCreateParameters} createParameters\r\n     */\r\n    createSubscription(createParameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a subscription.\r\n     *\r\n     * @param {string} subscriptionId\r\n     */\r\n    deleteSubscription(subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a notification subscription by its ID.\r\n     *\r\n     * @param {string} subscriptionId\r\n     * @param {NotificationInterfaces.SubscriptionQueryFlags} queryFlags\r\n     */\r\n    getSubscription(subscriptionId, queryFlags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                let queryValues = {\r\n                    queryFlags: queryFlags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of notification subscriptions, either by subscription IDs or by all subscriptions for a given user or group.\r\n     *\r\n     * @param {string} targetId - User or Group ID\r\n     * @param {string[]} ids - List of subscription IDs\r\n     * @param {NotificationInterfaces.SubscriptionQueryFlags} queryFlags\r\n     */\r\n    listSubscriptions(targetId, ids, queryFlags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    targetId: targetId,\r\n                    ids: ids && ids.join(\",\"),\r\n                    queryFlags: queryFlags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an existing subscription. Depending on the type of subscription and permissions, the caller can update the description, filter settings, channel (delivery) settings and more.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriptionUpdateParameters} updateParameters\r\n     * @param {string} subscriptionId\r\n     */\r\n    updateSubscription(updateParameters, subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get available subscription templates.\r\n     *\r\n     */\r\n    getSubscriptionTemplates() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"fa5d24ba-7484-4f3d-888d-4ec6b1974082\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriptionTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the specified user's settings for the specified subscription. This API is typically used to opt in or out of a shared subscription. User settings can only be applied to shared subscriptions, like team subscriptions or default subscriptions.\r\n     *\r\n     * @param {NotificationInterfaces.SubscriptionUserSettings} userSettings\r\n     * @param {string} subscriptionId\r\n     * @param {string} userId - ID of the user\r\n     */\r\n    updateSubscriptionUserSettings(userSettings, subscriptionId, userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId,\r\n                    userId: userId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"notification\", \"ed5a3dff-aeb5-41b1-b4f7-89e66e58b62e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, userSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.NotificationApi = NotificationApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst PolicyInterfaces = require(\"./interfaces/PolicyInterfaces\");\r\nclass PolicyApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Policy-api', options);\r\n    }\r\n    /**\r\n     * Create a policy configuration of a given policy type.\r\n     *\r\n     * @param {PolicyInterfaces.PolicyConfiguration} configuration - The policy configuration to create.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId\r\n     */\r\n    createPolicyConfiguration(configuration, project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, configuration, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a policy configuration by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the policy configuration to delete.\r\n     */\r\n    deletePolicyConfiguration(project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a policy configuration by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the policy configuration\r\n     */\r\n    getPolicyConfiguration(project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of policy configurations in a project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope - [Provided for legacy reasons] The scope on which a subset of policies is defined.\r\n     * @param {string} policyType - Filter returned policies to only this type\r\n     */\r\n    getPolicyConfigurations(project, scope, policyType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    policyType: policyType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a policy configuration by its ID.\r\n     *\r\n     * @param {PolicyInterfaces.PolicyConfiguration} configuration - The policy configuration to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the existing policy configuration to be updated.\r\n     */\r\n    updatePolicyConfiguration(configuration, project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, configuration, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the present evaluation state of a policy.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} evaluationId - ID of the policy evaluation to be retrieved.\r\n     */\r\n    getPolicyEvaluation(project, evaluationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    evaluationId: evaluationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"46aecb7a-5d2c-4647-897b-0209505a9fe4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Requeue the policy evaluation.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} evaluationId - ID of the policy evaluation to be retrieved.\r\n     */\r\n    requeuePolicyEvaluation(project, evaluationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    evaluationId: evaluationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"46aecb7a-5d2c-4647-897b-0209505a9fe4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a list of all the policy evaluation statuses for a specific pull request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} artifactId - A string which uniquely identifies the target of a policy evaluation.\r\n     * @param {boolean} includeNotApplicable - Some policies might determine that they do not apply to a specific pull request. Setting this parameter to true will return evaluation records even for policies which don't apply to this pull request.\r\n     * @param {number} top - The number of policy evaluation records to retrieve.\r\n     * @param {number} skip - The number of policy evaluation records to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     */\r\n    getPolicyEvaluations(project, artifactId, includeNotApplicable, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactId == null) {\r\n                throw new TypeError('artifactId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    artifactId: artifactId,\r\n                    includeNotApplicable: includeNotApplicable,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"c23ddff5-229c-4d04-a80b-0fdce9f360c8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a specific revision of a given policy by ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - The policy configuration ID.\r\n     * @param {number} revisionId - The revision ID.\r\n     */\r\n    getPolicyConfigurationRevision(project, configurationId, revisionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId,\r\n                    revisionId: revisionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"fe1e68a2-60d3-43cb-855b-85e41ae97c95\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all revisions for a given policy.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - The policy configuration ID.\r\n     * @param {number} top - The number of revisions to retrieve.\r\n     * @param {number} skip - The number of revisions to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     */\r\n    getPolicyConfigurationRevisions(project, configurationId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"fe1e68a2-60d3-43cb-855b-85e41ae97c95\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a specific policy type by ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} typeId - The policy ID.\r\n     */\r\n    getPolicyType(project, typeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    typeId: typeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"44096322-2d3d-466a-bb30-d1b7de69f61f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all available policy types.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPolicyTypes(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"policy\", \"44096322-2d3d-466a-bb30-d1b7de69f61f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nPolicyApi.RESOURCE_AREA_ID = \"fb13a388-40dd-4a04-b530-013a739c72ef\";\r\nexports.PolicyApi = PolicyApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ProfileInterfaces = require(\"./interfaces/ProfileInterfaces\");\r\nclass ProfileApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Profile-api', options);\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    deleteProfileAttribute(id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    getProfileAttribute(id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} partition\r\n    * @param {string} modifiedSince\r\n    * @param {string} modifiedAfterRevision\r\n    * @param {boolean} withCoreAttributes\r\n    * @param {string} coreAttributes\r\n    */\r\n    getProfileAttributes(id, partition, modifiedSince, modifiedAfterRevision, withCoreAttributes, coreAttributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    partition: partition,\r\n                    modifiedSince: modifiedSince,\r\n                    modifiedAfterRevision: modifiedAfterRevision,\r\n                    withCoreAttributes: withCoreAttributes,\r\n                    coreAttributes: coreAttributes,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    setProfileAttribute(container, id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, container, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {VSSInterfaces.VssJsonCollectionWrapperV<ProfileInterfaces.ProfileAttributeBase<any>[]>} attributesCollection\r\n    * @param {string} id\r\n    */\r\n    setProfileAttributes(attributesCollection, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, attributesCollection, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} size\r\n    * @param {string} format\r\n    */\r\n    getAvatar(id, size, format) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    size: size,\r\n                    format: format,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    * @param {string} size\r\n    * @param {string} format\r\n    * @param {string} displayName\r\n    */\r\n    getAvatarPreview(container, id, size, format, displayName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    size: size,\r\n                    format: format,\r\n                    displayName: displayName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, container, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    */\r\n    resetAvatar(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    */\r\n    setAvatar(container, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, container, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Lookup up country/region based on provided IPv4, null if using the remote IPv4 address.\r\n    *\r\n    * @param {string} ipaddress - IPv4 address to be used for reverse lookup, null if using RemoteIPAddress in request context\r\n    */\r\n    getGeoRegion(ipaddress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    ipaddress: ipaddress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"3bcda9c0-3078-48a5-a1e0-83bd05931ad0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Create profile\r\n    *\r\n    * @param {ProfileInterfaces.CreateProfileContext} createProfileContext - Context for profile creation\r\n    * @param {boolean} autoCreate - Create profile automatically\r\n    */\r\n    createProfile(createProfileContext, autoCreate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    autoCreate: autoCreate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createProfileContext, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {boolean} details\r\n    * @param {boolean} withAttributes\r\n    * @param {string} partition\r\n    * @param {string} coreAttributes\r\n    * @param {boolean} forceRefresh\r\n    */\r\n    getProfile(id, details, withAttributes, partition, coreAttributes, forceRefresh) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    details: details,\r\n                    withAttributes: withAttributes,\r\n                    partition: partition,\r\n                    coreAttributes: coreAttributes,\r\n                    forceRefresh: forceRefresh,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Update profile\r\n    *\r\n    * @param {ProfileInterfaces.Profile} profile - Update profile\r\n    * @param {string} id - Profile ID\r\n    */\r\n    updateProfile(profile, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, profile, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    */\r\n    getRegions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"92d8d1c9-26b8-4774-a929-d640a73da524\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    */\r\n    getSupportedLcids() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"d5bd1aa6-c269-4bcd-ad32-75fa17475584\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {boolean} includeAvatar\r\n    */\r\n    getUserDefaults(includeAvatar) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeAvatar: includeAvatar,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"b583a356-1da7-4237-9f4c-1deb2edbc7e8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    */\r\n    refreshUserDefaults(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"b583a356-1da7-4237-9f4c-1deb2edbc7e8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.ProfileApi = ProfileApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ProjectAnalysisInterfaces = require(\"./interfaces/ProjectAnalysisInterfaces\");\r\nclass ProjectAnalysisApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-ProjectAnalysis-api', options);\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getProjectLanguageAnalytics(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"projectanalysis\", \"5b02a779-1867-433f-90b7-d23ed5e33e57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectLanguageAnalytics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} fromDate\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType\r\n     */\r\n    getProjectActivityMetrics(project, fromDate, aggregationType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"projectanalysis\", \"e40ae584-9ea6-4f06-a7c7-6284651b466b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectActivityMetrics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves git activity metrics for repositories matching a specified criteria.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} fromDate - Date from which, the trends are to be fetched.\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType - Bucket size on which, trends are to be aggregated.\r\n     * @param {number} skip - The number of repositories to ignore.\r\n     * @param {number} top - The number of repositories for which activity metrics are to be retrieved.\r\n     */\r\n    getGitRepositoriesActivityMetrics(project, fromDate, aggregationType, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            if (skip == null) {\r\n                throw new TypeError('skip can not be null or undefined');\r\n            }\r\n            if (top == null) {\r\n                throw new TypeError('top can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"projectanalysis\", \"df7fbbca-630a-40e3-8aa3-7a3faf66947e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId\r\n     * @param {Date} fromDate\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType\r\n     */\r\n    getRepositoryActivityMetrics(project, repositoryId, fromDate, aggregationType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"projectanalysis\", \"df7fbbca-630a-40e3-8aa3-7a3faf66947e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nProjectAnalysisApi.RESOURCE_AREA_ID = \"7658fa33-b1bf-4580-990f-fac5896773d3\";\r\nexports.ProjectAnalysisApi = ProjectAnalysisApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ReleaseInterfaces = require(\"./interfaces/ReleaseInterfaces\");\r\nclass ReleaseApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Release-api', options);\r\n    }\r\n    /**\r\n     * Returns the artifact details that automation agent requires\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getAgentArtifactDefinitions(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"f2571c27-bf50-4938-b396-32d109ddef26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AgentArtifactDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of approvals\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} assignedToFilter - Approvals assigned to this user.\r\n     * @param {ReleaseInterfaces.ApprovalStatus} statusFilter - Approvals with this status. Default is 'pending'.\r\n     * @param {number[]} releaseIdsFilter - Approvals for release id(s) mentioned in the filter. Multiple releases can be mentioned by separating them with ',' e.g. releaseIdsFilter=1,2,3,4.\r\n     * @param {ReleaseInterfaces.ApprovalType} typeFilter - Approval with this type.\r\n     * @param {number} top - Number of approvals to get. Default is 50.\r\n     * @param {number} continuationToken - Gets the approvals after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder - Gets the results in the defined order of created approvals. Default is 'descending'.\r\n     * @param {boolean} includeMyGroupApprovals - 'true' to include my group approvals. Default is 'false'.\r\n     */\r\n    getApprovals(project, assignedToFilter, statusFilter, releaseIdsFilter, typeFilter, top, continuationToken, queryOrder, includeMyGroupApprovals) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    assignedToFilter: assignedToFilter,\r\n                    statusFilter: statusFilter,\r\n                    releaseIdsFilter: releaseIdsFilter && releaseIdsFilter.join(\",\"),\r\n                    typeFilter: typeFilter,\r\n                    top: top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                    includeMyGroupApprovals: includeMyGroupApprovals,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Release\", \"b47c6458-e73b-47cb-a770-4df1e8813a91\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get approval history.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalStepId - Id of the approval.\r\n     */\r\n    getApprovalHistory(project, approvalStepId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalStepId: approvalStepId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Release\", \"250c7158-852e-4130-a00f-a0cce9b72d05\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an approval.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalId - Id of the approval.\r\n     * @param {boolean} includeHistory - 'true' to include history of the approval. Default is 'false'.\r\n     */\r\n    getApproval(project, approvalId, includeHistory) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalId: approvalId\r\n                };\r\n                let queryValues = {\r\n                    includeHistory: includeHistory,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Release\", \"9328e074-59fb-465a-89d9-b09c82ee5109\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update status of an approval\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseApproval} approval - ReleaseApproval object having status, approver and comments.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalId - Id of the approval.\r\n     */\r\n    updateReleaseApproval(approval, project, approvalId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalId: approvalId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Release\", \"9328e074-59fb-465a-89d9-b09c82ee5109\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, approval, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.ReleaseApproval[]} approvals\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseApprovals(approvals, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.3\", \"Release\", \"c957584a-82aa-4131-8222-6d47f78bfa7a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, approvals, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a task attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} recordId - Record Id of attachment.\r\n     * @param {string} type - Type of the attachment.\r\n     * @param {string} name - Name of the attachment.\r\n     */\r\n    getTaskAttachmentContent(project, releaseId, environmentId, attemptId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c4071f6d-3697-46ca-858e-8b10ff09e52f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release task attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} planId - Plan Id of the deploy phase.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} recordId - Record Id of attachment.\r\n     * @param {string} type - Type of the attachment.\r\n     * @param {string} name - Name of the attachment.\r\n     */\r\n    getReleaseTaskAttachmentContent(project, releaseId, environmentId, attemptId, planId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"60b86efb-7b8c-4853-8f9f-aa142b77b479\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the task attachments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} type - Type of the attachment.\r\n     */\r\n    getTaskAttachments(project, releaseId, environmentId, attemptId, timelineId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"214111ee-2415-4df2-8ed2-74417f7d61f9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the release task attachments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} planId - Plan Id of the deploy phase.\r\n     * @param {string} type - Type of the attachment.\r\n     */\r\n    getReleaseTaskAttachments(project, releaseId, environmentId, attemptId, planId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    planId: planId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"a4d06688-0dfa-4895-82a5-f43ec9452306\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} artifactType\r\n     * @param {string} sourceId\r\n     * @param {string} artifactVersionId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAutoTriggerIssues(artifactType, sourceId, artifactVersionId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactType == null) {\r\n                throw new TypeError('artifactType can not be null or undefined');\r\n            }\r\n            if (sourceId == null) {\r\n                throw new TypeError('sourceId can not be null or undefined');\r\n            }\r\n            if (artifactVersionId == null) {\r\n                throw new TypeError('artifactVersionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    artifactType: artifactType,\r\n                    sourceId: sourceId,\r\n                    artifactVersionId: artifactVersionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c1a68497-69da-40fb-9423-cab19cfeeca9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent deployment for an environment.\r\n     *\r\n     * @param {string} projectId - The ID of the Project.\r\n     * @param {number} releaseDefinitionId - The ID of the Release Definition.\r\n     * @param {number} environmentId - The ID of the Environment.\r\n     * @param {string} branchName - The name of the branch.\r\n     */\r\n    getDeploymentBadge(projectId, releaseDefinitionId, environmentId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    environmentId: environmentId,\r\n                    branchName: branchName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"1a60a35d-b8c9-45fb-bf67-da0829711147\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} baseReleaseId\r\n     * @param {number} top\r\n     * @param {string} artifactAlias\r\n     */\r\n    getReleaseChanges(project, releaseId, baseReleaseId, top, artifactAlias) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    baseReleaseId: baseReleaseId,\r\n                    '$top': top,\r\n                    artifactAlias: artifactAlias,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"8dcf9fe9-ca37-4113-8ee1-37928e98407c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId\r\n     * @param {string[]} propertyFilters\r\n     */\r\n    getDefinitionEnvironments(project, taskGroupId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    taskGroupId: taskGroupId,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"12b5d21a-f54c-430e-a8c1-7515d196890e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a release definition\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition - release definition object to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createReleaseDefinition(releaseDefinition, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releaseDefinition, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a release definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {string} comment - Comment for deleting a release definition.\r\n     * @param {boolean} forceDelete - 'true' to automatically cancel any in-progress release deployments and proceed with release definition deletion . Default is 'false'.\r\n     */\r\n    deleteReleaseDefinition(project, definitionId, comment, forceDelete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                    forceDelete: forceDelete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definition will contain values for the specified property Ids (if they exist). If not set, properties will not be included.\r\n     */\r\n    getReleaseDefinition(project, definitionId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release definition of a given revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {number} revision - Revision number of the release definition.\r\n     */\r\n    getReleaseDefinitionRevision(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (revision == null) {\r\n                throw new TypeError('revision can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of release definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} searchText - Get release definitions with names containing searchText.\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand - The properties that should be expanded in the list of Release definitions.\r\n     * @param {string} artifactType - Release definitions with given artifactType will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.\r\n     * @param {string} artifactSourceId - Release definitions with given artifactSourceId will be returned. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json at https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.\r\n     * @param {number} top - Number of release definitions to get.\r\n     * @param {string} continuationToken - Gets the release definitions after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionQueryOrder} queryOrder - Gets the results in the defined order. Default is 'IdAscending'.\r\n     * @param {string} path - Gets the release definitions under the specified path.\r\n     * @param {boolean} isExactNameMatch - 'true'to gets the release definitions with exact match as specified in searchText. Default is 'false'.\r\n     * @param {string[]} tagFilter - A comma-delimited list of tags. Only release definitions with these tags will be returned.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definitions will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release Definition from results irrespective of whether it has property set or not.\r\n     * @param {string[]} definitionIdFilter - A comma-delimited list of release definitions to retrieve.\r\n     * @param {boolean} isDeleted - 'true' to get release definitions that has been deleted. Default is 'false'\r\n     * @param {boolean} searchTextContainsFolderName - 'true' to get the release definitions under the folder with name as specified in searchText. Default is 'false'.\r\n     */\r\n    getReleaseDefinitions(project, searchText, expand, artifactType, artifactSourceId, top, continuationToken, queryOrder, path, isExactNameMatch, tagFilter, propertyFilters, definitionIdFilter, isDeleted, searchTextContainsFolderName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    searchText: searchText,\r\n                    '$expand': expand,\r\n                    artifactType: artifactType,\r\n                    artifactSourceId: artifactSourceId,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                    path: path,\r\n                    isExactNameMatch: isExactNameMatch,\r\n                    tagFilter: tagFilter && tagFilter.join(\",\"),\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    definitionIdFilter: definitionIdFilter && definitionIdFilter.join(\",\"),\r\n                    isDeleted: isDeleted,\r\n                    searchTextContainsFolderName: searchTextContainsFolderName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a release definition.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionUndeleteParameter} releaseDefinitionUndeleteParameter - Object for undelete release definition.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition to be undeleted\r\n     */\r\n    undeleteReleaseDefinition(releaseDefinitionUndeleteParameter, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, releaseDefinitionUndeleteParameter, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a release definition.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition - Release definition object to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseDefinition(releaseDefinition, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, releaseDefinition, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     * @param {number} definitionEnvironmentId\r\n     * @param {string} createdBy\r\n     * @param {Date} minModifiedTime\r\n     * @param {Date} maxModifiedTime\r\n     * @param {ReleaseInterfaces.DeploymentStatus} deploymentStatus\r\n     * @param {ReleaseInterfaces.DeploymentOperationStatus} operationStatus\r\n     * @param {boolean} latestAttemptsOnly\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder\r\n     * @param {number} top\r\n     * @param {number} continuationToken\r\n     * @param {string} createdFor\r\n     * @param {Date} minStartedTime\r\n     * @param {Date} maxStartedTime\r\n     * @param {string} sourceBranch\r\n     */\r\n    getDeployments(project, definitionId, definitionEnvironmentId, createdBy, minModifiedTime, maxModifiedTime, deploymentStatus, operationStatus, latestAttemptsOnly, queryOrder, top, continuationToken, createdFor, minStartedTime, maxStartedTime, sourceBranch) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    definitionEnvironmentId: definitionEnvironmentId,\r\n                    createdBy: createdBy,\r\n                    minModifiedTime: minModifiedTime,\r\n                    maxModifiedTime: maxModifiedTime,\r\n                    deploymentStatus: deploymentStatus,\r\n                    operationStatus: operationStatus,\r\n                    latestAttemptsOnly: latestAttemptsOnly,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    createdFor: createdFor,\r\n                    minStartedTime: minStartedTime,\r\n                    maxStartedTime: maxStartedTime,\r\n                    sourceBranch: sourceBranch,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"b005ef73-cddc-448e-9ba2-5193bf36b19f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.DeploymentQueryParameters} queryParameters\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeploymentsForMultipleEnvironments(queryParameters, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"b005ef73-cddc-448e-9ba2-5193bf36b19f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queryParameters, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release environment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {ReleaseInterfaces.ReleaseEnvironmentExpands} expand - A property that should be expanded in the environment.\r\n     */\r\n    getReleaseEnvironment(project, releaseId, environmentId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"Release\", \"a7e426b1-03dc-48af-9dfe-c98bac612dcb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the status of a release environment\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseEnvironmentUpdateMetadata} environmentUpdateData - Environment update meta data.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     */\r\n    updateReleaseEnvironment(environmentUpdateData, project, releaseId, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.7\", \"Release\", \"a7e426b1-03dc-48af-9dfe-c98bac612dcb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, environmentUpdateData, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a definition environment template\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate} template - Definition environment template to create\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createDefinitionEnvironmentTemplate(template, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, template, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a definition environment template\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template\r\n     */\r\n    deleteDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a definition environment template\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template\r\n     */\r\n    getDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of definition environment templates\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} isDeleted - 'true' to get definition environment templates that have been deleted. Default is 'false'\r\n     */\r\n    listDefinitionEnvironmentTemplates(project, isDeleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    isDeleted: isDeleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a release definition environment template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template to be undeleted\r\n     */\r\n    undeleteReleaseDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.FavoriteItem[]} favoriteItems\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     */\r\n    createFavorites(favoriteItems, project, scope, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, favoriteItems, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     * @param {string} favoriteItemIds\r\n     */\r\n    deleteFavorites(project, scope, identityId, favoriteItemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                    favoriteItemIds: favoriteItemIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     */\r\n    getFavorites(project, scope, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} flightName\r\n     */\r\n    getFlightAssignments(flightName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    flightName: flightName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"409d301f-3046-46f3-beb9-4357fbce0a8c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new folder.\r\n     *\r\n     * @param {ReleaseInterfaces.Folder} folder - folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder.\r\n     */\r\n    createFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition folder for given folder name and path and all it's existing definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder to delete.\r\n     */\r\n    deleteFolder(project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets folders.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder.\r\n     * @param {ReleaseInterfaces.FolderPathQueryOrder} queryOrder - Gets the results in the defined order. Default is 'None'.\r\n     */\r\n    getFolders(project, path, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing folder at given existing path.\r\n     *\r\n     * @param {ReleaseInterfaces.Folder} folder - folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder to update.\r\n     */\r\n    updateFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the gate for a deployment.\r\n     *\r\n     * @param {ReleaseInterfaces.GateUpdateMetadata} gateUpdateMetadata - Metadata to patch the Release Gates.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} gateStepId - Gate step Id.\r\n     */\r\n    updateGates(gateUpdateMetadata, project, gateStepId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    gateStepId: gateStepId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"2666a539-2001-4f80-bcc7-0379956749d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, gateUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseGates, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getReleaseHistory(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"23f461c8-629a-4144-a076-3054fa5f268a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {FormInputInterfaces.InputValuesQuery} query\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getInputValues(query, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"71dd499b-317d-45ea-9134-140ea1932b5e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} sourceId\r\n     */\r\n    getIssues(project, buildId, sourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    sourceId: sourceId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"cd42261a-f5c6-41c8-9259-f078989b9f25\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets gate logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} gateId - Id of the gate.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     */\r\n    getGateLog(project, releaseId, environmentId, gateId, taskId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    gateId: gateId,\r\n                    taskId: taskId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"dec7ca5a-7f7f-4797-8bf1-8efc0dc93b28\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get logs for a release Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     */\r\n    getLogs(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"c37fbab5-214b-48e4-a55b-cb6b4f6e4038\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} attemptId - Id of the attempt.\r\n     */\r\n    getLog(project, releaseId, environmentId, taskId, attemptId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    attemptId: attemptId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"e71ba1ed-c0a4-4a28-a61f-2dd5f68cf3fd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the task log of a release as a plain text file.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} attemptId\r\n     * @param {string} timelineId\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} startLine - Starting line number for logs\r\n     * @param {number} endLine - Ending line number for logs\r\n     */\r\n    getTaskLog2(project, releaseId, environmentId, attemptId, timelineId, taskId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"2577e6c3-6999-4400-bc69-fe1d837755fe\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the task log of a release as a plain text file.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} releaseDeployPhaseId - Release deploy phase Id.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} startLine - Starting line number for logs\r\n     * @param {number} endLine - Ending line number for logs\r\n     */\r\n    getTaskLog(project, releaseId, environmentId, releaseDeployPhaseId, taskId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    releaseDeployPhaseId: releaseDeployPhaseId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"17c91af7-09fd-4256-bff1-c24ee4f73bc0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get manual intervention for a given release and manual intervention id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} manualInterventionId - Id of the manual intervention.\r\n     */\r\n    getManualIntervention(project, releaseId, manualInterventionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    manualInterventionId: manualInterventionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List all manual interventions for a given release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     */\r\n    getManualInterventions(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update manual intervention.\r\n     *\r\n     * @param {ReleaseInterfaces.ManualInterventionUpdateMetadata} manualInterventionUpdateMetadata - Meta data to update manual intervention.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} manualInterventionId - Id of the manual intervention.\r\n     */\r\n    updateManualIntervention(manualInterventionUpdateMetadata, project, releaseId, manualInterventionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    manualInterventionId: manualInterventionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, manualInterventionUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} minMetricsTime\r\n     */\r\n    getMetrics(project, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"cd1502bb-3c73-4e11-80a6-d11308dceae5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets Org pipeline release settings\r\n     *\r\n     */\r\n    getOrgPipelineReleaseSettings() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"d156c759-ca4e-492b-90d4-db03971796ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates Org pipeline release settings\r\n     *\r\n     * @param {ReleaseInterfaces.OrgPipelineReleaseSettingsUpdateParameters} newSettings\r\n     */\r\n    updateOrgPipelineReleaseSettings(newSettings) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"d156c759-ca4e-492b-90d4-db03971796ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets pipeline release settings\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPipelineReleaseSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"e816b9f4-f9fe-46ba-bdcc-a9af6abf3144\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates pipeline release settings\r\n     *\r\n     * @param {ReleaseInterfaces.ProjectPipelineReleaseSettingsUpdateParameters} newSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePipelineReleaseSettings(newSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"e816b9f4-f9fe-46ba-bdcc-a9af6abf3144\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} artifactType\r\n     * @param {string} artifactSourceId\r\n     */\r\n    getReleaseProjects(artifactType, artifactSourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactType == null) {\r\n                throw new TypeError('artifactType can not be null or undefined');\r\n            }\r\n            if (artifactSourceId == null) {\r\n                throw new TypeError('artifactSourceId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    artifactType: artifactType,\r\n                    artifactSourceId: artifactSourceId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"917ace4a-79d1-45a7-987c-7be4db4268fa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of releases\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Releases from this release definition Id.\r\n     * @param {number} definitionEnvironmentId\r\n     * @param {string} searchText - Releases with names containing searchText.\r\n     * @param {string} createdBy - Releases created by this user.\r\n     * @param {ReleaseInterfaces.ReleaseStatus} statusFilter - Releases that have this status.\r\n     * @param {number} environmentStatusFilter\r\n     * @param {Date} minCreatedTime - Releases that were created after this time.\r\n     * @param {Date} maxCreatedTime - Releases that were created before this time.\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder - Gets the results in the defined order of created date for releases. Default is descending.\r\n     * @param {number} top - Number of releases to get. Default is 50.\r\n     * @param {number} continuationToken - Gets the releases after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseExpands} expand - The property that should be expanded in the list of releases.\r\n     * @param {string} artifactTypeId - Releases with given artifactTypeId will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.\r\n     * @param {string} sourceId - Unique identifier of the artifact used. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.\r\n     * @param {string} artifactVersionId - Releases with given artifactVersionId will be returned. E.g. in case of Build artifactType, it is buildId.\r\n     * @param {string} sourceBranchFilter - Releases with given sourceBranchFilter will be returned.\r\n     * @param {boolean} isDeleted - Gets the soft deleted releases, if true.\r\n     * @param {string[]} tagFilter - A comma-delimited list of tags. Only releases with these tags will be returned.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Releases will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release from results irrespective of whether it has property set or not.\r\n     * @param {number[]} releaseIdFilter - A comma-delimited list of releases Ids. Only releases with these Ids will be returned.\r\n     * @param {string} path - Releases under this folder path will be returned\r\n     */\r\n    getReleases(project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, environmentStatusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, sourceId, artifactVersionId, sourceBranchFilter, isDeleted, tagFilter, propertyFilters, releaseIdFilter, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    definitionEnvironmentId: definitionEnvironmentId,\r\n                    searchText: searchText,\r\n                    createdBy: createdBy,\r\n                    statusFilter: statusFilter,\r\n                    environmentStatusFilter: environmentStatusFilter,\r\n                    minCreatedTime: minCreatedTime,\r\n                    maxCreatedTime: maxCreatedTime,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    '$expand': expand,\r\n                    artifactTypeId: artifactTypeId,\r\n                    sourceId: sourceId,\r\n                    artifactVersionId: artifactVersionId,\r\n                    sourceBranchFilter: sourceBranchFilter,\r\n                    isDeleted: isDeleted,\r\n                    tagFilter: tagFilter && tagFilter.join(\",\"),\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    releaseIdFilter: releaseIdFilter && releaseIdFilter.join(\",\"),\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a release.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseStartMetadata} releaseStartMetadata - Metadata to create a release.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createRelease(releaseStartMetadata, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releaseStartMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Soft delete a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {string} comment - Comment for deleting a release.\r\n     */\r\n    deleteRelease(project, releaseId, comment) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a Release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {ReleaseInterfaces.ApprovalFilters} approvalFilters - A filter which would allow fetching approval steps selectively based on whether it is automated, or manual. This would also decide whether we should fetch pre and post approval snapshots. Assumes All by default\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release will contain values for the specified property Ids (if they exist). If not set, properties will not be included.\r\n     * @param {ReleaseInterfaces.SingleReleaseExpands} expand - A property that should be expanded in the release.\r\n     * @param {number} topGateRecords - Number of release gate records to get. Default is 5.\r\n     */\r\n    getRelease(project, releaseId, approvalFilters, propertyFilters, expand, topGateRecords) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    approvalFilters: approvalFilters,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    '$expand': expand,\r\n                    '$topGateRecords': topGateRecords,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release summary of a given definition Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition to get release summary.\r\n     * @param {number} releaseCount - Count of releases to be included in summary.\r\n     * @param {boolean} includeArtifact - Include artifact details.Default is 'false'.\r\n     * @param {number[]} definitionEnvironmentIdsFilter\r\n     */\r\n    getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, definitionEnvironmentIdsFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (definitionId == null) {\r\n                throw new TypeError('definitionId can not be null or undefined');\r\n            }\r\n            if (releaseCount == null) {\r\n                throw new TypeError('releaseCount can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    releaseCount: releaseCount,\r\n                    includeArtifact: includeArtifact,\r\n                    definitionEnvironmentIdsFilter: definitionEnvironmentIdsFilter && definitionEnvironmentIdsFilter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release for a given revision number.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} definitionSnapshotRevision - Definition snapshot revision number.\r\n     */\r\n    getReleaseRevision(project, releaseId, definitionSnapshotRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (definitionSnapshotRevision == null) {\r\n                throw new TypeError('definitionSnapshotRevision can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    definitionSnapshotRevision: definitionSnapshotRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a soft deleted release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of release to be undeleted.\r\n     * @param {string} comment - Any comment for undeleting.\r\n     */\r\n    undeleteRelease(project, releaseId, comment) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (comment == null) {\r\n                throw new TypeError('comment can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a complete release object.\r\n     *\r\n     * @param {ReleaseInterfaces.Release} release - Release object for update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release to update.\r\n     */\r\n    updateRelease(release, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, release, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update few properties of a release.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseUpdateMetadata} releaseUpdateMetadata - Properties of release to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release to update.\r\n     */\r\n    updateReleaseResource(releaseUpdateMetadata, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, releaseUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the release settings\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getReleaseSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c63c3718-7cfd-41e0-b89b-81c1ca143437\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the release settings\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseSettings} releaseSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseSettings(releaseSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c63c3718-7cfd-41e0-b89b-81c1ca143437\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, releaseSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release definition for a given definitionId and revision\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition.\r\n     * @param {number} revision - Id of the revision.\r\n     */\r\n    getDefinitionRevision(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    revision: revision\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"258b82e0-9d41-43f3-86d6-fef14ddd44bc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get revision history for a release definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition.\r\n     */\r\n    getReleaseDefinitionHistory(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"258b82e0-9d41-43f3-86d6-fef14ddd44bc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getSummaryMailSections(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"224e92b2-8d13-4c14-b120-13d877c516f8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.SummaryMailSection, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.MailMessage} mailMessage\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    sendSummaryMail(mailMessage, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"224e92b2-8d13-4c14-b120-13d877c516f8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mailMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    getSourceBranches(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"0e5def23-78b3-461f-8198-1558f25041c8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     * @param {string} tag\r\n     */\r\n    addDefinitionTag(project, releaseDefinitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds multiple tags to a definition\r\n     *\r\n     * @param {string[]} tags\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    addDefinitionTags(tags, project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a tag from a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     * @param {string} tag\r\n     */\r\n    deleteDefinitionTag(project, releaseDefinitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    getDefinitionTags(project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a releaseId\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} tag\r\n     */\r\n    addReleaseTag(project, releaseId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds tag to a release\r\n     *\r\n     * @param {string[]} tags\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    addReleaseTags(tags, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a tag from a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} tag\r\n     */\r\n    deleteReleaseTag(project, releaseId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getReleaseTags(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTags(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"86cee25a-68ba-4ba3-9171-8ad6ffc6df93\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} releaseDeployPhaseId\r\n     */\r\n    getTasksForTaskGroup(project, releaseId, environmentId, releaseDeployPhaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    releaseDeployPhaseId: releaseDeployPhaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"4259191d-4b0a-4409-9fb3-09f22ab9bc47\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} attemptId\r\n     * @param {string} timelineId\r\n     */\r\n    getTasks2(project, releaseId, environmentId, attemptId, timelineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"4259291d-4b0a-4409-9fb3-04f22ab9bc47\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} attemptId\r\n     */\r\n    getTasks(project, releaseId, environmentId, attemptId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    attemptId: attemptId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.2\", \"Release\", \"36b276e0-3c70-4320-a63c-1a2e1466a0d1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getArtifactTypeDefinitions(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"8efc2a3c-1fc8-4f6d-9822-75e98cecb48f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactTypeDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    getArtifactVersions(project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseDefinitionId == null) {\r\n                throw new TypeError('releaseDefinitionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"30fc787e-a9e0-4a07-9fbc-3e903aa051d2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.Artifact[]} artifacts\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getArtifactVersionsForSources(artifacts, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"30fc787e-a9e0-4a07-9fbc-3e903aa051d2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, artifacts, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} baseReleaseId\r\n     * @param {number} top\r\n     * @param {string} artifactAlias\r\n     */\r\n    getReleaseWorkItemsRefs(project, releaseId, baseReleaseId, top, artifactAlias) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    baseReleaseId: baseReleaseId,\r\n                    '$top': top,\r\n                    artifactAlias: artifactAlias,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"Release\", \"4f165cc0-875c-4768-b148-f12f78769fab\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nReleaseApi.RESOURCE_AREA_ID = \"efc2f575-36ef-48e9-b672-0c6fb4a48ac5\";\r\nexports.ReleaseApi = ReleaseApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst SecurityRolesInterfaces = require(\"./interfaces/SecurityRolesInterfaces\");\r\nclass SecurityRolesApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-SecurityRoles-api', options);\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    getRoleAssignments(scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     * @param {string} identityId\r\n     */\r\n    removeRoleAssignment(scopeId, resourceId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId,\r\n                    identityId: identityId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string[]} identityIds\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    removeRoleAssignments(identityIds, scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, identityIds, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {SecurityRolesInterfaces.UserRoleAssignmentRef} roleAssignment\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     * @param {string} identityId\r\n     */\r\n    setRoleAssignment(roleAssignment, scopeId, resourceId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId,\r\n                    identityId: identityId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, roleAssignment, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {SecurityRolesInterfaces.UserRoleAssignmentRef[]} roleAssignments\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    setRoleAssignments(roleAssignments, scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, roleAssignments, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     */\r\n    getRoleDefinitions(scopeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"f4cc9a86-453c-48d2-b44d-d3bd5c105f4f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.SecurityRolesApi = SecurityRolesApi;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Module for handling serialization and deserialization of data contracts\r\n* (contracts sent from the server using the VSO default REST api serialization settings)\r\n*/\r\nvar ContractSerializer;\r\n(function (ContractSerializer) {\r\n    var _legacyDateRegExp;\r\n    /**\r\n     * Process a contract in its raw form (e.g. date fields are Dates, and Enums are numbers) and\r\n     * return a pure JSON object that can be posted to REST endpoint.\r\n     *\r\n     * @param data The object to serialize\r\n     * @param contractMetadata The type info/metadata for the contract type being serialized\r\n     * @param preserveOriginal If true, don't modify the original object. False modifies the original object (the return value points to the data argument).\r\n     */\r\n    function serialize(data, contractMetadata, preserveOriginal) {\r\n        if (data && contractMetadata) {\r\n            if (Array.isArray(data)) {\r\n                return _getTranslatedArray(data, contractMetadata, true, preserveOriginal);\r\n            }\r\n            else {\r\n                return _getTranslatedObject(data, contractMetadata, true, preserveOriginal);\r\n            }\r\n        }\r\n        else {\r\n            return data;\r\n        }\r\n    }\r\n    ContractSerializer.serialize = serialize;\r\n    /**\r\n     * Process a pure JSON object (e.g. that came from a REST call) and transform it into a JS object\r\n     * where date strings are converted to Date objects and enum values are converted from strings into\r\n     * their numerical value.\r\n     *\r\n     * @param data The object to deserialize\r\n     * @param contractMetadata The type info/metadata for the contract type being deserialize\r\n     * @param preserveOriginal If true, don't modify the original object. False modifies the original object (the return value points to the data argument).\r\n     * @param unwrapWrappedCollections If true check for wrapped arrays (REST apis will not return arrays directly as the root result but will instead wrap them in a { values: [], count: 0 } object.\r\n     */\r\n    function deserialize(data, contractMetadata, preserveOriginal, unwrapWrappedCollections) {\r\n        if (data) {\r\n            if (unwrapWrappedCollections && Array.isArray(data.value)) {\r\n                // Wrapped json array - unwrap it and send the array as the result\r\n                data = data.value;\r\n            }\r\n            if (contractMetadata) {\r\n                if (Array.isArray(data)) {\r\n                    data = _getTranslatedArray(data, contractMetadata, false, preserveOriginal);\r\n                }\r\n                else {\r\n                    data = _getTranslatedObject(data, contractMetadata, false, preserveOriginal);\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    ContractSerializer.deserialize = deserialize;\r\n    function _getTranslatedArray(array, typeMetadata, serialize, preserveOriginal) {\r\n        var resultArray = array;\r\n        var arrayCopy = [];\r\n        var i;\r\n        for (i = 0; i < array.length; i++) {\r\n            var item = array[i];\r\n            var processedItem;\r\n            // handle arrays of arrays\r\n            if (Array.isArray(item)) {\r\n                processedItem = _getTranslatedArray(item, typeMetadata, serialize, preserveOriginal);\r\n            }\r\n            else {\r\n                processedItem = _getTranslatedObject(item, typeMetadata, serialize, preserveOriginal);\r\n            }\r\n            if (preserveOriginal) {\r\n                arrayCopy.push(processedItem);\r\n                if (processedItem !== item) {\r\n                    resultArray = arrayCopy;\r\n                }\r\n            }\r\n            else {\r\n                array[i] = processedItem;\r\n            }\r\n        }\r\n        return resultArray;\r\n    }\r\n    function _getTranslatedObject(typeObject, typeMetadata, serialize, preserveOriginal) {\r\n        var processedItem = typeObject, copiedItem = false;\r\n        if (typeObject && typeMetadata.fields) {\r\n            for (var fieldName in typeMetadata.fields) {\r\n                var fieldMetadata = typeMetadata.fields[fieldName];\r\n                var fieldValue = typeObject[fieldName];\r\n                var translatedValue = _getTranslatedField(fieldValue, fieldMetadata, serialize, preserveOriginal);\r\n                if (fieldValue !== translatedValue) {\r\n                    if (preserveOriginal && !copiedItem) {\r\n                        processedItem = this._extend({}, typeObject);\r\n                        copiedItem = true;\r\n                    }\r\n                    processedItem[fieldName] = translatedValue;\r\n                }\r\n            }\r\n        }\r\n        return processedItem;\r\n    }\r\n    function _getTranslatedField(fieldValue, fieldMetadata, serialize, preserveOriginal) {\r\n        if (!fieldValue) {\r\n            return fieldValue;\r\n        }\r\n        if (fieldMetadata.isArray) {\r\n            if (Array.isArray(fieldValue)) {\r\n                var newArray = [], processedArray = fieldValue;\r\n                for (var index = 0; index < fieldValue.length; index++) {\r\n                    var arrayValue = fieldValue[index];\r\n                    var processedValue = arrayValue;\r\n                    if (fieldMetadata.isDate) {\r\n                        processedValue = _getTranslatedDateValue(arrayValue, serialize);\r\n                    }\r\n                    else if (fieldMetadata.enumType) {\r\n                        processedValue = _getTranslatedEnumValue(fieldMetadata.enumType, arrayValue, serialize);\r\n                    }\r\n                    else if (fieldMetadata.typeInfo) {\r\n                        if (Array.isArray(arrayValue)) {\r\n                            processedValue = _getTranslatedArray(arrayValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n                        }\r\n                        else {\r\n                            processedValue = _getTranslatedObject(arrayValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n                        }\r\n                    }\r\n                    if (preserveOriginal) {\r\n                        newArray.push(processedValue);\r\n                        if (processedValue !== arrayValue) {\r\n                            processedArray = newArray;\r\n                        }\r\n                    }\r\n                    else {\r\n                        fieldValue[index] = processedValue;\r\n                    }\r\n                }\r\n                return processedArray;\r\n            }\r\n            else {\r\n                return fieldValue;\r\n            }\r\n        }\r\n        else if (fieldMetadata.isDictionary) {\r\n            var dictionaryModified = false;\r\n            var newDictionary = {};\r\n            for (var key in fieldValue) {\r\n                var dictionaryValue = fieldValue[key];\r\n                var newKey = key, newValue = dictionaryValue;\r\n                if (fieldMetadata.dictionaryKeyIsDate) {\r\n                    newKey = _getTranslatedDateValue(key, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryKeyEnumType) {\r\n                    newKey = _getTranslatedEnumValue(fieldMetadata.dictionaryKeyEnumType, key, serialize);\r\n                }\r\n                if (fieldMetadata.dictionaryValueIsDate) {\r\n                    newValue = _getTranslatedDateValue(dictionaryValue, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueEnumType) {\r\n                    newValue = _getTranslatedEnumValue(fieldMetadata.dictionaryValueEnumType, dictionaryValue, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueTypeInfo) {\r\n                    newValue = _getTranslatedObject(newValue, fieldMetadata.dictionaryValueTypeInfo, serialize, preserveOriginal);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueFieldInfo) {\r\n                    newValue = _getTranslatedField(dictionaryValue, fieldMetadata.dictionaryValueFieldInfo, serialize, preserveOriginal);\r\n                }\r\n                newDictionary[newKey] = newValue;\r\n                if (key !== newKey || dictionaryValue !== newValue) {\r\n                    dictionaryModified = true;\r\n                }\r\n            }\r\n            return dictionaryModified ? newDictionary : fieldValue;\r\n        }\r\n        else {\r\n            if (fieldMetadata.isDate) {\r\n                return _getTranslatedDateValue(fieldValue, serialize);\r\n            }\r\n            else if (fieldMetadata.enumType) {\r\n                return _getTranslatedEnumValue(fieldMetadata.enumType, fieldValue, serialize);\r\n            }\r\n            else if (fieldMetadata.typeInfo) {\r\n                return _getTranslatedObject(fieldValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n            }\r\n            else {\r\n                return fieldValue;\r\n            }\r\n        }\r\n    }\r\n    function _getTranslatedEnumValue(enumType, valueToConvert, serialize) {\r\n        if (serialize && typeof valueToConvert === \"number\") {\r\n            // Serialize: number --> String\r\n            // Because webapi handles the numerical value for enums, there is no need to convert to string.\r\n            // Let this fall through to return the numerical value.\r\n        }\r\n        else if (!serialize && typeof valueToConvert === \"string\") {\r\n            // Deserialize: String --> number\r\n            var result = 0;\r\n            if (valueToConvert) {\r\n                var splitValue = valueToConvert.split(\",\");\r\n                for (var i = 0; i < splitValue.length; i++) {\r\n                    var valuePart = splitValue[i];\r\n                    //equivalent to jquery trim\r\n                    //copied from https://github.com/HubSpot/youmightnotneedjquery/blob/ef987223c20e480fcbfb5924d96c11cd928e1226/comparisons/utils/trim/ie8.js\r\n                    var enumName = valuePart.replace(/^\\s+|\\s+$/g, '') || \"\";\r\n                    if (enumName) {\r\n                        var resultPart = enumType.enumValues[enumName];\r\n                        if (!resultPart) {\r\n                            // No matching enum value. Try again but case insensitive\r\n                            var lowerCaseEnumName = enumName.toLowerCase();\r\n                            if (lowerCaseEnumName !== enumName) {\r\n                                for (var name in enumType.enumValues) {\r\n                                    var value = enumType.enumValues[name];\r\n                                    if (name.toLowerCase() === lowerCaseEnumName) {\r\n                                        resultPart = value;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (resultPart) {\r\n                            result |= resultPart;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return valueToConvert;\r\n    }\r\n    function _getTranslatedDateValue(valueToConvert, serialize) {\r\n        if (!serialize && typeof valueToConvert === \"string\") {\r\n            // Deserialize: String --> Date\r\n            var dateValue = new Date(valueToConvert);\r\n            if (isNaN(dateValue) && navigator.userAgent && /msie/i.test(navigator.userAgent)) {\r\n                dateValue = _convertLegacyIEDate(valueToConvert);\r\n            }\r\n            return dateValue;\r\n        }\r\n        return valueToConvert;\r\n    }\r\n    function _convertLegacyIEDate(dateStringValue) {\r\n        // IE 8/9 does not handle parsing dates in ISO form like:\r\n        // 2013-05-13T14:26:54.397Z\r\n        var match;\r\n        if (!_legacyDateRegExp) {\r\n            _legacyDateRegExp = new RegExp(\"(\\\\d+)-(\\\\d+)-(\\\\d+)T(\\\\d+):(\\\\d+):(\\\\d+).(\\\\d+)Z\");\r\n        }\r\n        match = _legacyDateRegExp.exec(dateStringValue);\r\n        if (match) {\r\n            return new Date(Date.UTC(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]), parseInt(match[4]), parseInt(match[5]), parseInt(match[6]), parseInt(match[7])));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    // jquery extend method in native javascript (used to clone objects)\r\n    // copied from https://github.com/HubSpot/youmightnotneedjquery/blob/ef987223c20e480fcbfb5924d96c11cd928e1226/comparisons/utils/extend/ie8.js\r\n    var _extend = function (out) {\r\n        out = out || {};\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            if (!arguments[i])\r\n                continue;\r\n            for (var key in arguments[i]) {\r\n                if (arguments[i].hasOwnProperty(key))\r\n                    out[key] = arguments[i][key];\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n})(ContractSerializer = exports.ContractSerializer || (exports.ContractSerializer = {}));\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst taskagentbasem = require(\"./TaskAgentApiBase\");\r\nconst url = require(\"url\");\r\nclass TaskAgentApi extends taskagentbasem.TaskAgentApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, options);\r\n        // hang on to the handlers in case we need to fall back to an account-level client\r\n        this._handlers = handlers;\r\n        this._options = options;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param onResult callback function\r\n     */\r\n    deleteTaskDefinition(taskId) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.deleteTaskDefinition(taskId);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.deleteTaskDefinition(taskId);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting ArrayBuffer\r\n     */\r\n    getTaskContentZip(taskId, versionString, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskContentZip(taskId, versionString, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskContentZip(taskId, versionString, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition\r\n     */\r\n    getTaskDefinition(taskId, versionString, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskDefinition(taskId, versionString, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskDefinition(taskId, versionString, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition[]\r\n     */\r\n    getTaskDefinitions(taskId, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskDefinitions(taskId, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskDefinitions(taskId, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream\r\n     * @param {string} taskId\r\n     * @param {boolean} overwrite\r\n     * @param onResult callback function\r\n     */\r\n    uploadTaskDefinition(customHeaders, contentStream, taskId, overwrite) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                taskId: taskId\r\n            };\r\n            let queryValues = {\r\n                overwrite: overwrite,\r\n            };\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.0-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    resolve(res.result);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    _getFallbackClient(baseUrl) {\r\n        if (!this._fallbackClient) {\r\n            var accountUrl = this._getAccountUrl(baseUrl);\r\n            if (accountUrl) {\r\n                this._fallbackClient = new TaskAgentApi(accountUrl, this._handlers, this._options);\r\n            }\r\n        }\r\n        return this._fallbackClient;\r\n    }\r\n    _getAccountUrl(collectionUrl) {\r\n        // converts a collection URL to an account URL\r\n        // returns null if the conversion can't be made\r\n        var purl = url.parse(collectionUrl);\r\n        if (!purl.protocol || !purl.host) {\r\n            return null;\r\n        }\r\n        var accountUrl = purl.protocol + '//' + purl.host;\r\n        // purl.path is something like /DefaultCollection or /tfs/DefaultCollection or /DefaultCollection/\r\n        var splitPath = purl.path.split('/').slice(1);\r\n        if (splitPath.length === 0 || (splitPath.length === 1 && splitPath[0] === '')) {\r\n            return null;\r\n        }\r\n        // if the first segment of the path is tfs, the second is the collection. if the url ends in / there will be a third, empty entry\r\n        if (splitPath[0] === 'tfs' && (splitPath.length === 2 || (splitPath.length === 3 && splitPath[2].length === 0))) {\r\n            //on prem\r\n            accountUrl += '/' + 'tfs';\r\n        }\r\n        else if (splitPath.length === 2 && splitPath[0] === '') {\r\n            // /DefaultCollection/\r\n            return accountUrl;\r\n        }\r\n        else if (splitPath.length > 1) {\r\n            return null;\r\n        }\r\n        return accountUrl;\r\n    }\r\n}\r\nexports.TaskAgentApi = TaskAgentApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TaskAgentInterfaces = require(\"./interfaces/TaskAgentInterfaces\");\r\nclass TaskAgentApiBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-TaskAgent-api', options);\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentCloud} agentCloud\r\n     */\r\n    addAgentCloud(agentCloud) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, agentCloud, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} agentCloudId\r\n     */\r\n    deleteAgentCloud(agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} agentCloudId\r\n     */\r\n    getAgentCloud(agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getAgentClouds() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentCloud} updatedCloud\r\n     * @param {number} agentCloudId\r\n     */\r\n    updateAgentCloud(updatedCloud, agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updatedCloud, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent cloud types.\r\n     *\r\n     */\r\n    getAgentCloudTypes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"5932e193-f376-469d-9c3e-e5588ce12cb5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentCloudType, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} queueId\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getAgentRequestsForQueue(project, queueId, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (top == null) {\r\n                throw new TypeError('top can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"f5f81ffb-f396-498d-85b1-5ada145e648a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentJobRequest} request\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} queueId\r\n     */\r\n    queueAgentRequest(request, project, queueId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"f5f81ffb-f396-498d-85b1-5ada145e648a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, request, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Details about the agent being added\r\n     * @param {number} poolId - The agent pool in which to add the agent\r\n     */\r\n    addAgent(agent, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.\r\n     *\r\n     * @param {number} poolId - The pool ID to remove the agent from\r\n     * @param {number} agentId - The agent ID to remove\r\n     */\r\n    deleteAgent(poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get information about an agent.\r\n     *\r\n     * @param {number} poolId - The agent pool containing the agent\r\n     * @param {number} agentId - The agent ID to get information about\r\n     * @param {boolean} includeCapabilities - Whether to include the agent's capabilities in the response\r\n     * @param {boolean} includeAssignedRequest - Whether to include details about the agent's current work\r\n     * @param {boolean} includeLastCompletedRequest - Whether to include details about the agents' most recent completed work\r\n     * @param {string[]} propertyFilters - Filter which custom properties will be returned\r\n     */\r\n    getAgent(poolId, agentId, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                let queryValues = {\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeAssignedRequest: includeAssignedRequest,\r\n                    includeLastCompletedRequest: includeLastCompletedRequest,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agents.\r\n     *\r\n     * @param {number} poolId - The agent pool containing the agents\r\n     * @param {string} agentName - Filter on agent name\r\n     * @param {boolean} includeCapabilities - Whether to include the agents' capabilities in the response\r\n     * @param {boolean} includeAssignedRequest - Whether to include details about the agents' current work\r\n     * @param {boolean} includeLastCompletedRequest - Whether to include details about the agents' most recent completed work\r\n     * @param {string[]} propertyFilters - Filter which custom properties will be returned\r\n     * @param {string[]} demands - Filter by demands the agents can satisfy\r\n     */\r\n    getAgents(poolId, agentName, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters, demands) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    agentName: agentName,\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeAssignedRequest: includeAssignedRequest,\r\n                    includeLastCompletedRequest: includeLastCompletedRequest,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    demands: demands && demands.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Updated details about the replacing agent\r\n     * @param {number} poolId - The agent pool to use\r\n     * @param {number} agentId - The agent to replace\r\n     */\r\n    replaceAgent(agent, poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update agent details.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Updated details about the agent\r\n     * @param {number} poolId - The agent pool to use\r\n     * @param {number} agentId - The agent to update\r\n     */\r\n    updateAgent(agent, poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns list of azure subscriptions\r\n     *\r\n     */\r\n    getAzureManagementGroups() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"39fe3bf2-7ee0-4198-a469-4a29929afa9c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns list of azure subscriptions\r\n     *\r\n     */\r\n    getAzureSubscriptions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"bcd6189c-0303-471f-a8e1-acb22b74d700\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET a PAT token for managing (configuring, removing, tagging) deployment targets in a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment targets are managed.\r\n     */\r\n    generateDeploymentGroupAccessToken(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"3d197ba2-c3e9-4253-882f-0ee2440f8174\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a deployment group.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentGroupCreateParameter} deploymentGroup - Deployment group to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addDeploymentGroup(deploymentGroup, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, deploymentGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to be deleted.\r\n     */\r\n    deleteDeploymentGroup(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a deployment group by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupActionFilter} actionFilter - Get the deployment group only if this action can be performed on it.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupExpands} expand - Include these additional details in the returned object.\r\n     */\r\n    getDeploymentGroup(project, deploymentGroupId, actionFilter, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    actionFilter: actionFilter,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment groups by name or IDs.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name - Name of the deployment group.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupActionFilter} actionFilter - Get only deployment groups on which this action can be performed.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupExpands} expand - Include these additional details in the returned objects.\r\n     * @param {string} continuationToken - Get deployment groups with names greater than this continuationToken lexicographically.\r\n     * @param {number} top - Maximum number of deployment groups to return. Default is **1000**.\r\n     * @param {number[]} ids - Comma separated list of IDs of the deployment groups.\r\n     */\r\n    getDeploymentGroups(project, name, actionFilter, expand, continuationToken, top, ids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    actionFilter: actionFilter,\r\n                    '$expand': expand,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    ids: ids && ids.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a deployment group.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentGroupUpdateParameter} deploymentGroup - Deployment group to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     */\r\n    updateDeploymentGroup(deploymentGroup, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, deploymentGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment group metrics.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} deploymentGroupName - Name of the deployment group.\r\n     * @param {string} continuationToken - Get metrics for deployment groups with names greater than this continuationToken lexicographically.\r\n     * @param {number} top - Maximum number of deployment group metrics to return. Default is **50**.\r\n     */\r\n    getDeploymentGroupsMetrics(project, deploymentGroupName, continuationToken, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    deploymentGroupName: deploymentGroupName,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"281c6308-427a-49e1-b83a-dac0f4862189\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroupMetrics, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForDeploymentMachine(project, deploymentGroupId, machineId, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (machineId == null) {\r\n                throw new TypeError('machineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    machineId: machineId,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"a3540e5b-f0dc-4668-963b-b752459be545\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number[]} machineIds\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForDeploymentMachines(project, deploymentGroupId, machineIds, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    machineIds: machineIds && machineIds.join(\",\"),\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"a3540e5b-f0dc-4668-963b-b752459be545\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     */\r\n    refreshDeploymentMachines(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"91006ac4-0f68-4d82-a2bc-540676bd73ce\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET a PAT token for managing (configuring, removing, tagging) deployment agents in a deployment pool.\r\n     *\r\n     * @param {number} poolId - ID of the deployment pool in which deployment agents are managed.\r\n     */\r\n    generateDeploymentPoolAccessToken(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"e077ee4a-399b-420b-841f-c43fbc058e0b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment pool summaries.\r\n     *\r\n     * @param {string} poolName - Name of the deployment pool.\r\n     * @param {TaskAgentInterfaces.DeploymentPoolSummaryExpands} expands - Include these additional details in the returned objects.\r\n     * @param {number[]} poolIds - List of deployment pool ids.\r\n     */\r\n    getDeploymentPoolsSummary(poolName, expands, poolIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    poolName: poolName,\r\n                    expands: expands,\r\n                    poolIds: poolIds && poolIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"6525d6c6-258f-40e0-a1a9-8a24a3957625\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentPoolSummary, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent requests for a deployment target.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which the target belongs.\r\n     * @param {number} targetId - ID of the deployment target.\r\n     * @param {number} completedRequestCount - Maximum number of completed requests to return. Default is **50**\r\n     */\r\n    getAgentRequestsForDeploymentTarget(project, deploymentGroupId, targetId, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (targetId == null) {\r\n                throw new TypeError('targetId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    targetId: targetId,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"2fac0be3-8c8f-4473-ab93-c1389b08a2c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent requests for a list deployment targets.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which the targets belong.\r\n     * @param {number[]} targetIds - Comma separated list of IDs of the deployment targets.\r\n     * @param {number} ownerId - Id of owner of agent job request.\r\n     * @param {Date} completedOn - Datetime to return request after this time.\r\n     * @param {number} completedRequestCount - Maximum number of completed requests to return for each target. Default is **50**\r\n     */\r\n    getAgentRequestsForDeploymentTargets(project, deploymentGroupId, targetIds, ownerId, completedOn, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    targetIds: targetIds && targetIds.join(\",\"),\r\n                    ownerId: ownerId,\r\n                    completedOn: completedOn,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"2fac0be3-8c8f-4473-ab93-c1389b08a2c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Upgrade the deployment targets in a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     */\r\n    refreshDeploymentTargets(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"1c1a817f-f23d-41c6-bf8d-14b638f64152\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Proxy for a GET request defined by an 'endpoint'. The request is authorized using a service connection. The response is filtered using an XPath/Json based selector.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskDefinitionEndpoint} endpoint - Describes the URL to fetch.\r\n     */\r\n    queryEndpoint(endpoint) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"6.1-preview.1\", \"distributedtask\", \"f223b809-8c33-4b7d-b53f-07232569b5d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, endpoint, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get environment deployment execution history\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     */\r\n    getEnvironmentDeploymentExecutionRecords(project, environmentId, continuationToken, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                l